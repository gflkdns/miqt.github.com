<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2016年终总结</title>
    <url>/2017/01/30/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>伴随着从北京回家过年，2016在除夕夜的一声钟响中彻底的过去了。</p>
<p>就在今年，我毕业了，于毕业的谢幕一同进行的还有找工作大作战，所幸在进行了两个周的战斗之后，战斗胜利，我成功入职了中天易观，挺满意的公司，可爱的同事和幽默的领导。</p>
<a id="more"></a>
<p>开发了sway的一些业务界面和相机引导拍照系统。他是一个类似于全景引导拍摄的一个系统，会根据手机上的传感器的数据来完成一系列的操作。在这上面花费了大量的时间。</p>
<p>使用unity3d开发了open obj格式的模型的小demo，支持缩放，收视旋转。脚本方面初尝C#，和java很相似。</p>
<p>研究使用高通AR和视+AR开发图片识别展示模型的demo，可以识别并且也可以open我们自己的obj格式的模型，AR和VR是我在初中网络小说中看到的东西，在coding这方面的代码时，我感觉很兴奋，虽然是使用SDK，但我明显的在感觉到科技进步的那种实际感，非常棒。</p>
<p>学习了python，其实学python之前我只是单纯的想了解一下tensorflow(一个google开发的人工智能引擎)，之后发现python其实是一门简单的，强大的开发语言，几行代码就能干很多的事情，因此后来系统的学习了一下，另外快过年的一段时间在试着用python写一个网络小工具出来，没成功，因为还有一部分网络方面的知识需要补齐。</p>
<p>熟练的使用了git版本控制系统和github，一个coder大牛汇聚的网站。虽然现在的公司对于代码的管理仍然是SVN为主。</p>
<p>最后的一条总结，16年还是没有找到女朋友/(ㄒoㄒ)/~~，会尽量调整自己，外观和一些性格缺点，17尽力吧。只希望在我垂垂老矣的时候，我也能说：“我也曾为爱不顾一切！”想必那也是比代码更加激动人心的。没错就是这么想的 =_=！</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2018面经</title>
    <url>/2018/06/11/2018%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<p>从毕业之后一直在那里工作了将尽3年的公司，好好的突然就老总开员工大会告知公司资金出问题，大家都散了吧，可以说是始料未及啊。  </p>
<p>无奈，4月份，又要开始出来找工作了，在写这篇博客之前找到工作了，还算满意吧。下面就是对本次面试经历中印象比较深的几个问题做一个总结。  </p>
<h3 id="今日头条"><a href="#今日头条" class="headerlink" title="今日头条"></a>今日头条</h3><p>4月初投的简历吧，直到四月底今日头条打电话来让过去面试，hr提前提醒了面试会有算法方面的东西，预留了3天的时间让好好准备准备，只来得及复习了一下以前看过的算法题，心里还是有点紧张的。</p>
<p>印象深刻的几个问题：</p>
<a id="more"></a>

<ol>
<li>http 请求包的结构？</li>
<li>window view 的区别？两个activity是同一个window对象吗？</li>
<li>animation animater 区别？android动画同样的代码？不同机型执行的速度不一样可能是什么原因？</li>
<li>伪代码，自己实现handler message机制</li>
<li>如何保证线程安全问题。 synchronized lock 的区别？举个例子</li>
<li>android事件传递机制？viewpager 嵌套listview，怎么解决他们的滑动手势问题？</li>
<li>插件化，组件化</li>
<li>http连接如何复用？</li>
<li>surfaceview跟TextureView的区别，surfaceview想让显示的形状为圆形，怎么实现？</li>
<li>插件化，如何启动没有在Androidmainfirst.xml中注册的activity？</li>
<li>动态规划</li>
</ol>
<h3 id="高德地图"><a href="#高德地图" class="headerlink" title="高德地图"></a>高德地图</h3><ol>
<li>handler message 通讯机制,处理message的时候怎么知道是去哪个callback处理的？一个线程可以有多少个handler</li>
<li>看过那些开源框架的源码？</li>
<li>lru缓存原理</li>
<li>别人写的项目，让你接手来进行，你打算怎么做？</li>
<li>opengl</li>
<li>其他语言了解吗？跟java对比</li>
<li>多线程</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>java 8 特性。</li>
<li>android 每个版本的变更内容。适配</li>
<li>activity 4种启动模式</li>
<li>线程池，四种线程池的区别</li>
<li>java 四种引用类型，区别</li>
<li>布局优化，merge，viewstub，include</li>
<li>内存，耗电，响应时间，gc原理。</li>
<li>手写单例模式，消费者模式。</li>
<li>hashmap的实现原理</li>
</ol>
<hr>
<p>算法题：</p>
<ol>
<li>后序遍历二叉树，使用迭代的方式。</li>
<li>链表倒置。</li>
<li>字符串去重，要求空间复杂度为o(n),不可以用hashset数组。</li>
</ol>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Android unity3d 交互传递消息</title>
    <url>/2017/08/27/Android-unity3d-%E4%BA%A4%E4%BA%92%E4%BC%A0%E9%80%92%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<p><strong>unity调用Android的方法</strong></p>
<p>脚本如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">public class UseAndroidApi : MonoBehaviour &#123;</span><br><span class="line">	private string message &#x3D; &quot;我来自unity&quot;;</span><br><span class="line">	void Start () &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	void Update () &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	void OnGUI()&#123;</span><br><span class="line">		message &#x3D; GUILayout.TextField (stringToEdit, GUILayout.Width(300),GUILayout.Height(100));</span><br><span class="line">		if(GUI.Button(new Rect(10,120,200,100),&quot;调用Android方法&quot;))&#123;</span><br><span class="line">			using (AndroidJavaClass jc &#x3D; new AndroidJavaClass(&quot;com.unity3d.player.UnityPlayer&quot;))</span><br><span class="line">			&#123;</span><br><span class="line">				using( AndroidJavaObject jo &#x3D; jc.GetStatic&lt;AndroidJavaObject&gt;(&quot;currentActivity&quot;))</span><br><span class="line">				&#123;</span><br><span class="line">					&#x2F;&#x2F;要传递过去的参数</span><br><span class="line">					object[] message&#x3D;new object[2];</span><br><span class="line">					message [0] &#x3D; 1;</span><br><span class="line">					message [1] &#x3D; message;</span><br><span class="line">					jo.Call(&quot;OnUnityMessage&quot;,message);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;用来接收Android发过来的消息</span><br><span class="line">	void OnAndroidMessage(string str)&#123;</span><br><span class="line">		str &#x3D; message;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把它挂载到Main Camera之后运行效果如图：</p>
<p><img src="http://img.blog.csdn.net/20170216104706148?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjc1MTI2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>其中关键的部分代码是17<del>28行，这里表示请求调用Android当前activity里面的OnUnityMessage方法，并向这个方法传递了两个参数，一个int类型的’1’和一个String类型的’message’,32</del>34行的代码则是定义了供Android端调用的一个方法。unity端准备完成之后，导出Android 项目：</p>
<p><img src="http://img.blog.csdn.net/20170216105014137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjc1MTI2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>用Android studio打开导出的项目，找到UnityPlayerActivity这个类，然后直接加入方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnUnityMessage</span><span class="params">(<span class="keyword">int</span> whit, String message)</span> </span>&#123;</span><br><span class="line">       Toast.makeText(<span class="keyword">this</span>, message, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后用Android studio运行起来，点击【调用Android方法】按钮，这个方法会被调用，并在屏幕上弹出一个Toast显示unity发过来的消息。</p>
<p><strong>Android调用unity方法</strong></p>
<p>Android调用unity方法很简单，只有一句话：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UnityPlayer.UnitySendMessage(&quot;Main Camera&quot;, &quot;OnAndroidMessage&quot;, message);</span><br></pre></td></tr></table></figure>
<p>第一个参数传我们刚才挂载脚本的Main Camera名称，第二个参数传我们要调用的unity脚本里面的方法，第三个参数我们要给方法传过去的消息。</p>
<p>直接修改刚才导出的Android studio项目UnityPlayerActivity类的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnUnityMessage</span><span class="params">(<span class="keyword">int</span> whit, String message)</span> </span>&#123;</span><br><span class="line">       Toast.makeText(<span class="keyword">this</span>, message, Toast.LENGTH_SHORT).show();</span><br><span class="line">       sendMessageToUnity(<span class="string">"这是android 收到消息之后又发回来的消息。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUnity</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">       UnityPlayer.UnitySendMessage(<span class="string">"Main Camera"</span>, <span class="string">"OnAndroidMessage"</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就完成了，用Android studio运行起来，点击【调用Android方法】按钮，unity会调用Android的OnUnityMessage方法，并在屏幕上弹出一个Toast显示unity发过来的消息。而OnUnityMessage方法会接着unity端发过去一条消息。</p>
<p>自此Android unity3d 代码交互传递消息就讲解完了，去尝试着用unity给Android开发一些好玩的插件吧。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 7.0行为变更 FileUriExposedException解决方案</title>
    <url>/2017/08/06/Android-7-0%E8%A1%8C%E4%B8%BA%E5%8F%98%E6%9B%B4-FileUriExposedException%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>当我们开发关于【在应用间共享文件】相关功能的时候，在Android 7.0上经常会报出此运行时异常，那么Android 7.0以下没问题的代码，为什么跑到Android 7.0+的设备上运行就出问题了呢？，这主要来自于Android 7.0的一项【行为变更】！</p>
<a id="more"></a>
<p>对于面向 Android 7.0 的应用，Android 框架执行的 StrictMode API 政策禁止在您的应用外部公开 file:// URI。如果一项包含文件 URI 的 intent 离开您的应用，则应用出现故障，并出现 FileUriExposedException 异常。如图：</p>
<p><img src="http://img.blog.csdn.net/20170509102321053?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjc1MTI2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>要在应用间共享文件，您应发送一项 content:// URI，并授予 URI 临时访问权限。进行此授权的最简单方式是使用 FileProvider 类。</p>
<p>FileProvider 类的用法：</p>
<p>第一步：为您的应用定义一个FileProvider清单条目，这个条目可以声明一个xml文件，这个xml文件用来指定应用程序可以共享的目录。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.example.myapp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:authorities</span>=<span class="string">"com.example.myapp.fileprovider"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:resource</span>=<span class="string">"@xml/filepaths"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这段代码中， <em>android:authorities</em> 属性应该是唯一的，推荐使用【应用包名+fileprovider】，推荐这样写  android:authorities=”${applicationId}.file_provider”，可以自动找到应用包名。<br>meta-data标签指定了一个路径，这个路径使用resource指定的xml文件来指明是那个路径：<br>xml文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-files-path</span> <span class="attr">name</span>=<span class="string">"bga_upgrade_apk"</span> <span class="attr">path</span>=<span class="string">"upgrade_apk"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Uri的获取方式也要根据当前Android系统版本区分对待：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File dir = getExternalFilesDir(<span class="string">"user_icon"</span>);</span><br><span class="line">  <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.M) &#123;</span><br><span class="line">      icon_path = FileProvider.getUriForFile(getApplicationContext(),</span><br><span class="line">              <span class="string">"com.mqt.android_headicon_cut.file_provider"</span>, <span class="keyword">new</span> File(dir, TEMP_FILE_NAME));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      icon_path = Uri.fromFile(<span class="keyword">new</span> File(dir, TEMP_FILE_NAME));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这样问题就解决了。贴上一个安装apk适配7.0的例子：<a href="http://blog.csdn.net/qq_27512671/article/details/70224978" target="_blank" rel="noopener">http://blog.csdn.net/qq_27512671/article/details/70224978</a></p>
<hr>
<p>参考：<br><a href="https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html#accessibility" target="_blank" rel="noopener">https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html#accessibility</a><br><a href="https://developer.android.google.cn/training/secure-file-sharing/setup-sharing.html#DefineProvider" target="_blank" rel="noopener">https://developer.android.google.cn/training/secure-file-sharing/setup-sharing.html#DefineProvider</a></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android studio下的Android JNI调用以及动态链接库.so的生成</title>
    <url>/2017/05/07/Android-studio%E4%B8%8B%E7%9A%84Android-JNI%E8%B0%83%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-so%E7%9A%84%E7%94%9F%E6%88%90%EF%BC%882016-04-14-11-00%EF%BC%89/</url>
    <content><![CDATA[<h2 id="什么是JNI："><a href="#什么是JNI：" class="headerlink" title="什么是JNI："></a>什么是JNI：</h2><p>JNI(Java Native Interface)提供了Java和其他语言交互的一个接口，为什么说是接口呢，因为如果你用想用C++实现一个简单的两个数字加减的方法并把值返回，那么就需要首先在AndroidJniUtils.java（就是你写的调用C代码的接口类）类中像定义接口方法一样来预定义一个方法，而具体实现其实使用的就是你的C代码了。</p>
<a id="more"></a>

<h2 id="JNI的使用场景"><a href="#JNI的使用场景" class="headerlink" title="JNI的使用场景"></a>JNI的使用场景</h2><p>①你的一些功能算法已经用c代码实现过了，可以直接用JNI调用而不用在java语言重新写一遍。<br>②你对某一些算法运算或图形渲染的性能要求很高，在优化了又优化之后你感觉java还是不能达到你最理想的速度，使用JNI调用c代码实现这个算法，那样会更快一些。<br>③对于Android API而言，你要调用API没有访问过的手机硬件，像手机上的摄像头，感光传感器，重力传感器，陀螺仪等设备Android的API已经提供了对应的类库，而如果现在你的手机上现在新增了一个硬件但是Android API没有对应的类库给你用呢，这时候你就要使用JNI调用C代码，然后通过C控制硬件来实现了。别忘了java是运行在虚拟机上的，是无法直接的访问底层硬件的。</p>
<h2 id="一个在Android上使用JNI的例子"><a href="#一个在Android上使用JNI的例子" class="headerlink" title="一个在Android上使用JNI的例子"></a>一个在Android上使用JNI的例子</h2><p><strong>准备工作：</strong><br>1.配置你的NDK路径：Android studio中.<br><img src="http://img.blog.csdn.net/20160421154434949" alt="这里写图片描述"></p>
<p>如果你没有NDK的话它会提示你下载。我当时就是从这里下载的。</p>
<p>②在你的app下面的build.gradle文件中的defaultConfig节点下加入↓</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ndk &#123;</span><br><span class="line">          moduleName <span class="string">"MyJniLibName"</span></span><br><span class="line">          abiFilters <span class="string">"armeabi"</span>, <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>③在你的gradle.properties最后面加上：android.useDeprecatedNdk=true<br><strong>编写代码</strong><br>1.编写带有native声明的方法的java类（也就是上文所说的AndroidJniUtils.java，当然名字任意起），注意这里面不要有中文注释，不然在进行下一步的时候会错误: 编码GBK的不可映射字符            </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidJniUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"MyJniLibName"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getStringFromC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.使用javah  -jni  包名.类名生成扩展名为.h的头文件<br>//cd到你的项目的java路径下:<br>cd  cd G:\svn1320160320\AndroidJNIDemo\app\src\main\java<br>//生成头文件<br>javah  -jni  com.miser.androidjnidemo.JniUseUtil</p>
<p>3.在你项目的…\app\src\main\jni\文件夹下，新建一个xxx.c的文件然后将你刚才生成的.h结尾的文件内容复制到这个文件中。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;</span><br><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">&#x2F;* Header for class com_miser_androidusejni_AndroidJniUtils *&#x2F;</span><br><span class="line"></span><br><span class="line">#ifndef _Included_com_miser_androidusejni_AndroidJniUtils</span><br><span class="line">#define _Included_com_miser_androidusejni_AndroidJniUtils</span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#endif</span><br><span class="line">&#x2F;*</span><br><span class="line"> * Class:     com_miser_androidusejni_AndroidJniUtils</span><br><span class="line"> * Method:    getStringFromC</span><br><span class="line"> * Signature: (II)Ljava&#x2F;lang&#x2F;String;</span><br><span class="line"> *&#x2F;</span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_miser_androidusejni_AndroidJniUtils_getStringFromC</span><br><span class="line">        (JNIEnv *env, jclass jclass1, jint a, jint b) &#123;</span><br><span class="line">    return (*env)-&gt;NewStringUTF(env, &quot;欢迎光临我的博客：&quot;</span><br><span class="line">            &quot;\nhttp:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_27512671&quot;</span><br><span class="line">           );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<p>4.调用运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                TextView textView = (TextView) findViewById(R.id.text);</span><br><span class="line">                textView.setText(AndroidJniUtils.getStringFromC());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在你的项目编译完成之后就会生成动态链接库.so文件，这些文件可以在…\AndroidUseJni\app\build\intermediates\ndk\debug\lib中找到<br>Demo地址：<a href="http://download.csdn.net/detail/qq_27512671/9498210" target="_blank" rel="noopener">http://download.csdn.net/detail/qq_27512671/9498210</a></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 自定义感光器控件SolarProgressView，也可当做普通ProgressBar使用</title>
    <url>/2017/08/04/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%84%9F%E5%85%89%E5%99%A8%E6%8E%A7%E4%BB%B6SolarProgressView%EF%BC%8C%E4%B9%9F%E5%8F%AF%E5%BD%93%E5%81%9A%E6%99%AE%E9%80%9AProgressBar%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Android-自定义感光器控件SolarProgressView，也可当做普通ProgressBar使用"><a href="#Android-自定义感光器控件SolarProgressView，也可当做普通ProgressBar使用" class="headerlink" title="Android 自定义感光器控件SolarProgressView，也可当做普通ProgressBar使用"></a>Android 自定义感光器控件SolarProgressView，也可当做普通ProgressBar使用</h2><hr>
<p>本文出处：  <a href="http://blog.csdn.net/qq_27512671/article/details/76020265" target="_blank" rel="noopener">http://blog.csdn.net/qq_27512671/article/details/76020265</a><br>完整代码获取：<a href="https://github.com/miqt/SolarProgressView" target="_blank" rel="noopener">https://github.com/miqt/SolarProgressView</a><br>实现效果：<br><img src="https://github.com/miqt/SolarProgressView/blob/master/preview.gif?raw=true" alt="实现效果"></p>
<hr>
<a id="more"></a>
<h2 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h2><p>①光线强度数据的获取：Android光线传感器<br>②光线强度的UI展示：自定义SolarProgressView<br>③光线数据源 –&gt; UI展示需要数据的转化: 数据梯度设置<br>④其他动画效果的实现:光线强度增加的过度动画  </p>
<h3 id="光线强度数据的获取：Android光线传感器"><a href="#光线强度数据的获取：Android光线传感器" class="headerlink" title="光线强度数据的获取：Android光线传感器"></a>光线强度数据的获取：Android光线传感器</h3><p>Android光线传感器是Android获取周围环境光的感光器元件，通过注册感光器的传感器监听，我们就可以通过传感器传过来的数值。</p>
<p>获得光线传感器实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">manager = (SensorManager) getSystemService(SENSOR_SERVICE);</span><br><span class="line">sensor = manager.getDefaultSensor(Sensor.TYPE_LIGHT);</span><br></pre></td></tr></table></figure>
<p>注册监听器开始监听传感器数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> SensorEventListener listener = <span class="keyword">new</span> SensorEventListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSensorChanged</span><span class="params">(SensorEvent event)</span> </span>&#123;       </span><br><span class="line">			            <span class="comment">//取得数据</span></span><br><span class="line">            Log.i(<span class="string">"sensor_Data"</span>,<span class="string">"\naccuracy : "</span> + event.accuracy</span><br><span class="line">            + <span class="string">"\ntimestamp : "</span> + event.timestamp</span><br><span class="line">            + <span class="string">"\nvalues : "</span> + Arrays.toString(event.values));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAccuracyChanged</span><span class="params">(Sensor sensor, <span class="keyword">int</span> accuracy)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    manager.registerListener(listener, sensor, SensorManager.SENSOR_DELAY_NORMAL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在合适的时机取消注册，节省资源占用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPause();</span><br><span class="line">    manager.unregisterListener(listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="光线强度的UI展示：自定义SolarProgressView"><a href="#光线强度的UI展示：自定义SolarProgressView" class="headerlink" title="光线强度的UI展示：自定义SolarProgressView"></a>光线强度的UI展示：自定义SolarProgressView</h3><p>在用来展示的数据都准备好了之后，我们就要考虑如何将这些被整理好的数据展示出来了，实际上我们使用一个ProgressBar来展示即可，但考虑到展示的美观性和光线强弱变化的动画交互，我们决定自定义一个类似于太阳花的自定义控件来展示数据。并且这个自定义控件具有同ProgressBar类似的属性，比如max（最大值）、progress（当前值）等等。<br>有了明确的想法之后，开始开发：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mqt.solarprogressview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.animation.Animator;</span><br><span class="line"><span class="keyword">import</span> android.animation.ObjectAnimator;</span><br><span class="line"><span class="keyword">import</span> android.animation.ValueAnimator;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.ColorInt;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.FloatRange;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.IntRange;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.AnimationSet;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.DecelerateInterpolator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolarView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor = Color.RED;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMax = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPregress = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mLolarScale;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLightRadius;</span><br><span class="line">    <span class="keyword">private</span> ObjectAnimator mScaleAnim;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLightRadiusAnim;</span><br><span class="line">    <span class="keyword">private</span> ObjectAnimator mColorAnim;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SolarView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init(<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SolarView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SolarView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        init(attrs, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Load attributes</span></span><br><span class="line">        <span class="keyword">final</span> TypedArray a = getContext().obtainStyledAttributes(</span><br><span class="line">                attrs, R.styleable.SolarView, defStyle, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        mColor = a.getColor(R.styleable.SolarView_color, Color.RED);</span><br><span class="line">        mMax = a.getInt(R.styleable.SolarView_max, <span class="number">9</span>);</span><br><span class="line">        mPregress = a.getInt(R.styleable.SolarView_pregress, <span class="number">0</span>);</span><br><span class="line">        mLolarScale = a.getFloat(R.styleable.SolarView_solarScale, <span class="number">0.25F</span>);</span><br><span class="line">        mLightRadius = a.getDimensionPixelSize(R.styleable.SolarView_lightRadius, <span class="number">10</span>);</span><br><span class="line">        mLightRadiusAnim = mLightRadius;</span><br><span class="line">        a.recycle();</span><br><span class="line">        initPaint();</span><br><span class="line">        initAnim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initAnim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mScaleAnim = ObjectAnimator</span><br><span class="line">                .ofInt(<span class="keyword">this</span>, <span class="string">"mLightRadiusAnim"</span>, mLightRadius / <span class="number">2</span>, mLightRadius, mLightRadius * <span class="number">2</span>, mLightRadius);</span><br><span class="line">        mScaleAnim.setDuration(<span class="number">1200</span>);<span class="comment">//设置动画时间</span></span><br><span class="line">        mScaleAnim.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());<span class="comment">//设置动画插入器，减速</span></span><br><span class="line">        mScaleAnim.setRepeatCount(<span class="number">0</span>);<span class="comment">//设置动画重复次数，这里-1代表无限</span></span><br><span class="line">        mScaleAnim.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> value = (<span class="keyword">int</span>) animation.getAnimatedValue();</span><br><span class="line">                mLightRadiusAnim = value;</span><br><span class="line">                postInvalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        mColorAnim = ObjectAnimator</span><br><span class="line">                .ofArgb(<span class="keyword">this</span>, <span class="string">"mColor"</span>, mColor, Color.rgb(<span class="number">250</span>, <span class="number">128</span>, <span class="number">10</span>), mColor);</span><br><span class="line">        mColorAnim.setDuration(<span class="number">1200</span>);<span class="comment">//设置动画时间</span></span><br><span class="line">        mColorAnim.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());<span class="comment">//设置动画插入器，减速</span></span><br><span class="line">        mColorAnim.setRepeatCount(<span class="number">0</span>);<span class="comment">//设置动画重复次数，这里-1代表无限</span></span><br><span class="line">        mColorAnim.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> value = (<span class="keyword">int</span>) animation.getAnimatedValue();</span><br><span class="line">                mColor = value;</span><br><span class="line">                postInvalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">radumColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Color.rgb((<span class="keyword">int</span>) (Math.random() * <span class="number">255</span>), (<span class="keyword">int</span>) (Math.random() * <span class="number">255</span>), (<span class="keyword">int</span>) (Math.random() * <span class="number">255</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Paint mPaint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPaint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setColor(mColor);</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">//实心圆，直径为控件的最小宽高的一半</span></span><br><span class="line">        <span class="keyword">int</span> min = Math.min(getWidth(), getHeight());</span><br><span class="line">        <span class="keyword">float</span> r = min * mLolarScale;</span><br><span class="line">        mPaint.setColor(mColor);</span><br><span class="line">        canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, r, mPaint);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mMax &amp;&amp; i &lt; mPregress; i++) &#123;</span><br><span class="line">            canvas.save();</span><br><span class="line">            canvas.rotate((<span class="number">360f</span> / mMax) * i, getWidth() &gt;&gt; <span class="number">1</span>, getHeight() &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == mPregress - <span class="number">1</span>) &#123;</span><br><span class="line">                canvas.drawCircle(getWidth() &gt;&gt; <span class="number">1</span>, getHeight() &gt;&gt; <span class="number">3</span>, mLightRadiusAnim, mPaint);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                canvas.drawCircle(getWidth() &gt;&gt; <span class="number">1</span>, getHeight() &gt;&gt; <span class="number">3</span>, mLightRadius, mPaint);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.restore();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> minw = getPaddingLeft() + getPaddingRight() + getSuggestedMinimumWidth();</span><br><span class="line">        <span class="keyword">int</span> w = resolveSizeAndState(minw, widthMeasureSpec, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> minh = getPaddingLeft() + getPaddingRight() + getSuggestedMinimumWidth();</span><br><span class="line">        <span class="keyword">int</span> h = resolveSizeAndState(minh, heightMeasureSpec, <span class="number">0</span>);</span><br><span class="line">        setMeasuredDimension(w, h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mColor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(@ColorInt <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mColor = color;</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMax;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMax</span><span class="params">(@IntRange(from = <span class="number">0</span>)</span> <span class="keyword">int</span> max) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mMax = max;</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPregress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPregress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPregress</span><span class="params">(@IntRange(from = <span class="number">0</span>)</span> <span class="keyword">int</span> pregress) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pregress &gt; <span class="keyword">this</span>.mPregress) &#123;</span><br><span class="line">            mColorAnim.cancel();</span><br><span class="line">            mColorAnim.start();</span><br><span class="line">            mScaleAnim.cancel();</span><br><span class="line">            mScaleAnim.start();<span class="comment">//启动动画</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.mPregress = pregress;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getLolarScale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mLolarScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLolarScale</span><span class="params">(@FloatRange(from = <span class="number">0</span>, to = <span class="number">1</span>)</span> <span class="keyword">float</span> lolarScale) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mLolarScale = lolarScale;</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLightRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mLightRadius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLightRadius</span><span class="params">(@IntRange(from = <span class="number">0</span>)</span> <span class="keyword">int</span> lightRadius) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mLightRadius = lightRadius;</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义属性XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"SolarView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"pregress"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"solarScale"</span> <span class="attr">format</span>=<span class="string">"float"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"lightRadius"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="光线数据源-–-gt-UI展示需要数据的转化-数据梯度设置"><a href="#光线数据源-–-gt-UI展示需要数据的转化-数据梯度设置" class="headerlink" title="光线数据源 –&gt; UI展示需要数据的转化: 数据梯度设置"></a>光线数据源 –&gt; UI展示需要数据的转化: 数据梯度设置</h3><p>在我们获取到传感器给出的光照强度数据源后，我们无法直接使用，因为光线给出的数据与UI展示需要的数据不同，因此我们需要下转化，直接在传感器监听中添加代码即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SensorEventListener listener = <span class="keyword">new</span> SensorEventListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSensorChanged</span><span class="params">(SensorEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">float</span> intensity = event.values[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">int</span> size = (<span class="keyword">int</span>) ((intensity * sv_light.getMax() / <span class="number">120</span>));</span><br><span class="line">            sv_light.setPregress(size);</span><br><span class="line">            textView.setText(</span><br><span class="line">                    <span class="string">"\naccuracy : "</span> + event.accuracy</span><br><span class="line">                            + <span class="string">"\ntimestamp : "</span> + event.timestamp</span><br><span class="line">                            + <span class="string">"\nvalues : "</span> + Arrays.toString(event.values)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAccuracyChanged</span><span class="params">(Sensor sensor, <span class="keyword">int</span> accuracy)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="其他动画效果的实现-光线强度增加的过度动画"><a href="#其他动画效果的实现-光线强度增加的过度动画" class="headerlink" title="其他动画效果的实现:光线强度增加的过度动画"></a>其他动画效果的实现:光线强度增加的过度动画</h3><p>光线传感器数据获取完成了，用于UI展示的自定义控件也写好了，数据也匹配好了可以正常展示了，但我们可能还不会满足，我们可能还希望给这个自定义控件在传感器数据发生变化的时候，有一个动画出来。这个动画其实在上面粘贴的代码中已经有了，这里只是介绍一下给这个自定义view添加动画的思路：<br>我们知道自定义view的所有的视图都是在onDraw(Canvas canvas)方法中用Canvas画出来的，而化成什么样子又是其中的各种参数控制的，例如我们在自定义控件中画一个圆，我们只需要动态的改变这个圆的半径，就能达到这个圆的放大缩小的目的，当我们有规律的并且足够频繁改变这个值，就可以达到平滑的动态效果了。例如实现控件中控件随progress的变化颜色渐变：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mColorAnim = ObjectAnimator</span><br><span class="line">              .ofArgb(<span class="keyword">this</span>, <span class="string">"mColor"</span>, mColor, Color.rgb(<span class="number">250</span>, <span class="number">128</span>, <span class="number">10</span>), mColor);</span><br><span class="line">      mColorAnim.setDuration(<span class="number">1200</span>);<span class="comment">//设置动画时间</span></span><br><span class="line">      mColorAnim.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());<span class="comment">//设置动画插入器，减速</span></span><br><span class="line">      mColorAnim.setRepeatCount(<span class="number">0</span>);<span class="comment">//设置动画重复次数，这里-1代表无限</span></span><br><span class="line">      mColorAnim.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">int</span> value = (<span class="keyword">int</span>) animation.getAnimatedValue();</span><br><span class="line">              mColor = value;</span><br><span class="line">              postInvalidate();<span class="comment">//重新绘制控件</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>

<p>这样，我们的自定义感光器控件的“感光”、“数据展示”和一切其他的动画效果，就达成了，干杯！！</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 截取手机屏幕两种实现方案解析</title>
    <url>/2017/07/07/Android-%E6%88%AA%E5%8F%96%E6%89%8B%E6%9C%BA%E5%B1%8F%E5%B9%95%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>最近在开发的过程中，遇到了一个需要截取屏幕保存为图片的需求，具体为截取webview的视图保存图片。</p>
<a id="more"></a>

<hr>
<p><strong>方法1：</strong>  首先想到的思路是利用SDK提供的View.getDrawingCache()方法：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printScreen</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">      String imgPath = <span class="string">"/sdcard/test.png"</span>;</span><br><span class="line">      view.setDrawingCacheEnabled(<span class="keyword">true</span>);</span><br><span class="line">      view.buildDrawingCache();</span><br><span class="line">      Bitmap bitmap = view.getDrawingCache();</span><br><span class="line">      <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              FileOutputStream out = <span class="keyword">new</span> FileOutputStream(imgPath);</span><br><span class="line">              bitmap.compress(Bitmap.CompressFormat.PNG, <span class="number">100</span>,</span><br><span class="line">                      out);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这个方法在很多情况下都是没有问题的，比如说截取imageview，TextView，甚至otherview.getRootView();都没问题，但在WebView上就会出现webview的部分截取完缺少页面里的一些内容的情况，比如说用webview打开这个（<a href="https://miqt.github.io/jellyfish/）界面，截取的图片就会有问题，具体表现为网页中游动的水母没有显示在截取的图片上。">https://miqt.github.io/jellyfish/）界面，截取的图片就会有问题，具体表现为网页中游动的水母没有显示在截取的图片上。</a></p>
<hr>
<p><strong>方法2：</strong>  使用Android系统提供的服务Context.MEDIA_PROJECTION_SERVICE，进行截图操作。</p>
<p>Demo源码:<a href="https://github.com/miqt/CapWindow(欢迎star！)" target="_blank" rel="noopener">https://github.com/miqt/CapWindow(欢迎star！)</a></p>
<p>关键部分代码解析：↓</p>
<p>发送截图请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> MediaProjectionManager projectionManager = (MediaProjectionManager)</span><br><span class="line">               getSystemService(Context.MEDIA_PROJECTION_SERVICE);</span><br><span class="line">Intent intent = projectionManager.createScreenCaptureIntent();</span><br><span class="line">startActivityForResult(intent, REQUEST_CODE);</span><br></pre></td></tr></table></figure>

<p>接收返回的结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">       handleScreenShotIntent(resultCode, data);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleScreenShotIntent</span><span class="params">(<span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       onScreenshotTaskBegan();</span><br><span class="line">       <span class="keyword">final</span> MediaProjectionManager projectionManager = (MediaProjectionManager)</span><br><span class="line">               getSystemService(Context.MEDIA_PROJECTION_SERVICE);</span><br><span class="line">       <span class="keyword">final</span> MediaProjection mProjection = projectionManager.getMediaProjection(resultCode, data);</span><br><span class="line">       Point size = Utils.getScreenSize(<span class="keyword">this</span>);</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> mWidth = size.x;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> mHeight = size.y;</span><br><span class="line">       <span class="keyword">final</span> ImageReader mImageReader = ImageReader.newInstance(mWidth, mHeight, PixelFormat</span><br><span class="line">               .RGBA_8888, <span class="number">2</span>);</span><br><span class="line">       <span class="keyword">final</span> VirtualDisplay display = mProjection.createVirtualDisplay(<span class="string">"screen-mirror"</span>, mWidth,</span><br><span class="line">               mHeight, DisplayMetrics.DENSITY_MEDIUM,</span><br><span class="line">               DisplayManager.VIRTUAL_DISPLAY_FLAG_PRESENTATION, mImageReader.getSurface(),</span><br><span class="line">               <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">       mImageReader.setOnImageAvailableListener(<span class="keyword">new</span> ImageReader.OnImageAvailableListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onImageAvailable</span><span class="params">(ImageReader mImageReader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">               Image image = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   image = mImageReader.acquireLatestImage();</span><br><span class="line">                   <span class="keyword">if</span> (image != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">final</span> Image.Plane[] planes = image.getPlanes();</span><br><span class="line">                       <span class="keyword">if</span> (planes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                           <span class="keyword">final</span> ByteBuffer buffer = planes[<span class="number">0</span>].getBuffer();</span><br><span class="line">                           <span class="keyword">int</span> pixelStride = planes[<span class="number">0</span>].getPixelStride();</span><br><span class="line">                           <span class="keyword">int</span> rowStride = planes[<span class="number">0</span>].getRowStride();</span><br><span class="line">                           <span class="keyword">int</span> rowPadding = rowStride - pixelStride * mWidth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                           <span class="comment">// create bitmap</span></span><br><span class="line">                           Bitmap bmp = Bitmap.createBitmap(mWidth + rowPadding / pixelStride,</span><br><span class="line">                                   mHeight, Bitmap.Config.ARGB_8888);</span><br><span class="line">                           bmp.copyPixelsFromBuffer(buffer);</span><br><span class="line"></span><br><span class="line">                           Bitmap croppedBitmap = Bitmap.createBitmap(bmp, <span class="number">0</span>, <span class="number">0</span>, mWidth, mHeight);</span><br><span class="line"></span><br><span class="line">                           saveBitmap(croppedBitmap);<span class="comment">//保存图片</span></span><br><span class="line"></span><br><span class="line">                           <span class="keyword">if</span> (croppedBitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                               croppedBitmap.recycle();</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">if</span> (bmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                               bmp.recycle();</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (image != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       image.close();</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (mImageReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       mImageReader.close();</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (display != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       display.release();</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   mImageReader.setOnImageAvailableListener(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                   mProjection.stop();</span><br><span class="line"></span><br><span class="line">                   onScreenshotTaskOver();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, getBackgroundHandler());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这个方法类似使用手机的系统截屏（音量下键+电源键），能够完美的吧当前原模原样的屏幕截取下来，并且修改保存方法的话甚至可以屏幕录像，但相比于第一种方法，它的缺点是完全和界面上的view没有关系，并且在调用这个服务的时候，会弹出一个权限确认的弹框。另外需要注意，这一方法只能在Android 5.0的系统设备上适用。</p>
<p><strong>总结：</strong></p>
<p>总而言之，这两种方法各有利弊，使用的时候要根据自己的实际需求做出选择。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 解决WebView支持WebGL的兼容性问题</title>
    <url>/2017/08/09/Android-%E8%A7%A3%E5%86%B3WebView%E6%94%AF%E6%8C%81WebGL%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近在开发的时候发现，虽然是同样使用的Android API中的WebView加载网页,但是对于不同的机型有的手机上并不能支持WebGL，理论上来说Android从5.0开始默认支持WebGL，原来Chromium对运行GPUs不稳定的或者有兼容性问题的设备会禁用WebGL。而且在Android平台可以通过安装Chorme浏览器访问chrome://gpu，找到reset notification strategy这一配置项确实是否关闭WebGL支持，如果值为0x8252则支持WebGL,如果值为0x0000则设备在黑名单中。</p>
<a id="more"></a>
<p>或许到这里我们会认为原来这是硬件的原因，没法解决，然而事情并没有这么愉快的结束o(￣ヘ￣o#)</p>
<p>当我在一些不支持的设备上下载完Google Chrome尝试着他是不是能打开的时候，答案是，它打开了，也就是说，原因并不能全部归咎于硬件，这与Android自带的浏览器的内核也是有关系的。</p>
<p>于是在网上开始找解决方法，找到了两种解决方法：</p>
<p>A.通过crosswalk,添加配置项xwalk –ignore-gpu-blacklist实现<br>crosswalk官网网站：<a href="https://crosswalk-project.org/" target="_blank" rel="noopener">https://crosswalk-project.org/</a><br>配置见Canvas and WebGL support，网址：<a href="https://crosswalk-project.org/documentation/about/faq.html，然而看了一会还是懵了。而且我按照它说的配置好打完包发现APK竟多了40多M。" target="_blank" rel="noopener">https://crosswalk-project.org/documentation/about/faq.html，然而看了一会还是懵了。而且我按照它说的配置好打完包发现APK竟多了40多M。</a></p>
<p>B.TBS（腾讯浏览服务）X5内核，网址：<a href="http://x5.tencent.com/，看到之后当场先把Demo下下来试一下，果然可以。感谢腾讯X5内核让我度过了这个难关。" target="_blank" rel="noopener">http://x5.tencent.com/，看到之后当场先把Demo下下来试一下，果然可以。感谢腾讯X5内核让我度过了这个难关。</a><br>另外下一篇博客会介绍怎么在Android Studio中使用X5浏览器SDK，并且让一个第三方库可以直接在.\app\build.gradle中以</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'URL'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>的方式使用的方法，地址：<a href="http://blog.csdn.net/qq_27512671/article/details/53056882" target="_blank" rel="noopener">http://blog.csdn.net/qq_27512671/article/details/53056882</a></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android从java-&gt;kotlin，感受kotlin的神奇之处</title>
    <url>/2017/09/05/Android%E4%BB%8Ejava-kotlin%EF%BC%8C%E6%84%9F%E5%8F%97kotlin%E7%9A%84%E7%A5%9E%E5%A5%87%E4%B9%8B%E5%A4%84/</url>
    <content><![CDATA[<p>一个获得指定文件夹下所有根级文件的例子<br>最原始代码</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> files = Environment.getExternalStoragePublicDirectory(</span><br><span class="line">				Environment.DIRECTORY_DCIM).listFiles(filter)</span><br><span class="line"><span class="keyword">object</span> filter : FileFilter &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">accept</span><span class="params">(pathname: <span class="type">File</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pathname.isFile</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>简化后的代码</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> files = Environment.getExternalStoragePublicDirectory(</span><br><span class="line">				Environment.DIRECTORY_DCIM).listFiles(filter)</span><br><span class="line"><span class="keyword">object</span> filter : FileFilter &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">accept</span><span class="params">(pathname: <span class="type">File</span>)</span></span>: <span class="built_in">Boolean</span> = pathname.isFile</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次简化，同样的几行代码精简之后就成了这样，神奇呀:expressionless:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> files = Environment.getExternalStoragePublicDirectory(</span><br><span class="line">				Environment.DIRECTORY_DCIM).listFiles &#123;</span><br><span class="line">					pathname -&gt; pathname.isFile</span><br><span class="line">				&#125;</span><br></pre></td></tr></table></figure>
<p>还有kotlin for循环编译数组检查满足某个条件就执行某段语句，根据之前Java的思路是这么写的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (i in mDevList) &#123;</span><br><span class="line">		if (i.ip !&#x3D; devInfo.ip) &#123;</span><br><span class="line">				addDivList(devInfo)</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然而kotlin的话直接这样写就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mDevList.filter &#123; it.ip !&#x3D; devInfo.ip &#125;</span><br><span class="line">        .forEach &#123; addDivList(devInfo) &#125;</span><br></pre></td></tr></table></figure>

<p>新项目直接上了kotlin进行Android开发，两周下来感觉kotlin写起来比Java优美不少，并且代码量有明显的降低，一些数据操作的简化写法也十分方便，更多其他的地方还有待挖掘，另外开发之前我是一点没看kotlin，纯粹是边开发边看kotlin文档，之所以敢这样，主要还是还发现Android studio还有这个功能–&gt;Java代码转化kotlin代码</p>
<p><img src="/blogimgs/javatokotlin.png" alt="java代码转化kotlin代码"></p>
<p>遇到地方不知道kotlin代码怎么写了怎么办，直接用Java写一遍，一转换就成kotlin代码了，而且运行完全没有问题:joy:，所以果断直接上kotlin开发吧。</p>
<p>还有许多地方大家自己上手来体会吧。</p>
]]></content>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android使用Gson解析json时候的泛类型丢失问题</title>
    <url>/2017/05/07/Android%E4%BD%BF%E7%94%A8Gson%E8%A7%A3%E6%9E%90json%E6%97%B6%E5%80%99%E7%9A%84%E6%B3%9B%E7%B1%BB%E5%9E%8B%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>原来的会丢失的错误代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RootEntity&lt;List&lt;TagData&gt;&gt; entity;</span><br><span class="line">              entity = <span class="keyword">new</span> Gson().fromJson(result, RootEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>改正为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RootEntity&lt;List&lt;TagData&gt;&gt; entity;</span><br><span class="line">            entity = <span class="keyword">new</span> Gson().fromJson(result, <span class="keyword">new</span> TypeToken&lt;RootEntity&lt;List&lt;TagData&gt;&gt;&gt;() &#123;</span><br><span class="line">            &#125;.getType());</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android的主线程为什么不会因为Looper.loop()里面的死循环卡死？</title>
    <url>/2018/10/16/Android%E4%B8%AD%E7%9A%84%E4%B8%BB%E7%BA%BF%E7%A8%8B%E9%97%AE%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BC%9A%E5%9B%A0%E4%B8%BALooper-loop-%E9%87%8C%E9%9D%A2%E7%9A%84%E6%AD%BB%E5%BE%AA%E7%8E%AF%E5%8D%A1%E6%AD%BB%EF%BC%9F/</url>
    <content><![CDATA[<p>这个问题的答案来自：<a href="https://www.zhihu.com/question/34652589/answer/90344494" target="_blank" rel="noopener">https://www.zhihu.com/question/34652589/answer/90344494</a></p>
<p>一下是按照我自己的理解做的一个记录。   </p>
<p>显而易见，在我们提出这个问题的时候，我们知道安卓主线程（又叫UI线程）在应用程序启动ActivityThread的时候，就依次调用<br>Looper.prepareMainLooper(); Looper.loop();了，实际上跟我们在工作线程中使用Looper.prepare();Looper.loop();</p>
<a id="more"></a>
<p>ActivityThread main函数源码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"ActivityThreadMain"</span>);</span><br><span class="line">    SamplingProfilerIntegration.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></span><br><span class="line">    <span class="comment">// disable it here, but selectively enable it later (via</span></span><br><span class="line">    <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></span><br><span class="line">    CloseGuard.setEnabled(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    Environment.initForCurrentUser();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the reporter for event logging in libcore</span></span><br><span class="line">    EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></span><br><span class="line">    <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</span><br><span class="line">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</span><br><span class="line"></span><br><span class="line">    Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</span><br><span class="line"></span><br><span class="line">    Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line">    thread.attach(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sMainThreadHandler = thread.getHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">        Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line">                LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    Looper.loop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那就神奇了，Looper.loop()里面是个死循环啊，既然主线程在这里就进入了死循环了那后面的android生命周期还怎么运行？</p>
<p>android中的主线程确实不会因为looper.loop()里面的死循环卡死，线程本质上只是一段可执行的代码，而这串代码结束之后，线程的生命也就结束了，而android中的Looper.loop()的作用正是为了不让主线程终止，从而一直运行，而它的方式正是启动一个死循环。     </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">    Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Message msg = queue.next();</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么在进入死循环之后，又是怎么去处理诸如点击，滑动，这些事务的呢？</p>
<p>那就是通过启动一个新的线程来处理的：</p>
<p>事实上，在ActivityThread main函数中，thread.attach(false);这一行就是启动了一个新线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ....</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Looper和MessageQueue对象，用于处理主线程的消息</span></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ActivityThread对象</span></span><br><span class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立Binder通道 (创建新线程)</span></span><br><span class="line">        thread.attach(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Looper.loop(); <span class="comment">//消息循环运行</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>但我看ActivityThread没有继承Thread啊，他不是个线程啊，，这个地方还不明白，先做笔记。。等看明白了回来补。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android冷门知识。读写图片Exif信息,用到了JHeader jar包</title>
    <url>/2016/04/06/Android%E5%86%B7%E9%97%A8%E7%9F%A5%E8%AF%86%E3%80%82%E8%AF%BB%E5%86%99%E5%9B%BE%E7%89%87Exif%E4%BF%A1%E6%81%AF-%E7%94%A8%E5%88%B0%E4%BA%86JHeader-jar%E5%8C%85/</url>
    <content><![CDATA[<p>首先，Exif信息是什么？<br>也不废话，百度百科说的很清楚：<br><a href="http://baike.baidu.com/link?url=q7uOXmyvU-3HUGt_FwL7MWGJ_sFWj6qo0HQeCV-mC0F5cYeexpIyAEwAlfkgqp-IjDn2D5oepItgW_dXj3N0OK" target="_blank" rel="noopener">http://baike.baidu.com/link?url=q7uOXmyvU-3HUGt_FwL7MWGJ_sFWj6qo0HQeCV-mC0F5cYeexpIyAEwAlfkgqp-IjDn2D5oepItgW_dXj3N0OK</a><br>我的理解呢Exif信息就是照片被拍摄的时候相机的焦距，物距，曝光值等信息，这信息或许对于我们浏览照片不重要，但要是电脑的一些软件要识别这些照片的时候可能就有要求了，比如，Smart3D三维建模的时候就是对Exif信息是由要求的，没Exif信息生成不了模型。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveRxif</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException, JpegFormatException </span>&#123;</span><br><span class="line">          <span class="comment">//在这里将信息写入图片</span></span><br><span class="line">          JpegHeaders jpegHeaders = <span class="keyword">null</span>;</span><br><span class="line">          jpegHeaders = <span class="keyword">new</span> JpegHeaders(file);</span><br><span class="line">          jpegHeaders.convertToExif();</span><br><span class="line">          App1Header app1Header = jpegHeaders.getApp1Header();</span><br><span class="line">          <span class="comment">//遍历tags 可以得到图片的所有信息</span></span><br><span class="line">         <span class="comment">//SortedMap tags = app1Header.getTags();</span></span><br><span class="line">          <span class="comment">// 修改EXIF的拍照日期</span></span><br><span class="line">          SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy:MM:dd hh:mm:ss"</span>);</span><br><span class="line">          Date curData = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">          String time = format.format(curData);</span><br><span class="line">          app1Header.setValue(App1Header.Tag.DATETIMEORIGINAL, time);<span class="comment">//拍摄日期</span></span><br><span class="line">          app1Header.setValue(App1Header.Tag.MAKE, Build.MANUFACTURER + <span class="string">""</span>);<span class="comment">//制造商</span></span><br><span class="line">          app1Header.setValue(App1Header.Tag.MODEL, Build.MODEL + <span class="string">""</span>);<span class="comment">//手机型号</span></span><br><span class="line">          app1Header.setValue(App1Header.Tag.FNUMBER, <span class="string">"4/2"</span>);<span class="comment">//光圈值</span></span><br><span class="line">          app1Header.setValue(App1Header.Tag.ISOSPEEDRATINGS, <span class="string">"1"</span>);<span class="comment">//ISO速度</span></span><br><span class="line">          app1Header.setValue(App1Header.Tag.FLASH, <span class="string">"0"</span>);<span class="comment">//闪光灯模式 0-没有使用闪光</span></span><br><span class="line">          app1Header.setValue(App1Header.Tag.FOCALLENGTH, <span class="string">"26/1"</span>);<span class="comment">//焦距</span></span><br><span class="line">          jpegHeaders.save(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>我看网上写入Exif信息有好多种方法，其中一个就是，使用Android 自带的API中的ExifInterface类可以用来写入Exif信息，但如果你这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String filename = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + File.separator + <span class="string">"img.jpeg"</span>;</span><br><span class="line"> ExifInterface exifInterface = <span class="keyword">new</span> ExifInterface(filename);</span><br><span class="line">        <span class="comment">//时间</span></span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">       exifInterface.setAttribute(ExifInterface.TAG_DATETIME, dateFormat.format(System.currentTimeMillis()));</span><br><span class="line">       <span class="comment">//焦距</span></span><br><span class="line">        exifInterface.setAttribute(ExifInterface.TAG_FOCAL_LENGTH, <span class="string">"fd"</span>);</span><br><span class="line">       <span class="comment">//闪光灯</span></span><br><span class="line">       exifInterface.setAttribute(ExifInterface.TAG_FLASH, <span class="string">"关闭（强制）"</span>);</span><br><span class="line">        exifInterface.saveAttributes();</span><br></pre></td></tr></table></figure>
<p>其实除了时间和手机生产商等信息其他的都是写不进去的，因为像一些焦距等的值对输入的格式都是有要求的，而setAttribute（）方法坑就坑在第二个参数都是String类型，不同的数据的格式我们根本不知道怎么填转换这个类也没有给出提示，因此这个方法行不通。</p>
<p>用第一种方法是可以的.<br>用到的jar包自取：<a href="http://download.csdn.net/detail/qq_27512671/9482556" target="_blank" rel="noopener">http://download.csdn.net/detail/qq_27512671/9482556</a></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android多进程同步自定义SharedPreferences实现相关总结</title>
    <url>/2019/09/07/Android%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E8%87%AA%E5%AE%9A%E4%B9%89SharedPreferences%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Android多进程同步相关总结"><a href="#Android多进程同步相关总结" class="headerlink" title="Android多进程同步相关总结"></a>Android多进程同步相关总结</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>由于app可能有多个进程，因此在某些场景下，就要进程间相互同步状态，避免多个进程各做各的，但数据不同步，导致产生异常。</p>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>目前认为 Android 平台目前有这样几个方案：</p>
<ol>
<li>使用微信MMKV，微信开源的MMKV是支持多进程同步的，开发app的话推荐使用，不过对于开发SDK避免使用第三方代码的原则，不推荐用。</li>
<li>使用ContentProvider 包裹 Sp ,其他进程使用的时候，通过ContentProvider来访问Sp，可以实现多进程数据同步，不好的就是需要额外注册组件。目前很多都是用这种方式。</li>
<li>使用广播，可以实现状态同步，不过即时性较差，不能毫秒级同步，安全方面也会一些问题存在，另外一个就是，一对多同步的时候还好，但多对多同步的时候还是不能保证，同样也需要额外注册组件。</li>
<li>socket，类似广播，需要每个进程都维护一个套接字服务，同样有着多对多同步难和数据安全的问题。</li>
<li>使用文件+文件锁，文件用来存数据，文件锁用来保证每次只有一个进程在访问这个文件，通过这样保证数据的同步。</li>
</ol>
<h3 id="尝试实现"><a href="#尝试实现" class="headerlink" title="尝试实现"></a>尝试实现</h3><p>综合看来，广播方案是最容易的，不过它存在多对多无法同步的问题，而文件锁方案是可以满足多对多的，数据安全基于文件。socket方案pass，同样无法解决多对多的问题。</p>
<p>因此使用文件锁方式：</p>
<p>下面是实现过程：</p>
<a id="more"></a>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>内存映射文件。</p>
<p>内存：<br>HashMap&lt;String,Object&gt; value;<br>int mid;（标识版本号）  </p>
<p>文件：<br>前4字节：mid（存mid）<br>后面所有字节（存value）  </p>
<p>0-4字节（mid）<br>    - 读：共享锁<br>    - 写：独占锁</p>
<p>4-end字节<br>    - 读：共享锁<br>    - 写：独占锁</p>
<p>内存map 转换 文件的方式: map - json - 文件</p>
<h4 id="写数据过程"><a href="#写数据过程" class="headerlink" title="写数据过程"></a>写数据过程</h4><p>写数据过程首先保证同一个文件，只有一个进程在写，使用FileLock实现这一点：</p>
<p>写数据的过程保证没有进程在读,也没有进程在写.因此获得独占锁,伪代码.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取 0 - end 位置的独占锁</span><br><span class="line">内存mid&#x3D;mid+1</span><br><span class="line">写入mid到文件的 0 - 4 位置</span><br><span class="line">内存map -&gt; file 写入 5 - end 位置</span><br><span class="line">释放 0 - end 位置的独占锁</span><br></pre></td></tr></table></figure>

<h4 id="读数据过程"><a href="#读数据过程" class="headerlink" title="读数据过程"></a>读数据过程</h4><p>读数据过程要保证现在没有进程在写，我就可以读数据了，而读数据和读数据直接是不需要互斥的，因此，读数据的时候，获取共享锁。</p>
<p>伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取0-4位置共享锁</span><br><span class="line"></span><br><span class="line">读取mid</span><br><span class="line"></span><br><span class="line">if(mid!&#x3D;当前内存mid)&#123;</span><br><span class="line">	获取5-end共享锁</span><br><span class="line">	同步 file - &gt; map</span><br><span class="line">	释放5-end共享锁</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回数值</span><br><span class="line"></span><br><span class="line">释放0-4位置共享锁</span><br></pre></td></tr></table></figure>


<h4 id="待优化"><a href="#待优化" class="headerlink" title="待优化"></a>待优化</h4><p>map - json - file 转换的时候目前是整个替换,性能这块随着存储的数据增多转换处理的数据也将会增多,这块还需要优化.</p>
<p>多线程这块由于是有文件锁保护,因此是安全的,但如果在非多进程访问的时候,这块性能是很低的.</p>
<h3 id="2019年9月20日19-41-28补充"><a href="#2019年9月20日19-41-28补充" class="headerlink" title="2019年9月20日19:41:28补充"></a>2019年9月20日19:41:28补充</h3><p>由于之前map - json - file 转换的时候目前是整个替换,随着数据的增大,读写速度将显著提升,因此从这一块做了优化.方法为根据数据的大小,给文件分成多块.每个分块文件都比较小,满足了映射文件读写效率的问题,同时每个分块文件单独持有一个锁,不互斥,提升性能</p>
<h3 id="以下是自定义SharedPreferences源代码-2019年9月20日19-44-17"><a href="#以下是自定义SharedPreferences源代码-2019年9月20日19-44-17" class="headerlink" title="以下是自定义SharedPreferences源代码(2019年9月20日19:44:17)"></a>以下是自定义SharedPreferences源代码(2019年9月20日19:44:17)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.analysys.track.utils.sp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.HandlerThread;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONException;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileLock;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copyright</span> 2019 analysys Inc. All rights reserved.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 进程安全的SharedPreferences，通过文件锁保证读写同步</span></span><br><span class="line"><span class="comment"> * 注意:</span></span><br><span class="line"><span class="comment"> * 1. 要使进程同步务必写入数据的时候使用commit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span>: 2019-09-07 10:43:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: miqt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mail</span>: miqingtang@analysys.com.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SysnKV</span> <span class="keyword">implements</span> <span class="title">SharedPreferences</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEF_NAME = <span class="string">"sysn_kv"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX = <span class="string">".skv"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 200kb</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 分块存储文件最大值,超过这个值就加一块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_BLOCK_SIZE = <span class="number">1024</span> * <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"def_sysnkv"</span>;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Block&gt; mBlockList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Editor&gt; mEditorQueue;</span><br><span class="line">    <span class="keyword">private</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysnKV</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, DEF_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysnKV</span><span class="params">(Context context, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        mBlockList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">                String path = getBlockFile(context, name, i);</span><br><span class="line">                File blockFile = <span class="keyword">new</span> File(path);</span><br><span class="line">                <span class="keyword">if</span> (blockFile.exists() &amp;&amp; blockFile.isFile()) &#123;</span><br><span class="line">                    Block block = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    block = <span class="keyword">new</span> Block(blockFile);</span><br><span class="line">                    mBlockList.add(block);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mBlockList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                String path = getBlockFile(context, name, mBlockList.size());</span><br><span class="line">                Block block = <span class="keyword">new</span> Block(<span class="keyword">new</span> File(path));</span><br><span class="line">                mBlockList.add(block);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mEditorQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"SysnKV"</span>);</span><br><span class="line">            thread.start();</span><br><span class="line">            mHandler = <span class="keyword">new</span> Handler(thread.getLooper(), <span class="keyword">new</span> Work());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getBlockFile</span><span class="params">(Context context, String name, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String dir = context.getFilesDir().getAbsolutePath()</span><br><span class="line">                .concat(File.separator);</span><br><span class="line">        <span class="keyword">return</span> dir.concat(name).concat(String.valueOf(num)).concat(name.indexOf(<span class="string">'.'</span>) != -<span class="number">1</span> ? <span class="string">""</span> : SUFFIX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, ?&gt; getAll() &#123;</span><br><span class="line">        Map&lt;String, Object&gt; mValue = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Block block : mBlockList) &#123;</span><br><span class="line">            mValue.putAll(block.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key, String defValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Block block : mBlockList) &#123;</span><br><span class="line">                String o = (String) block.getValue().get(key);</span><br><span class="line">                <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getStringSet</span><span class="params">(String key, Set&lt;String&gt; defValues)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Block block : mBlockList) &#123;</span><br><span class="line">                Set&lt;String&gt; o = (Set&lt;String&gt;) block.getValue().get(key);</span><br><span class="line">                <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String key, <span class="keyword">int</span> defValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Block block : mBlockList) &#123;</span><br><span class="line">                Map value = block.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value.containsKey(key)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="keyword">int</span>) value.get(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">(String key, <span class="keyword">long</span> defValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Block block : mBlockList) &#123;</span><br><span class="line">                Map value = block.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value.containsKey(key)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="keyword">long</span>) value.get(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getFloat</span><span class="params">(String key, <span class="keyword">float</span> defValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Block block : mBlockList) &#123;</span><br><span class="line">                Map value = block.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value.containsKey(key)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="keyword">float</span>) value.get(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String key, <span class="keyword">boolean</span> defValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Block block : mBlockList) &#123;</span><br><span class="line">                Map value = block.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value.containsKey(key)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="keyword">boolean</span>) value.get(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Block block : mBlockList) &#123;</span><br><span class="line">            Object o = block.getValue().get(key);</span><br><span class="line">            <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Editor <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EditorImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerOnSharedPreferenceChangeListener</span><span class="params">(OnSharedPreferenceChangeListener listener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterOnSharedPreferenceChangeListener</span><span class="params">(OnSharedPreferenceChangeListener listener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EditorImpl</span> <span class="keyword">implements</span> <span class="title">Editor</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; addMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; deleteKey = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> isClear;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Editor <span class="title">putString</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">            addMap.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Editor <span class="title">putStringSet</span><span class="params">(String key, Set&lt;String&gt; values)</span> </span>&#123;</span><br><span class="line">            addMap.put(key, values);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Editor <span class="title">putInt</span><span class="params">(String key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            addMap.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Editor <span class="title">putLong</span><span class="params">(String key, <span class="keyword">long</span> value)</span> </span>&#123;</span><br><span class="line">            addMap.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Editor <span class="title">putFloat</span><span class="params">(String key, <span class="keyword">float</span> value)</span> </span>&#123;</span><br><span class="line">            addMap.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Editor <span class="title">putBoolean</span><span class="params">(String key, <span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">            addMap.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Editor <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">            deleteKey.add(key);</span><br><span class="line">            addMap.remove(key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Editor <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            isClear = <span class="keyword">true</span>;</span><br><span class="line">            deleteKey.clear();</span><br><span class="line">            addMap.clear();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mBlockList.size(); i++) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> isMdf = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                    Block block = mBlockList.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (isClear) &#123;</span><br><span class="line">                        block.getValue().clear();</span><br><span class="line">                        isMdf = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">for</span> (String key : deleteKey) &#123;</span><br><span class="line">                            block.sync();</span><br><span class="line">                            Object value = block.getValue().remove(key);</span><br><span class="line">                            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                deleteKey.remove(key);</span><br><span class="line">                                isMdf = <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (block.getSize() &gt; MAX_BLOCK_SIZE) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!addMap.isEmpty() &amp;&amp; block.getSize() &lt; MAX_BLOCK_SIZE) &#123;</span><br><span class="line">                        block.getValue().putAll(addMap);</span><br><span class="line">                        addMap.clear();</span><br><span class="line">                        isMdf = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (isMdf) &#123;</span><br><span class="line">                        block.write();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!addMap.isEmpty()) &#123;</span><br><span class="line">                    String path = getBlockFile(context, name, mBlockList.size());</span><br><span class="line">                    Block block = <span class="keyword">new</span> Block(<span class="keyword">new</span> File(path));</span><br><span class="line">                    mBlockList.add(block);</span><br><span class="line">                    block.getValue().putAll(addMap);</span><br><span class="line">                    block.write();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            SysnKV.<span class="keyword">this</span>.mEditorQueue.add(<span class="keyword">this</span>);</span><br><span class="line">            Message.obtain(SysnKV.<span class="keyword">this</span>.mHandler, Work.WHAT_APPLY, SysnKV.<span class="keyword">this</span>.mEditorQueue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, Object&gt; value;</span><br><span class="line">        <span class="keyword">private</span> File mFile;</span><br><span class="line">        <span class="comment">//版本id</span></span><br><span class="line">        <span class="keyword">private</span> Integer mId;</span><br><span class="line">        <span class="keyword">private</span> RandomAccessFile mAccessFile;</span><br><span class="line">        <span class="keyword">private</span> FileChannel mChannel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.mFile = file;</span><br><span class="line">            <span class="keyword">if</span> (!mFile.exists() || !mFile.isFile()) &#123;</span><br><span class="line">                mFile.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            value = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sync();</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mFile.length();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> doMap2File();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ByteBuffer buffer = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//读mid</span></span><br><span class="line">                FileLock lock = lock(<span class="number">0</span>, <span class="number">4</span>, <span class="keyword">true</span>);</span><br><span class="line">                buffer = ByteBuffer.allocate(<span class="number">4</span>);</span><br><span class="line">                <span class="keyword">int</span> size = mChannel.read(buffer, <span class="number">0</span>);</span><br><span class="line">                unLock(lock);</span><br><span class="line">                <span class="keyword">if</span> (size == <span class="number">4</span>) &#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="comment">//比较mid</span></span><br><span class="line">                    <span class="keyword">int</span> mid = buffer.getInt();</span><br><span class="line">                    <span class="comment">//当前mid为空，没同步过，同步，mid不一致，同步</span></span><br><span class="line">                    <span class="keyword">if</span> (Block.<span class="keyword">this</span>.mId == <span class="keyword">null</span> || Block.<span class="keyword">this</span>.mId != mid) &#123;</span><br><span class="line">                        doFile2Map();</span><br><span class="line">                        <span class="comment">//同步完成，更新mid</span></span><br><span class="line">                        Block.<span class="keyword">this</span>.mId = mid;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> FileLock <span class="title">lock</span><span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> size, <span class="keyword">boolean</span> shared)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mAccessFile == <span class="keyword">null</span> || mChannel == <span class="keyword">null</span> || !mChannel.isOpen()) &#123;</span><br><span class="line">                    mAccessFile = <span class="keyword">new</span> RandomAccessFile(mFile, <span class="string">"rw"</span>);</span><br><span class="line">                    mChannel = mAccessFile.getChannel();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mChannel != <span class="keyword">null</span> &amp;&amp; mChannel.isOpen()) &#123;</span><br><span class="line">                    size = Math.min(size, mAccessFile.length());</span><br><span class="line">                    <span class="keyword">return</span> mChannel.lock(position, size, shared);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">(FileLock lock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                lock = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                mChannel = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mAccessFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mAccessFile.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                mAccessFile = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doFile2Map</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            FileLock lock = lock(<span class="number">5</span>, Long.MAX_VALUE, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//前4位是mid,跳过</span></span><br><span class="line">                mChannel.position(<span class="number">4</span>);</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate((<span class="keyword">int</span>) (mChannel.size() - <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> len = mChannel.read(buffer);</span><br><span class="line">                <span class="keyword">if</span> (len == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                buffer.flip();</span><br><span class="line">                JSONObject object = <span class="keyword">new</span> JSONObject(Charset.forName(<span class="string">"utf-8"</span>).decode(buffer).toString());</span><br><span class="line">                value.clear();</span><br><span class="line">                <span class="keyword">for</span> (Iterator&lt;String&gt; it = object.keys(); it.hasNext(); ) &#123;</span><br><span class="line">                    String k = it.next();</span><br><span class="line">                    value.put(k, object.get(k));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            unLock(lock);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doMap2File</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">            FileLock lock = lock(<span class="number">0</span>, Long.MAX_VALUE, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JSONObject object = <span class="keyword">new</span> JSONObject(value);</span><br><span class="line">                <span class="keyword">byte</span>[] bt = object.toString(<span class="number">0</span>).getBytes(Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">                ByteBuffer buf = ByteBuffer.allocate(bt.length + <span class="number">4</span>);</span><br><span class="line">                <span class="keyword">if</span> (mId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mId = Integer.MIN_VALUE;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mId = (mId + <span class="number">1</span>) % (Integer.MAX_VALUE - <span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                buf.putInt(mId);</span><br><span class="line">                buf.put(bt);</span><br><span class="line">                buf.flip();</span><br><span class="line">                <span class="comment">//前4位是mid</span></span><br><span class="line">                mChannel.position(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">while</span> (buf.hasRemaining()) &#123;</span><br><span class="line">                    mChannel.write(buf);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//删除后面的文件</span></span><br><span class="line">                mChannel.truncate(<span class="number">4</span> + bt.length);</span><br><span class="line">                mChannel.force(<span class="keyword">true</span>);</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            unLock(lock);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Work</span> <span class="keyword">implements</span> <span class="title">Handler</span>.<span class="title">Callback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> WHAT_APPLY = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> WHAT_INIT_SYSN = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> WHAT_APPLY:</span><br><span class="line">                    Queue&lt;Editor&gt; queue = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (msg.obj <span class="keyword">instanceof</span> Queue) &#123;</span><br><span class="line">                        queue = (Queue&lt;Editor&gt;) msg.obj;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                        Editor editor = queue.poll();</span><br><span class="line">                        editor.commit();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WHAT_INIT_SYSN:</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="测试时间记录"><a href="#测试时间记录" class="headerlink" title="测试时间记录"></a>测试时间记录</h3><p>14个进程并发</p>
<p>读写数据140次 耗时 2.40s 平均每次读写 16ms</p>
]]></content>
  </entry>
  <entry>
    <title>Android如何让你的第三方库可以compile的形式被使用</title>
    <url>/2017/11/07/Android%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%8F%AF%E4%BB%A5compile%E7%9A%84%E5%BD%A2%E5%BC%8F%E8%A2%AB%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>我们在开发Android或者后台程序的时候有时候会用到一些jar包和第三方框架等工具来节省我们的开发时间，之前使用eclipse的时候使用第三方框架通常是把jar包.so文件等等统统拷贝过来，后来换了Android studio的时候发现有另一种途径了，比如我使用目前一个比较火的框架xUtils3，它有控件注解，数据库访问，网络访问等一些非常方便的功能，让我们在开发的过程中不需要去“造轮子”而节省很多时间。而它的使用方法就是：</p>
<a id="more"></a>
<p><img src="http://img.blog.csdn.net/20161106190804071" alt="这里写图片描述"></p>
<p>显然在网络畅通的情况下使用compile的方式引入第三方库是比较方便的。因为只需要Ctrl+V 一行代码就够了。<br>那么，如果我自己有一个第三方库（比如圆形ImageView，咳咳），那该怎么让别人以这种方式使用呢？</p>
<p>下面我就来介绍一下方法：</p>
<p>第一步：首先你的第三方库应该是一个”is Library”的项目。在Android Studio的project视图中选中项目根本目录右键new-&gt;module</p>
<p><img src="http://img.blog.csdn.net/20161106193213951" alt="这里写图片描述"></p>
<p>选择第二个next然后起个名字finish，这样你的项目中就多出来了一个module</p>
<p><img src="http://img.blog.csdn.net/20161106193855429" alt="这里写图片描述"></p>
<p>然后把各种东西放进这个module编译确认后准备工作这个第三方库的准备工作就完成了。</p>
<p>第二步：用git新建一个tag，这就是你的第三方库的第一个版本了，我的叫v1.0，然后在github上面建个空项目，并把这个项目push到github上面。比如我的：<a href="https://github.com/MiQt/X5WebView" target="_blank" rel="noopener">https://github.com/MiQt/X5WebView</a>  </p>
<p>第三步：打开<a href="https://jitpack.io" target="_blank" rel="noopener">https://jitpack.io</a>，用你的github账号登录，登录后他会显示你所有的项目，选中刚刚创建的那个项目，点击get it就ok了  </p>
<p><img src="http://img.blog.csdn.net/20161106224337914" alt="这里写图片描述"></p>
<p>你也可以将这一部分放到你github的README.md里面供别人查看。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>AtomicInteger简介</title>
    <url>/2016/08/09/AtomicInteger%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>AtomicInteger，一个提供原子操作的Integer的类。在Java语言中，++i和i++操作并不是线程安全的，在使用的时候，不可避免的会用到synchronized关键字。而AtomicInteger则通过一种线程安全的加减操作接口。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android安装apk文件，适配Android 7.0</title>
    <url>/2017/10/07/Android%E5%AE%89%E8%A3%85apk%E6%96%87%E4%BB%B6%EF%BC%8C%E9%80%82%E9%85%8DAndroid-7-0/</url>
    <content><![CDATA[<p>首先在AndroidManifest.xml文件，activity同级节点注册provider：</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:authorities</span>=<span class="string">"$&#123;applicationId&#125;.file_provider"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--more-->
<p>将apk文件下载到此路径：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String cachePath = (</span><br><span class="line">                      getExternalFilesDir(<span class="string">"upgrade_apk"</span>) +</span><br><span class="line">                              File.separator +</span><br><span class="line">                              getPackageName() +</span><br><span class="line">                              <span class="string">".apk"</span>);</span><br></pre></td></tr></table></figure>

<p>在res目录xml文件夹下创建名为file_paths的文件：upgrade_apk代表上面保存路径的文件夹名称，可随意更改，相同即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-files-path</span> <span class="attr">name</span>=<span class="string">"bga_upgrade_apk"</span> <span class="attr">path</span>=<span class="string">"upgrade_apk"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后编写代码，区分不同Android系统版本号，安装apk（注意：【com.apkinstall.demo】要替换自己应用的包名）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 安装 apk 文件</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * <span class="doctag">@param</span> apkFile</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installApk</span><span class="params">(File apkFile)</span> </span>&#123;</span><br><span class="line">             Intent installApkIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">             installApkIntent.setAction(Intent.ACTION_VIEW);</span><br><span class="line">             installApkIntent.addCategory(Intent.CATEGORY_DEFAULT);</span><br><span class="line">             installApkIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.M) &#123;</span><br><span class="line">                 installApkIntent.setDataAndType(FileProvider.getUriForFile(getApplicationContext(), <span class="string">"com.apkinstall.demo.file_provider"</span>, apkFile), <span class="string">"application/vnd.android.package-archive"</span>);</span><br><span class="line">                 installApkIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 installApkIntent.setDataAndType(Uri.fromFile(apkFile), <span class="string">"application/vnd.android.package-archive"</span>);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (getPackageManager().queryIntentActivities(installApkIntent, <span class="number">0</span>).size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                 startActivity(installApkIntent);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android是如何鉴权的</title>
    <url>/2019/11/21/Android%E6%98%AF%E5%A6%82%E4%BD%95%E9%89%B4%E6%9D%83%E7%9A%84/</url>
    <content><![CDATA[<p>卫生部负责 出发点</p>
<p>场景:辅助功能UsageStatsManager,安卓的这个功能可以获取Android的用量信息,但他需要用户手动去开启权限才可以获取.现在我们就分析下,Android 是如何鉴别我们的app 有没有这个权限的.</p>
<p>uid判断逻辑在这里<br><a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/usage/java/com/android/server/usage/UsageStatsService.java" target="_blank" rel="noopener">http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/usage/java/com/android/server/usage/UsageStatsService.java</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">            @Override</span><br><span class="line">1297        public UsageEvents queryEvents(long beginTime, long endTime, String callingPackage) &#123;</span><br><span class="line">1298            if (!hasPermission(callingPackage)) &#123;</span><br><span class="line">1299                return null;</span><br><span class="line">1300            &#125;</span><br><span class="line">1301</span><br><span class="line">1302            final int userId &#x3D; UserHandle.getCallingUserId();</span><br><span class="line">1303            final long token &#x3D; Binder.clearCallingIdentity();</span><br><span class="line">1304            try &#123;</span><br><span class="line">1305                return UsageStatsService.this.queryEvents(userId, beginTime, endTime);</span><br><span class="line">1306            &#125; finally &#123;</span><br><span class="line">1307                Binder.restoreCallingIdentity(token);</span><br><span class="line">1308            &#125;</span><br><span class="line">1309        &#125;</span><br></pre></td></tr></table></figure>

<p>Android 所有的鉴权最终处理类在这里:</p>
<p><a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/app/ActivityManagerNative.java" target="_blank" rel="noopener">http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/android/app/ActivityManagerNative.java</a></p>
<p>判断通过之后,具体查询数据库的逻辑在这里<br><a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/usage/java/com/android/server/usage/UsageStatsDatabase.java" target="_blank" rel="noopener">http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/usage/java/com/android/server/usage/UsageStatsDatabase.java</a></p>
<p>存储路径:<br>File systemDataDir = new File(Environment.getDataDirectory(), “system”);<br>mUsageStatsDir = new File(systemDataDir, “usagestats”);</p>
<p>这个数据库的管理类<br><a href="http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/usage/java/com/android/server/usage/UserUsageStatsService.java#87" target="_blank" rel="noopener">http://androidxref.com/7.1.1_r6/xref/frameworks/base/services/usage/java/com/android/server/usage/UserUsageStatsService.java#87</a></p>
]]></content>
  </entry>
  <entry>
    <title>Android自定义控件实现手机摆放位置的校准</title>
    <url>/2016/08/07/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E6%91%86%E6%94%BE%E4%BD%8D%E7%BD%AE%E7%9A%84%E6%A0%A1%E5%87%86%EF%BC%882016-04-11-10-17%EF%BC%89/</url>
    <content><![CDATA[<p>先上效果</p>
<a id="more"></a>
<p><img src="http://img.blog.csdn.net/20160411093631222" alt="当手机的摆放位置合适时"><br><img src="http://img.blog.csdn.net/20160411093834674" alt="往左偏移"><br><img src="http://img.blog.csdn.net/20160411093931221" alt="往上偏移"></p>
<p>最近做的项目中的拍照模块要求拍照的时候手机是：<br>——竖直的<br>——面朝上的<br>——与地面的夹角为75°<br>基本上这个自定义控件就做了这样的一件事，如果手机的摆放位置符合上述条件，则会如图一所示，该控件中间的小圆显示在正中心的位置，整个控件是绿色的。<br>而如果摆放位置不符合条件，不是竖直的，夹角偏大偏小等，就会如图二图三所示，控件会变成红色而且中间的小圆也会做出对应的偏移提示用户当前应该往哪移动手机。</p>
<p>好，明白了需求就可以开始动工了，首先我们来温习一下自定义控件的基本知识。<br>自定义控件的基本步骤：<br>①新建一个类继承View。<br>②自定义属性，一个完美的自定义控件也可以添加xml来配置属性和风格。 要实现这一点，可按照下列步骤来做：<br>1） 添加自定义属性<declare-styleable>到xml文件中<br>2） 在xml的<declare-styleable>中，指定属性的值<br>3） 在view中获取xml中的值<br>4） 将获取的值应用到view中<br>③重写onMeasure(), onLayout(), onDraw(),方法（当然，简单一点的自定义控件只需要重写这几个就够了）。<br>④自定义监听器，选择合适的时机触发。</p>
<p>而手机的摆放位置信息我们可以使用手机的重力传感器来获得，图一中的X=。。。y=。。。z=。。。就是从手机的重力传感器获得的数据。</p>
<p>自定义控件GuideView所有代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miser.sensordemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.hardware.Sensor;</span><br><span class="line"><span class="keyword">import</span> android.hardware.SensorEvent;</span><br><span class="line"><span class="keyword">import</span> android.hardware.SensorEventListener;</span><br><span class="line"><span class="keyword">import</span> android.hardware.SensorManager;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现手机通过重力感应校准位置的自定义控件</span></span><br><span class="line"><span class="comment"> * Created by Administrator on 2016/4/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuideView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"GuideView"</span>;</span><br><span class="line">    <span class="keyword">private</span> Sensor mSensor;</span><br><span class="line">    <span class="keyword">private</span> SensorManager mSensorManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mViewWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mViewHeight;</span><br><span class="line">    <span class="comment">//外面圆的线条宽度（px）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> strokeWidth = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//小圆圆心坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mChaildcy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mChaildcx;</span><br><span class="line">    <span class="comment">//里面圈圈的颜色，默认为红色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor = Color.RED;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GuideView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GuideView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//得到SensorManager对象</span></span><br><span class="line">        mSensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);</span><br><span class="line">        <span class="comment">//获得重力感应传感器实例</span></span><br><span class="line">        mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);</span><br><span class="line">        <span class="comment">//注册监听器</span></span><br><span class="line">        mSensorManager.registerListener(mSensorEventListener, mSensor, SensorManager.SENSOR_DELAY_UI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GuideView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        Log.d(TAG, <span class="string">"onMeasure"</span>);</span><br><span class="line">        mViewWidth = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        mViewHeight = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(mViewWidth, mViewHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">        Log.d(TAG, <span class="string">"onLayout"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        Log.d(TAG, <span class="string">"onDraw"</span>);</span><br><span class="line">        <span class="comment">//画外面的大圆-----------------</span></span><br><span class="line">        <span class="keyword">float</span> cx = mViewWidth / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">float</span> cy = mViewHeight / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">float</span> radio = (mViewWidth &gt; mViewHeight ? cx : cy) - strokeWidth;</span><br><span class="line">        Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        paint.setColor(mColor);</span><br><span class="line">        paint.setStrokeWidth(strokeWidth);</span><br><span class="line">        paint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        canvas.drawCircle(cx, cy, radio, paint);</span><br><span class="line">        <span class="comment">//----------------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//画里面的小圆-----------------</span></span><br><span class="line">        <span class="keyword">if</span> ((mChaildcx &gt; <span class="number">0</span> &amp;&amp; mChaildcx &lt; mViewWidth)</span><br><span class="line">                &amp;&amp; (mChaildcy &gt; <span class="number">0</span> &amp;&amp; mChaildcy &lt; mViewHeight)) &#123;</span><br><span class="line">            canvas.drawCircle(mChaildcx, mChaildcy, radio / <span class="number">3</span>, paint);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//----------------------------</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">        Log.d(TAG, <span class="string">"onDetachedFromWindow"</span>);</span><br><span class="line">        <span class="comment">//取消重力感应的监听</span></span><br><span class="line">        mSensorManager.unregisterListener(mSensorEventListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重力感应的监听器，可用来实时得到手机当前的位置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SensorEventListener mSensorEventListener = <span class="keyword">new</span> SensorEventListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSensorChanged</span><span class="params">(SensorEvent sensorEvent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">float</span> x = sensorEvent.values[SensorManager.DATA_X];</span><br><span class="line">            <span class="keyword">float</span> y = sensorEvent.values[SensorManager.DATA_Y];</span><br><span class="line">            <span class="keyword">float</span> z = sensorEvent.values[SensorManager.DATA_Z];</span><br><span class="line">            mChaildcx = mViewWidth / <span class="number">2</span> - x * mViewWidth / <span class="number">20</span>;</span><br><span class="line">            <span class="keyword">if</span> (z &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                mChaildcy = mViewHeight / <span class="number">2</span> + ((y - <span class="number">8.3333f</span>) * mViewHeight / <span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mChaildcy = mViewHeight / <span class="number">2</span> - (z * mViewHeight / <span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt; -<span class="number">1</span> &amp;&amp; x &lt; <span class="number">1</span>)<span class="comment">//手机竖屏度在合适范围内</span></span><br><span class="line">                    &amp;&amp; (y &gt; <span class="number">7.3F</span> &amp;&amp; y &lt; <span class="number">9.3</span>)<span class="comment">//倾斜15°范围内</span></span><br><span class="line">                    &amp;&amp; (z &gt; <span class="number">0</span>)<span class="comment">//手机是面朝上的</span></span><br><span class="line">                    ) &#123;</span><br><span class="line">                mColor = Color.GREEN;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mColor = Color.RED;</span><br><span class="line">            &#125;</span><br><span class="line">            postInvalidate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAccuracyChanged</span><span class="params">(Sensor sensor, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有自定义控件的代码应该就可以了，这里就不上demo了，如有疑惑可私信或邮件  <a href="mailto:miqingtang@163.com">miqingtang@163.com</a>  </p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android Battery Historian 分析电池用量</title>
    <url>/2020/07/15/Historian%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="工具说明"><a href="#工具说明" class="headerlink" title="工具说明"></a>工具说明</h1><p>Battery Historian 是与 Batterystats 联合使用的google推出的用于分析耗电情况的工具。</p>
<p>Batterystats 是包含在 Android 框架中的一种工具，用于收集设备上的电池数据。</p>
<p>您可以使用 adb 将收集的电池数据转储到开发机器，并生成可使用 Battery Historian 分析的报告。</p>
<p>Battery Historian 会将报告从 Batterystats 转换为可在浏览器中查看的 HTML 直观视图。</p>
<a id="more"></a>

<h1 id="适合的场景"><a href="#适合的场景" class="headerlink" title="适合的场景"></a>适合的场景</h1><p>显示进程从什么位置以及通过何种方式消耗电池电量。</p>
<p>识别系统为了延长电池续航时间可能会延迟甚至移除应用中的哪些任务。</p>
<p>Battery Historian 可以显示应用是否具有以下行为：</p>
<ul>
<li>过于频繁地触发唤醒提醒（至少每 10 秒钟一次）。</li>
<li>持续保留 GPS 锁定。</li>
<li>至少每 30 秒调度一次作业。</li>
<li>至少每 30 秒调度一次同步。</li>
<li>使用手机无线装置的频率高于预期。</li>
</ul>
<h1 id="之前部署遇到的问题记录"><a href="#之前部署遇到的问题记录" class="headerlink" title="之前部署遇到的问题记录"></a>之前部署遇到的问题记录</h1><p><strong>1. 官方给到的 docker 镜像地址无法访问，可能需要翻墙。</strong></p>
<p>解决方法：参考 <a href="https://juejin.im/entry/5d61fc3ff265da038f4818a5" target="_blank" rel="noopener">https://juejin.im/entry/5d61fc3ff265da038f4818a5</a> 使用国内镜像源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --restart&#x3D;always -d -p 9999:9999 gcr.io&#x2F;android-battery-historian&#x2F;stable:3.0 --port 9999</span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --restart&#x3D;always -d -p 9999:9999 registry.cn-hangzhou.aliyuncs.com&#x2F;xyz10&#x2F;android-battery-historian:stable-3.0 --port 9999</span><br></pre></td></tr></table></figure>
<p><strong>2. docker 部署完成之后，无法访问，d3.js 找不到。</strong></p>
<p>解决方法：参考 <a href="https://github.com/google/battery-historian/issues/185" target="_blank" rel="noopener">https://github.com/google/battery-historian/issues/185</a> ， 更改相关js的代码路径。</p>
<p><strong>3. 1 - 2 都解决后，能访问，但无法传Batterystats分析文件上去，表现为上传无反应。</strong></p>
<p>解决方法：访问该网站的本机也要可以科学上网，就没问题了。</p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>使用步骤如下:</p>
<p>如需使用 Batterystats 从您的设备收集数据并在 Battery Historian 中打开该数据，请执行以下操作：</p>
<ol>
<li>连接机器 重置电池记录数据 adb shell dumpsys batterystats –reset</li>
<li>断开充电线，开始操作</li>
<li>使用原始数据生成报告。<ul>
<li>对于搭载 Android 7.0 及更高版本的设备：<br><code>adb bugreport &gt; [path/]bugreport.zip</code></li>
<li>对于搭载 Android 6.0 及更低版本的设备：<br><code>adb bugreport &gt; [path/]bugreport.txt</code></li>
</ul>
</li>
<li>数据上传 <a href="http://192.168.8.112:9999/" target="_blank" rel="noopener">http://192.168.8.112:9999/</a> submit 开始分析。</li>
</ol>
<p>以下文档可供参考：</p>
<ul>
<li><p>工具代码地址：<a href="https://github.com/google/battery-historian" target="_blank" rel="noopener">https://github.com/google/battery-historian</a></p>
</li>
<li><p>官方文档（需要科学上网）：<a href="https://developer.android.com/topic/performance/power/setup-battery-historian?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/topic/performance/power/setup-battery-historian?hl=zh-cn</a></p>
</li>
<li><p>相关耗电优化案例文章：<a href="https://tech.meituan.com/2018/03/11/dianping-shortvideo-battery-testcase.html" target="_blank" rel="noopener">https://tech.meituan.com/2018/03/11/dianping-shortvideo-battery-testcase.html</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Socket通信及TCP/UDP实现</title>
    <url>/2017/08/14/Java-Socket%E9%80%9A%E4%BF%A1%E5%8F%8ATCP-UDP%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p><img src="https://b-ssl.duitang.com/uploads/item/201508/20/20150820120422_KirfE.thumb.700_0.jpeg" alt="兔子变狐狸"><br>记得上一次接触socket这一块还是在大三抓耳挠腮的整毕设的时候，两年后的今天又用到了它，那就把Socket实现组播什么的做一个记录吧。</p>
<a id="more"></a>
<h3 id="TcpServer"><a href="#TcpServer" class="headerlink" title="TcpServer"></a>TcpServer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isruning = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">5583</span>);</span><br><span class="line">			<span class="keyword">while</span> (isruning) &#123;</span><br><span class="line">				<span class="comment">// 连接</span></span><br><span class="line">				Socket socket = serverSocket.accept();</span><br><span class="line">				System.out</span><br><span class="line">						.println(<span class="string">"有新客户端（"</span> + socket.getInetAddress() + <span class="string">"）连接。。"</span>);</span><br><span class="line">				OutputStream stream = socket.getOutputStream();</span><br><span class="line">				OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(stream);</span><br><span class="line">				writer.write(<span class="string">"hello socket!"</span>);</span><br><span class="line">				writer.flush();</span><br><span class="line">				writer.close();</span><br><span class="line">				System.out</span><br><span class="line">						.println(<span class="string">"客户端（"</span> + socket.getInetAddress() + <span class="string">"）会话结束。。"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			serverSocket.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TcpClient"><a href="#TcpClient" class="headerlink" title="TcpClient"></a>TcpClient</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String host = <span class="string">"localhost"</span>; <span class="comment">// 要连接的服务端IP地址</span></span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">5583</span>; <span class="comment">// 要连接的服务端对应的监听端口</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 与服务端建立连接</span></span><br><span class="line">			Socket client = <span class="keyword">new</span> Socket(host, port);</span><br><span class="line">			InputStream inputStream = client.getInputStream();</span><br><span class="line">			InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">			BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">			String message = bufferedReader.readLine();</span><br><span class="line">			System.out.println(message);</span><br><span class="line">			bufferedReader.close();</span><br><span class="line">			client.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UdpSend"><a href="#UdpSend" class="headerlink" title="UdpSend"></a>UdpSend</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpSend</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MulticastSocket socket;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			socket = <span class="keyword">new</span> MulticastSocket(<span class="number">8842</span>);</span><br><span class="line">			socket.setTimeToLive(<span class="number">1</span>);</span><br><span class="line">			InetAddress address = InetAddress.getByName(<span class="string">"233.0.0.0"</span>);</span><br><span class="line">			socket.joinGroup(address);</span><br><span class="line">			<span class="keyword">byte</span>[] buf = <span class="string">"hello world!"</span>.getBytes();</span><br><span class="line">			DatagramPacket p = <span class="keyword">new</span> DatagramPacket(buf, buf.length, address,</span><br><span class="line">					<span class="number">8842</span>);</span><br><span class="line">			socket.send(p);</span><br><span class="line">			System.out.println(<span class="string">"广播已经发出"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UdpReceive"><a href="#UdpReceive" class="headerlink" title="UdpReceive"></a>UdpReceive</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpReceive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MulticastSocket socket;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			socket = <span class="keyword">new</span> MulticastSocket(<span class="number">8842</span>);</span><br><span class="line">			socket.setTimeToLive(<span class="number">1</span>);</span><br><span class="line">			InetAddress address = InetAddress.getByName(<span class="string">"233.0.0.0"</span>);</span><br><span class="line">			socket.joinGroup(address);</span><br><span class="line">			<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3000</span>];</span><br><span class="line">			DatagramPacket p = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">			socket.receive(p);</span><br><span class="line">			System.out.println(<span class="string">"接受到"</span> + p.getAddress() + <span class="string">"的广播消息"</span></span><br><span class="line">					+ <span class="keyword">new</span> String(p.getData()));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpURLConnection 原生post请求get请求，文件上传下载</title>
    <url>/2014/08/17/HttpURLConnection-%E5%8E%9F%E7%94%9Fpost%E8%AF%B7%E6%B1%82get%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>get</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       String path = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line">       URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">       HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">       conn.setConnectTimeout(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">       conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">       InputStream inStream = conn.getInputStream();</span><br><span class="line">       <span class="keyword">byte</span>[] data = toByteArray(inStream);</span><br><span class="line">       String result = <span class="keyword">new</span> String(data, <span class="string">"UTF-8"</span>);</span><br><span class="line">       System.out.println(result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>  

<p>POST  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String encoding = <span class="string">"UTF-8"</span>;</span><br><span class="line">        <span class="comment">//post的form参数(json兼职对)</span></span><br><span class="line">        String params = <span class="string">"?hello=hello"</span>;</span><br><span class="line">        String path = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] data = params.getBytes(encoding);</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">        HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">        conn.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line">        conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-javascript; charset="</span> + encoding);</span><br><span class="line">        conn.setRequestProperty(<span class="string">"Content-Length"</span>, String.valueOf(data.length));</span><br><span class="line">        conn.setConnectTimeout(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">        OutputStream outStream = conn.getOutputStream();</span><br><span class="line">        outStream.write(data);</span><br><span class="line">        outStream.flush();</span><br><span class="line">        outStream.close();</span><br><span class="line">        System.out.println(conn.getResponseCode()); <span class="comment">// 响应代码 200表示成功</span></span><br><span class="line">        <span class="keyword">if</span> (conn.getResponseCode() == <span class="number">200</span>) &#123;</span><br><span class="line">            InputStream inStream = conn.getInputStream();</span><br><span class="line">            String result = <span class="keyword">new</span> String(toByteArray(inStream), <span class="string">"UTF-8"</span>);</span><br><span class="line">            System.out.println(result); <span class="comment">// 响应代码 200表示成功</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>上传代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java原生的API可用于发送HTTP请求，即java.net.URL、java.net.URLConnection，这些API很好用、很常用，</span></span><br><span class="line"><span class="comment"> * 但不够简便；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.通过统一资源定位器（java.net.URL）获取连接器（java.net.URLConnection） 2.设置请求的参数 3.发送请求</span></span><br><span class="line"><span class="comment"> * 4.以输入流的形式获取返回内容 5.关闭输入流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> H__D</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnectionUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多文件上传的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actionUrl：上传的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadFilePaths：需要上传的文件路径，数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"finally"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uploadFile</span><span class="params">(String actionUrl, String[] uploadFilePaths)</span> </span>&#123;</span><br><span class="line">        String end = <span class="string">"\r\n"</span>;</span><br><span class="line">        String twoHyphens = <span class="string">"--"</span>;</span><br><span class="line">        String boundary = <span class="string">"*****"</span>;</span><br><span class="line"></span><br><span class="line">        DataOutputStream ds = <span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        InputStreamReader inputStreamReader = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        StringBuffer resultBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String tempLine = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 统一资源</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(actionUrl);</span><br><span class="line">            <span class="comment">// 连接类的父类，抽象类</span></span><br><span class="line">            URLConnection urlConnection = url.openConnection();</span><br><span class="line">            <span class="comment">// http的连接类</span></span><br><span class="line">            HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置是否从httpUrlConnection读入，默认情况下是true;</span></span><br><span class="line">            httpURLConnection.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 设置是否向httpUrlConnection输出</span></span><br><span class="line">            httpURLConnection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// Post 请求不能使用缓存</span></span><br><span class="line">            httpURLConnection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 设定请求的方法，默认是GET</span></span><br><span class="line">            httpURLConnection.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line">            <span class="comment">// 设置字符编码连接参数</span></span><br><span class="line">            httpURLConnection.setRequestProperty(<span class="string">"Connection"</span>, <span class="string">"Keep-Alive"</span>);</span><br><span class="line">            <span class="comment">// 设置字符编码</span></span><br><span class="line">            httpURLConnection.setRequestProperty(<span class="string">"Charset"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">            <span class="comment">// 设置请求内容类型</span></span><br><span class="line">            httpURLConnection.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"multipart/form-data;boundary="</span> + boundary);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置DataOutputStream</span></span><br><span class="line">            ds = <span class="keyword">new</span> DataOutputStream(httpURLConnection.getOutputStream());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; uploadFilePaths.length; i++) &#123;</span><br><span class="line">                String uploadFile = uploadFilePaths[i];</span><br><span class="line">                String filename = uploadFile.substring(uploadFile.lastIndexOf(<span class="string">"//"</span>) + <span class="number">1</span>);</span><br><span class="line">                ds.writeBytes(twoHyphens + boundary + end);</span><br><span class="line">                ds.writeBytes(<span class="string">"Content-Disposition: form-data; "</span> + <span class="string">"name=\"file"</span> + i + <span class="string">"\";filename=\""</span> + filename</span><br><span class="line">                        + <span class="string">"\""</span> + end);</span><br><span class="line">                ds.writeBytes(end);</span><br><span class="line">                FileInputStream fStream = <span class="keyword">new</span> FileInputStream(uploadFile);</span><br><span class="line">                <span class="keyword">int</span> bufferSize = <span class="number">1024</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">                <span class="keyword">int</span> length = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((length = fStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    ds.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">                &#125;</span><br><span class="line">                ds.writeBytes(end);</span><br><span class="line">                <span class="comment">/* close streams */</span></span><br><span class="line">                fStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            ds.writeBytes(twoHyphens + boundary + twoHyphens + end);</span><br><span class="line">            <span class="comment">/* close streams */</span></span><br><span class="line">            ds.flush();</span><br><span class="line">            <span class="keyword">if</span> (httpURLConnection.getResponseCode() &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(</span><br><span class="line">                        <span class="string">"HTTP Request is not success, Response code is "</span> + httpURLConnection.getResponseCode());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (httpURLConnection.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">                inputStream = httpURLConnection.getInputStream();</span><br><span class="line">                inputStreamReader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">                reader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">                tempLine = <span class="keyword">null</span>;</span><br><span class="line">                resultBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                <span class="keyword">while</span> ((tempLine = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    resultBuffer.append(tempLine);</span><br><span class="line">                    resultBuffer.append(<span class="string">"\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ds != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ds.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (inputStreamReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStreamReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> resultBuffer.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传文件测试</span></span><br><span class="line">         String str = uploadFile(<span class="string">"http://127.0.0.1:8080/image/image.do"</span>,<span class="keyword">new</span> String[] &#123; <span class="string">"/Users//H__D/Desktop//1.png"</span>,<span class="string">"//Users/H__D/Desktop/2.png"</span> &#125;);</span><br><span class="line">         System.out.println(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下载代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java原生的API可用于发送HTTP请求，即java.net.URL、java.net.URLConnection，这些API很好用、很常用，</span></span><br><span class="line"><span class="comment"> * 但不够简便；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.通过统一资源定位器（java.net.URL）获取连接器（java.net.URLConnection） 2.设置请求的参数 3.发送请求</span></span><br><span class="line"><span class="comment"> * 4.以输入流的形式获取返回内容 5.关闭输入流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> H__D</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnectionUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlPath</span></span><br><span class="line"><span class="comment">     *            下载路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> downloadDir</span></span><br><span class="line"><span class="comment">     *            下载存放目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回下载文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">downloadFile</span><span class="params">(String urlPath, String downloadDir)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 统一资源</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(urlPath);</span><br><span class="line">            <span class="comment">// 连接类的父类，抽象类</span></span><br><span class="line">            URLConnection urlConnection = url.openConnection();</span><br><span class="line">            <span class="comment">// http的连接类</span></span><br><span class="line">            HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;</span><br><span class="line">            <span class="comment">// 设定请求的方法，默认是GET</span></span><br><span class="line">            httpURLConnection.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line">            <span class="comment">// 设置字符编码</span></span><br><span class="line">            httpURLConnection.setRequestProperty(<span class="string">"Charset"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">            <span class="comment">// 打开到此 URL 引用的资源的通信链接（如果尚未建立这样的连接）。</span></span><br><span class="line">            httpURLConnection.connect();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 文件大小</span></span><br><span class="line">            <span class="keyword">int</span> fileLength = httpURLConnection.getContentLength();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 文件名</span></span><br><span class="line">            String filePathUrl = httpURLConnection.getURL().getFile();</span><br><span class="line">            String fileFullName = filePathUrl.substring(filePathUrl.lastIndexOf(File.separatorChar) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"file length----&gt;"</span> + fileLength);</span><br><span class="line"></span><br><span class="line">            URLConnection con = url.openConnection();</span><br><span class="line"></span><br><span class="line">            BufferedInputStream bin = <span class="keyword">new</span> BufferedInputStream(httpURLConnection.getInputStream());</span><br><span class="line"></span><br><span class="line">            String path = downloadDir + File.separatorChar + fileFullName;</span><br><span class="line">            file = <span class="keyword">new</span> File(path);</span><br><span class="line">            <span class="keyword">if</span> (!file.getParentFile().exists()) &#123;</span><br><span class="line">                file.getParentFile().mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            OutputStream out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((size = bin.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                len += size;</span><br><span class="line">                out.write(buf, <span class="number">0</span>, size);</span><br><span class="line">                <span class="comment">// 打印下载百分比</span></span><br><span class="line">                <span class="comment">// System.out.println("下载了-------&gt; " + len * 100 / fileLength +</span></span><br><span class="line">                <span class="comment">// "%\n");</span></span><br><span class="line">            &#125;</span><br><span class="line">            bin.close();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> file;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下载文件测试</span></span><br><span class="line">        downloadFile(<span class="string">"http://localhost:8080/images/1467523487190.png"</span>, <span class="string">"/Users/H__D/Desktop"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Javah生成JNI头文件极简跳坑</title>
    <url>/2016/08/07/Javah%E7%94%9F%E6%88%90JNI%E5%A4%B4%E6%96%87%E4%BB%B6%E6%9E%81%E7%AE%80%E8%B7%B3%E5%9D%91/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">① Javac  helloword.java</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">② javah -classpath 包名文件夹路径 -d 头文件输出路径 -jni 包名.类名（不带.class）</span><br></pre></td></tr></table></figure>
<a id="more"></a>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-classpath &lt;路径&gt; 用于装入类的路径。注意是包名文件夹的路径，不是class的路径，如果没有包名的话就是class的路径。</span><br><span class="line">-d &lt;目录&gt; 输出目录</span><br><span class="line">-jni 生成 JNI样式的头文件（默认）</span><br></pre></td></tr></table></figure>

<p>如果报无法确定xxx.xxx.xxx的签名：<br>拿 无法确定android.graphics.Bitmap的签名 举例：<br><img src="http://img.blog.csdn.net/20170607171754423?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjc1MTI2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>没有找到Bitmap是因为Java没有Bitmap类，将对应的C:\Users\Administrator\AppData\Local\Android\Sdk\platforms\android-25\android.jar包添加到classpath即可，注意两个路径中间加分号。全部命令为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javah -classpath C:\Users\Administrator\AppData\Local\Android\Sdk\platforms\android-25\android.jar;E:\CMakeDemo2\app\build\intermediates\classes\debug -d E:\CMakeDemo2\app\src\main\cpp -jni com.mqt.cmakedemo2.BlurUtils</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>SDK热修复调研结果及实现</title>
    <url>/2019/09/29/SDK%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%B0%83%E7%A0%94%E7%BB%93%E6%9E%9C%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>对SDK实现热修复,在客户出问题或者面临新版本Android兼容性问题的时候,我们可以在用户不用动任何代码的情况下,实现对代码的更改,因此如果能实现一个稳定可用的热修复,同时对目前的项目影响不大的情况下,是非常有利的.</p>
<h2 id="需求梳理"><a href="#需求梳理" class="headerlink" title="需求梳理"></a>需求梳理</h2><p>下面是我通过对SDK的了解,梳理的一个需求,这个需求可能还比较片面,后续可以继续补充.  </p>
<p>热修复在实现以后,应该做到如下保证:</p>
<ol>
<li>保证原来的代码逻辑完全不变,并正常运行.</li>
<li>保证客户的对接方式,跟目前一致.</li>
<li>保证旧客户接入的SDK仍然可用,即,向后兼容</li>
<li>客户是需要知情SDK热修复能力的,因此对不信任热修复的客户,可以支持非热修复版本,并且,非热修复版本和有热修复版本调用方式,逻辑,都是一致的,代码也是重用的.</li>
</ol>
<a id="more"></a>
<h2 id="实现调研"><a href="#实现调研" class="headerlink" title="实现调研"></a>实现调研</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>调研了shadow 热修复框架的实现方式,shadow 号称无反射插件化框架,实际上作者也承认这个说法是不准确的,因为它至少有一处反射,那就是反射了Android ClassLoader的 private final 域的mParent,然后通过反射在原来的 BaseClassLoader 和 PathClassLoader 中间 插入了自定义的DexClassLoader,利用”被误导的”双亲委托机制,来实现了插件化.以下引用一下作者对这块分析的原文:</p>
<blockquote>
<p>Android系统的虚拟机和一般的JVM有一点不太一样，就是可以通过反射修改private final域。这在一般的JVM上是不能成功的，读过《Java编程思想》的同学可能还记得专门有这段讲解。而ClassLoader类的parent域，恰恰就是private final域。ClassLoader的parent指向的是ClassLoader的“双亲”，就是“双亲委派”中的那个“双亲”（现在去学习这个概念的同学注意这里的“双”是没有意义的，不存在两个“亲”）。宿主的PathClassLoader就是一个有正常“双亲委派”逻辑的ClassLoader，它加载任何类之前都会委托自己的parent先去加载这个类。如果parent能够加载到，自己就不会加载了。因此，我们可以通过修改ClassLoader的parent，为ClassLoader新增一个parent。将原本的BootClassLoader &lt;- PathClassLoader结构变为BootClassLoader &lt;- DexClassLoader &lt;- PathClassLoader，插入的DexClassLoader加载了ContainerActivity就可以使得系统在向PathClassLoader查找ContainerActivity时能够正确找到实现。<br>作者：shifujun<br>链接：<a href="https://juejin.im/post/5d1b466f6fb9a07ed524b995" target="_blank" rel="noopener">https://juejin.im/post/5d1b466f6fb9a07ed524b995</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 </p>
</blockquote>
<p>这里我其实还有个地方没明白,ClassLoader是有缓存的,如果有缓存,则直接返回,就不会继续往上访问mParent了,而Android 在开始运行时 ? 是一次把所有的类都加载进来了呢?还是运行到哪里就加载到哪里呢? 这还跟不同的虚拟机实现有关,java的虚拟机就是运行到哪里就加载到哪里,但Android的貌似不是这样,这一块我没有验证.</p>
<p>[已经验证]四大组件类是立即加载,其他类库是运行到哪里加载到哪里.</p>
<p>// *TODO:验证计划是这样的:拷贝BaseDexClassLoader 源码到项目中,然后运行Debug调试看看是怎么走的,还不确定这个验证行不行得通. *</p>
<p>不过不管Android class 是在启动的时候全部加载,还是运行中加载, 只要宿主app中没有,那么必定是用的时候再加载,因此可以先写一个壳子,然后这个壳子负责热修复包的更新和应用的管理.并判断是否可用,如果可用,则激活使用.</p>
<p>而热修复包就是现在项目完全不动,打一个jar包就可以了,并且这个项目可以单独不依赖于热修复壳子来使用.满足需求4,单独使用的目的.</p>
<h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>第二种方式自定义ClassLoader 并禁用双亲委托 ,通过反射创建对象并赋值给接口,因为java向上转型是安全的,而同类型转型是不安全的.<br>打个比方,AImpl实现了A的接口,AImpl.class 由两个不同的ClassLoader加载,则此时使用1号ClassLoader创建的 AImpl的对象无法转换为2号ClassLoader加载的AImpl.class,报出类转换异常.但不管哪个类加载器加载出来的AImpl.class,对A转型始终是安全的.</p>
<p>因此利用这个规则,我们可以实现一些A的子类并且加载,达到我们的目的</p>
<p>跟第一个方式一样,壳子和热修复包的设计,是一致的,只是壳子实现的方式不同.</p>
<h2 id="实现壳子"><a href="#实现壳子" class="headerlink" title="实现壳子"></a>实现壳子</h2><p>第一种方法反射最少,不会发生多类加载器交叉冲突的问题,侵入性最低,而且改动比较简单,分为以下步骤实现:</p>
<ol>
<li>实现Hack private final parent;</li>
<li>实现更新修复包逻辑</li>
<li>实现修复包应用逻辑</li>
<li>实现修复包卸载,替换,回滚等逻辑</li>
</ol>
<h3 id="实现Hack-private-final-parent"><a href="#实现Hack-private-final-parent" class="headerlink" title="实现Hack private final parent;"></a>实现Hack private final parent;</h3><p>hack的目的 是更改项目中原来的双亲委派结构.如下示意:</p>
<p>hack前:BootClassLoader-PathClassLoader<br>———————–↓————————<br>hack后:BootClassLoader-RuntimeClassLoader-PathClassLoader</p>
<p>其中,RuntimeClassLoader则是我们加载我们的热修复包,主要要用的.</p>
<p>代码:(一些片段来自开源shadow的一部分)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HackClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hackParentClassLoader</span><span class="params">(ClassLoader classLoader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              ClassLoader newParentClassLoader)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = getParentField();</span><br><span class="line">        <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"在ClassLoader.class中没找到类型为ClassLoader的parent域"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(classLoader, newParentClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安全地获取到ClassLoader类的parent域</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ClassLoader类的parent域.或不能通过反射访问该域时返回null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Field <span class="title">getParentField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassLoader classLoader = HackClassLoader<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        ClassLoader parent = classLoader.getParent();</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Field f : ClassLoader<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredFields</span>()) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> accessible = f.isAccessible();</span><br><span class="line">                f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                Object o = f.get(classLoader);</span><br><span class="line">                f.setAccessible(accessible);</span><br><span class="line">                <span class="keyword">if</span> (o == parent) &#123;</span><br><span class="line">                    field = f;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最终选用"><a href="#最终选用" class="headerlink" title="最终选用"></a>最终选用</h3><p>最终选用了第一种方式,第二种方式虽然有反射少的好处,但它更难控制,一旦hack就无法很好预知后面的加载情况了,而第一种方式是比较灵活的,我们只需反射部分入口方法即可.</p>
<p>假设一个SDK入口是A.class的a()方法,逻辑如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun a(var p1,var p2)&#123;</span><br><span class="line">    if(是宿主&amp;&amp;热修复文件存在,并没有损坏&amp;&amp;启用热修复)&#123;</span><br><span class="line">        反射调用热修复包中的A.class的a()方法,参数为p1,p2</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    正常走之前的逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="热修复包下发逻辑"><a href="#热修复包下发逻辑" class="headerlink" title="热修复包下发逻辑"></a>热修复包下发逻辑</h3><p>下发逻辑走的是策略下发的逻辑,相当于是策略的一部分,此外有一个单独的接口无参数每间隔一个小时请求一次,服务器下发 500 判断有 热修复包 ,则缓存到文件 , 下次启动app即启用</p>
<p><strong>场景:</strong> 宿主是A 先后下发了热修复包B和C,调用顺序是怎样的</p>
<p>没下发的时候: A 自己运行<br>下发了B:  A-&gt;B 运行<br>B后面又下发了C: A-C 运行 而不是A -&gt; B -&gt; C  运行</p>
<p><strong>场景:</strong> 宿主A 下发了B 但是后面不需要B的部分功能了 还是想运行 A</p>
<p>两种方法:</p>
<ol>
<li>策略下发不激活热修复(这个需要接口加参数,还没做)</li>
<li>修改策略热修复文件下发个空文件</li>
<li>代码回退到A,A打包,下发A</li>
</ol>
<p><strong>场景:</strong> 宿主A,下发了包B,但B包传错了,不知道传成什么文件了</p>
<p>下发下去之后,代码会尝试当做对的热修复包去加载,加载出错会判定热修复包损坏,走宿主A的逻辑</p>
<p><strong>场景:</strong> B包下发下去了,运行了一段时间了,后来各种原因,B包损坏了</p>
<p>同上个场景的处理逻辑</p>
<h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>可以通过以下步骤测试:</p>
<ol>
<li>代码切到hotfix分支.</li>
<li>打开 dev-sdk/build.gradle 文件,修改isHost为true(表示是宿主).</li>
<li>运行到手机.</li>
<li>各种改动代码,可以加功能,给不同的类文件加log打印日志等.</li>
<li>打开打开 dev-sdk/build.gradle 文件,修改isHost为false(表示是热修复包).</li>
<li>运行build.sh 打包SDK,拿到jar包.</li>
<li>运行dx –dex –output=输出文件名.dex 刚刚打的SDK.jar.</li>
<li>新建策略,填写sdkv等信息,上传.dex文件到策略热修复相关配置栏目,并发布.</li>
<li>打开第3步骤运行到的手机,杀死,启动,等20秒,杀死,启动.</li>
<li>查看改动是否生效.</li>
</ol>
<p>所有存在于SDK中的类,都是可以改的,其中入口类有一些限制,入口类不可以改动类名.包名,已有的类方法和参数类型,可以新增方法.不可以删除已有方法</p>
<p>以下是现在用到的入口类:</p>
<table>
<thead>
<tr>
<th>包名</th>
<th>类名</th>
<th>入口方法</th>
</tr>
</thead>
<tbody><tr>
<td>com.analysys.track.service</td>
<td>AnalysysAccessibilityService</td>
<td>所有</td>
</tr>
<tr>
<td>com.analysys.track.service</td>
<td>AnalysysJobService</td>
<td>所有</td>
</tr>
<tr>
<td>com.analysys.track.receiver</td>
<td>AnalysysReceiver</td>
<td>onRecerver()</td>
</tr>
<tr>
<td>com.analysys.track.service</td>
<td>AnalysysService</td>
<td>所有</td>
</tr>
<tr>
<td>com.analysys.track</td>
<td>AnalysysTracker</td>
<td>init() setDebug()</td>
</tr>
</tbody></table>
<p>日志过滤指南:  </p>
<p>查看修复是否启用 <code>ANALYSYSHOTFIX</code><br>查看策略下发进度 <code>HotFoxImpl</code>  </p>
]]></content>
  </entry>
  <entry>
    <title>SearchView去掉下划线（</title>
    <url>/2017/08/07/SearchView%E5%8E%BB%E6%8E%89%E4%B8%8B%E5%88%92%E7%BA%BF%EF%BC%88/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SearchView calSearchView = (SearchView) findViewById(R.id.sv_search_text);</span><br><span class="line">       <span class="keyword">if</span> (calSearchView != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;        <span class="comment">//--拿到字节码      </span></span><br><span class="line">               Class&lt;?&gt; argClass = calSearchView.getClass();</span><br><span class="line">               <span class="comment">//--指定某个私有属性,mSearchPlate是搜索框父布局的名字        </span></span><br><span class="line">               Field ownField = argClass.getDeclaredField(<span class="string">"mSearchPlate"</span>);</span><br><span class="line">               <span class="comment">//--暴力反射,只有暴力反射才能拿到私有属性       </span></span><br><span class="line">               ownField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">               View mView = (View) ownField.get(calSearchView);</span><br><span class="line">               <span class="comment">//--设置背景</span></span><br><span class="line">               mView.setBackgroundColor(Color.TRANSPARENT);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>adb-命令大全</title>
    <url>/2020/12/17/adb-help/</url>
    <content><![CDATA[<p>查看最上层成activity名字:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys activity | findstr &quot;mFocusedActivity&quot; </span><br><span class="line">adb shell dumpsys window w | findstr \&#x2F; | findstr name&#x3D;</span><br></pre></td></tr></table></figure>

<p>查看Activity的任务栈：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys activity activities</span><br></pre></td></tr></table></figure>

<p>显示所有的activities的信息,包括任务栈等:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys activity</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>查看Android应用包名package和入口activity名称 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aapt dump badging E:\apk\es3.apk</span><br></pre></td></tr></table></figure>

<p>显示accounts信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys account</span><br></pre></td></tr></table></figure>

<p>显示CPU信息 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys cpuinfo</span><br></pre></td></tr></table></figure>

<p>查看CPU使用信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell top -n 1 -d 0.5 | findstr proc_ id</span><br></pre></td></tr></table></figure>

<p>显示键盘，窗口和它们的关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys window</span><br></pre></td></tr></table></figure>

<p>当我们需要知道设备的分辨率时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys window displays</span><br></pre></td></tr></table></figure>

<p>查看UI绘制的各个层级信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys SurfaceFlinger</span><br></pre></td></tr></table></figure>

<p>显示wifi信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys wifi</span><br></pre></td></tr></table></figure>

<p>电量信息及CPU 使用时长</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys batteryinfo $package_name</span><br></pre></td></tr></table></figure>

<p>获取安装包信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys package packagename</span><br></pre></td></tr></table></figure>

<p>每个应用的启动次数和时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys usagestats</span><br></pre></td></tr></table></figure>

<p>显示状态栏相关的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys statusbar</span><br></pre></td></tr></table></figure>

<p>内存信息（meminfo package_name or pid 使用程序的包名或者进程id显示内存信息）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys meminfo</span><br><span class="line">得到com.teleca.robin.test进程使用的内存的信息    </span><br><span class="line">adb shell dumpsys meminfo com.teleca.robin.test</span><br></pre></td></tr></table></figure>

<p>磁盘相关信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys diskstats</span><br></pre></td></tr></table></figure>

<p>电池相关信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys battery</span><br></pre></td></tr></table></figure>

<p>显示Alarm信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys alarm</span><br></pre></td></tr></table></figure>

<p>统计系统耗电量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys batterystats</span><br></pre></td></tr></table></figure>

<p>设置线程的优先级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys activity|grep oom_adj</span><br></pre></td></tr></table></figure>

<p>强制关闭一个应用程序；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell am force-stop &lt;PACKAGE&gt;</span><br></pre></td></tr></table></figure>

<p>查看内存信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat proc&#x2F;meminfo</span><br></pre></td></tr></table></figure>

<p>指定进程内存地址映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat proc&#x2F;pid&#x2F;maps</span><br></pre></td></tr></table></figure>

<p>指定进程内存详细使用信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat proc&#x2F;pid&#x2F;smaps</span><br></pre></td></tr></table></figure>

<p>VSS. RSS. PSS. USS 信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell procrank</span><br></pre></td></tr></table></figure>

<p>指定进程VSS. RSS. PSS. USS 详细信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell procmem pid</span><br></pre></td></tr></table></figure>

<p>查看可输入的设备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell getevent -p</span><br></pre></td></tr></table></figure>

<p>获得特定设备的输入信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell getevent &#x2F;dev&#x2F;input&#x2F;event0</span><br></pre></td></tr></table></figure>

<p>点击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input tap x y</span><br></pre></td></tr></table></figure>

<p>发送按键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 82(keycode)</span><br></pre></td></tr></table></figure>

<p>输入文本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input text XXXX</span><br></pre></td></tr></table></figure>

<p>查看报名中包含mobileqq的进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell ps | findstr mobileqq</span><br></pre></td></tr></table></figure>

<p>远程进程ID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb jdwp</span><br></pre></td></tr></table></figure>

<p>获取序列号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb get-serialno</span><br></pre></td></tr></table></figure>

<p>重启到bootloader，即刷机模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>

<p>重启到recovery，即恢复模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb reboot recovery</span><br></pre></td></tr></table></figure>

<p>获取机器MAC地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell  cat &#x2F;sys&#x2F;class&#x2F;net&#x2F;wlan0&#x2F;address</span><br></pre></td></tr></table></figure>

<p>获取CPU序列号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat &#x2F;proc&#x2F;cpuinfo</span><br></pre></td></tr></table></figure>

<p>覆盖安装（保留数据和缓存文件，重新安装apk）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb install -r &lt;apkfile&gt;</span><br></pre></td></tr></table></figure>

<p>安装apk到sd卡</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb install -s &lt;apkfile&gt;</span><br></pre></td></tr></table></figure>

<p>卸载app但保留数据和缓存文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb uninstall -k &lt;package&gt;</span><br></pre></td></tr></table></figure>

<p>查看设备cpu和内存占用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell top</span><br></pre></td></tr></table></figure>

<p>查看占用内存前6的app</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell top -m 6</span><br></pre></td></tr></table></figure>

<p>刷新一次内存信息，然后返回</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell top -n 1</span><br></pre></td></tr></table></figure>

<p>查询各进程内存使用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell procrank</span><br></pre></td></tr></table></figure>

<p>查看指定进程状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell ps -x [PID]</span><br></pre></td></tr></table></figure>

<p>查看后台services信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell service list</span><br></pre></td></tr></table></figure>

<p>查看当前内存占用（该方式只能得出系统整个内存的大概使用情况） 车 如果你想查看所有进程的内存使用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell procrank</span><br></pre></td></tr></table></figure>

<p>查看IO内存分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat &#x2F;proc&#x2F;iomem</span><br></pre></td></tr></table></figure>

<p>查看wifi密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat &#x2F;data&#x2F;misc&#x2F;wifi&#x2F;*.conf</span><br></pre></td></tr></table></figure>

<p>清除log缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat -c</span><br></pre></td></tr></table></figure>

<p>查看设备信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat &#x2F;system&#x2F;build.prop</span><br></pre></td></tr></table></figure>

<p>跑monkey</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell monkey -v -p your.package.name 500</span><br></pre></td></tr></table></figure>

<p>列出目标设备上安装的所有app的包名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages</span><br></pre></td></tr></table></figure>

<p>截屏命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screencap -p &#x2F;sdcard&#x2F;screen.png</span><br><span class="line">adb pull &#x2F;sdcard&#x2F;screen.png</span><br><span class="line">adb shell rm &#x2F;sdcard&#x2F;screen.png</span><br></pre></td></tr></table></figure>

<p>录制手机屏幕,视频格式为mp4,存放到手机sd卡里，默认录制时间为180s：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screenrecord</span><br></pre></td></tr></table></figure>

<p>限制视频录制时间为10s,如果不限制,默认180s:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screenrecord  --time-limit 10 &#x2F;sdcard&#x2F;demo.mp4</span><br></pre></td></tr></table></figure>

<p>指定视频分辨率大小:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screenrecord --size 1280*720 &#x2F;sdcard&#x2F;demo.mp4</span><br></pre></td></tr></table></figure>

<p>指定视频的比特率:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screenrecord --bit-rate 6000000 &#x2F;sdcard&#x2F;demo.mp4</span><br></pre></td></tr></table></figure>

<p>在命令行显示log:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screenrecord --time-limit 10 --verbose &#x2F;sdcard&#x2F;demo.mp4</span><br></pre></td></tr></table></figure>

<p>设置、获取属性信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell getprop [key]</span><br><span class="line">adb shell setprop [key] [value]</span><br></pre></td></tr></table></figure>

<p>监听系统属性的变化，如果期间系统的属性发生变化则把变化的值显示出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell watchprops</span><br></pre></td></tr></table></figure>

<p>adb logcat 每一条日志消息都有一个标记和优先级与其关联。 （1）标记是一个简短的字符串，用于标识原始消息的来源 (例如”View” 来源于显示系统)。优先级是下面的字符，顺序是从低到高：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">V — 明细 (最低优先级)</span><br><span class="line">D — 调试</span><br><span class="line">I — 信息</span><br><span class="line">W — 警告</span><br><span class="line">E — 错误</span><br><span class="line">F — 严重错误</span><br><span class="line">S — 无记载 (最高优先级，没有什么会被记载)</span><br></pre></td></tr></table></figure>

<p>查看过滤日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat ActivityManager:I *:S</span><br></pre></td></tr></table></figure>

<p>*:S 用于设置所有标记的日志优先级为S，可以确保输出符合指定的过滤器设置的一种推荐的方式，<br> 这样过滤器就成为了日志输出的“白名单”<br> 显示所有优先级大于等于“warning”的日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat *:W</span><br></pre></td></tr></table></figure>

<p>日志消息在标记和优先级之外还有很多元数据字段，这些字段可以通过修改输出格式来控制输出结果， -v 选项加上下面列出的内容可以控制输出字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brief — 显示优先级&#x2F;标记和原始进程的PID (默认格式)</span><br><span class="line">process — 仅显示进程PID</span><br><span class="line">tag — 仅显示优先级&#x2F;标记</span><br><span class="line">thread — 仅显示进程：线程和优先级&#x2F;标记</span><br><span class="line">raw — 显示原始的日志信息，没有其他的元数据字段</span><br><span class="line">time — 显示日期，调用时间，优先级&#x2F;标记，PID</span><br><span class="line">long —显示所有的元数据字段并且用空行分隔消息内容</span><br></pre></td></tr></table></figure>

<p>使用 thread 输出格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat -v thread</span><br></pre></td></tr></table></figure>

<p>Android日志系统为日志消息保持了多个循环缓冲区，而且不是所有的消息都被发送到默认缓冲区，要想查看这些附加的缓冲区，可以使用-b 选项，以下是可以指定的缓冲区：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">radio — 查看包含在无线&#x2F;电话相关的缓冲区消息</span><br><span class="line">events — 查看事件相关的消息</span><br><span class="line">main — 查看主缓冲区 (默认缓冲区)</span><br></pre></td></tr></table></figure>

<p>查看radio缓冲区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat -b radio</span><br></pre></td></tr></table></figure>

<p>打印应用程序的log</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat -b main -v time&gt;app.log</span><br></pre></td></tr></table></figure>

<p>打印射频相关的log，SIM STK也会在里面，modem相关的ATcommand等，当然跟QXDM差的很远了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat -b radio -v time&gt; radio.log</span><br></pre></td></tr></table></figure>

<p>打印系统事件的日志，比如触屏事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat -b events -v time</span><br></pre></td></tr></table></figure>

<p>tcpdump 是很有用的，对于TCP/IP协议相关的都可以使用这个来抓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell tcpdump -s 10000 -w &#x2F;sdcard&#x2F;capture.pcap</span><br></pre></td></tr></table></figure>

<p>状态信息，里面包含有dmesg，dumpstate和dumpsys</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb bugreport&gt;bugreport.log</span><br></pre></td></tr></table></figure>

<p>kernel的log凡是跟kernel相关的，比如driver出了问题（相机，蓝牙，usb，启动，等等吧）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dmesg &gt; ldmesg_kernel.log</span><br></pre></td></tr></table></figure>

<p>dumpstate是系统状态信息，里面比较全，包括手机当前的内存信息、cpu信息、logcat缓存，kernel缓存等等 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpstate</span><br></pre></td></tr></table></figure>

<p>关于系统service的内容都在这个里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys</span><br></pre></td></tr></table></figure>

<p>显示内存信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys meminfo system</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity开发移动端相机的优缺点分析</title>
    <url>/2017/11/15/Unity%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9B%B8%E6%9C%BA%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><strong>它对相机硬件不是太“了解”</strong><br>用它的API，3000块钱的手机和500块钱的手机的拍照效果相差不大。造成这种差异的原因是，unity的相机方面的API，他没有获取相机参数的方式，对于相机的硬件设备，它只是单方面的要求，没有互动，它的模式是，我需要什么样的图片，那么我就要求相机返回什么样的图片给我，而不关心它是否真的能有能力返回给我。通俗的讲就是，在它看来，黄金和铁都是金属，它没法利用黄金比铁高出来的价值，而只认为它们都只是金属而已。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">camtexture = <span class="keyword">new</span> WebCamTexture(cameraDevs[<span class="number">0</span>].name, Screen.height, Screen.width, <span class="number">60</span>);</span><br><span class="line">   camtexture.Play();</span><br></pre></td></tr></table></figure>

<p><strong>它没有获得相机Info相应的方法</strong><br>甚至于他没法在拍照的时候在正确的时机开启闪光灯。</p>
<p><strong>它的拍照原理是对当前显示texture的截图</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Texture2D mTexture &#x3D; new Texture2D(camtexture.width, camtexture.height,            TextureFormat.RGB24, false);</span><br><span class="line">mTexture.SetPixels(camtexture.GetPixels(0, 0, camtexture.width, camtexture.height));</span><br><span class="line">mTexture.Apply();</span><br><span class="line"></span><br><span class="line">byte[] bt &#x3D; mTexture.EncodeToJPG(100);</span><br><span class="line">string mPhotoName &#x3D; DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;.jpg&quot;;</span><br><span class="line">string mPhotoDir &#x3D; Application.persistentDataPath + &quot;&#x2F;&quot; + &quot;iezviewCamera&quot; + &quot;&#x2F;&quot;;</span><br><span class="line">if (!Directory.Exists(mPhotoDir)) &#123;</span><br><span class="line">     Directory.CreateDirectory(mPhotoDir);</span><br><span class="line">&#125;</span><br><span class="line">string mPhotoPath &#x3D; mPhotoDir+ mPhotoName;</span><br><span class="line">System.IO.File.WriteAllBytes(mPhotoPath, bt);</span><br><span class="line">Debug.Log(&quot;照片路径  &quot; + mPhotoPath);</span><br></pre></td></tr></table></figure>

<p>这样造成的结果就是，如果你想让拍照拍出来的图片质量越好，那么就需要你预览的时候要求它输出的质量越好，而预览的时候输出质量好的代价，就是手机的性能，你就会发现预览界面一卡一卡的，好了，拍照的质量和预览的流畅度中间，少年，该做个了断了。:) 而如果使用AndroidAPI，则可以输出达到3120<em>4160分辨率的图片，unity方面API输出分辨率经测试最大值仅为1536</em>2048。</p>
<p><strong>它的对焦方式只能是自动对焦</strong><br>它的对焦方式是自动对焦，并且没法在一个时间点捕捉它的对焦状态。除非你有别的黑科技途径。</p>
<p>当然你可以尝试让相机同时输出到两个texture里面，一个用来预览，另外的一个专门用来拍照时play()-&gt;截取图片-&gt;存储—-&gt;拍完stop(),这样不就能解决我上面说到的问题了吗。可以预料到这样的话他在预览的时候是流畅的，而仅仅是在拍照的时候会有一个卡顿，但总会好上那么一点点吧，结果是他在拍照时候的卡顿非常之久，显然这种方式显然也是不好的。</p>
<p><strong>优点，跨平台能力</strong><br>unity的跨平台能力是很棒的，因此如果你用unity能开发出一个满足要求的相机，就能在多平台运行，这不管对于开发的效率还是对后期的维护成本都是十分有利的。并且它支持导出Android和IOS，开发一个这样的插件用作这两个平台是很不错的选择。</p>
<p><strong>总结</strong><br>总结来说就是：unity开发的相机虽然能在多个平台上面运行，但是它也被迫的放弃了一些东西，它在相机方面的API没有很好的发挥出相机的硬件优势。我推测unity 相机方面的API的初衷应该是适用于给AR开发提供轻量级的图像流，数据量小，兼容性强，跨平台，这对于普遍性能较低的移动设备是喜闻乐见的。</p>
<p>unity学习了还不到一个月，可能会有了解不足的地方，欢迎大家的指出，另外如果你有更好的想法，也请不吝赐教。</p>
<p>####“大圣，此去欲何?” “踏南天，碎凌霄。” “若一去不回……” “便一去不回”<br><img src="http://img.blog.csdn.net/20170213154804845?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjc1MTI2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>拥抱Android O，Android固定快捷方式App Shortcuts</title>
    <url>/2017/11/29/android-O-app-shortcuts/</url>
    <content><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>在新发布的Android 8.0功能和API中，Android 8.0 引入了对在应用启动器图标上显示通知标志的支持。通知标志可反映某个应用是否存在与其关联、并且用户尚未予以清除也未对其采取行动的通知。通知标志也称为通知点。简而言之呢，就是在Android 8.0+加入了类似于IOS的3DTouch的功能。下面就是他的效果。<br><img src="https://developer.android.google.cn/about/versions/oreo/images/notification-long-press.png" alt="用户可以长按应用启动器图标以查看 Android 8.0 中的通知。"></p>
<a id="more"></a>  

<p>这个小工能的添加可谓是非常方便的，在我们日常的应用场景中，有时候我们可能想用QQ发一条空间动态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A[QQ] --&gt;|常规方式| B[动态]</span><br><span class="line">B --&gt; C[右上角+号按钮]</span><br><span class="line">C --&gt; D[发说说]</span><br><span class="line">A --&gt;|App Shortcuts| E[快捷菜单]</span><br><span class="line">E --&gt; D</span><br></pre></td></tr></table></figure>
<p>App Shortcuts的增加，无疑简化了用户的操作，提升了用户体验度。</p>
<p>下面我们就用一个Demo来介绍下如何定制我们的App Shortcuts：</p>
<hr>
<p>首先新建项目，找到AndroidManifest.xml在主Activity添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.example.shortcutsdemo"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这里添加shortcuts配置文件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"android.app.shortcuts"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:resource</span>=<span class="string">"@xml/shortcuts1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在res/xml/下新建shortcuts1.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shortcuts</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shortcut</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutDisabledMessage</span>=<span class="string">"@string/shortcut1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutId</span>=<span class="string">"compose1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutLongLabel</span>=<span class="string">"@string/shortcut1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutShortLabel</span>=<span class="string">"@string/shortcut1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:action</span>=<span class="string">"android.intent.action.MAIN"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:data</span>=<span class="string">"快捷方式1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetClass</span>=<span class="string">"com.example.shortcutsdemo.MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetPackage</span>=<span class="string">"com.example.shortcutsdemo"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">categories</span> <span class="attr">android:name</span>=<span class="string">"android.shortcut.conversation"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shortcut</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shortcut</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutDisabledMessage</span>=<span class="string">"@string/shortcut2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutId</span>=<span class="string">"compose2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutLongLabel</span>=<span class="string">"@string/shortcut2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutShortLabel</span>=<span class="string">"@string/shortcut2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:action</span>=<span class="string">"android.intent.action.MAIN"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:data</span>=<span class="string">"快捷方式2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetClass</span>=<span class="string">"com.example.shortcutsdemo.MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetPackage</span>=<span class="string">"com.example.shortcutsdemo"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">categories</span> <span class="attr">android:name</span>=<span class="string">"android.shortcut.conversation"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shortcut</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shortcut</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutDisabledMessage</span>=<span class="string">"@string/shortcut3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutId</span>=<span class="string">"compose3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutLongLabel</span>=<span class="string">"@string/shortcut3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutShortLabel</span>=<span class="string">"@string/shortcut3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:action</span>=<span class="string">"android.intent.action.MAIN"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:data</span>=<span class="string">"快捷方式3"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetClass</span>=<span class="string">"com.example.shortcutsdemo.MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetPackage</span>=<span class="string">"com.example.shortcutsdemo"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:action</span>=<span class="string">"android.intent.action.MAIN"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:data</span>=<span class="string">"快捷方式3"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetClass</span>=<span class="string">"com.example.shortcutsdemo.MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetPackage</span>=<span class="string">"com.example.shortcutsdemo"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">categories</span> <span class="attr">android:name</span>=<span class="string">"android.shortcut.conversation"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果这里的intent配置了多个的话，那么点击此项shortcut的话就会依次启动，当点击back的时候也是依次从栈顶退出页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shortcut</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 更多的shortcuts在这里添加. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shortcuts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置好了\res\xml\shortcuts1.xml文件后，这时候我们不用做其他的操作，直接运行就可以看到效果啦。<br><img src="/blogimgs/shortcuts.png" alt="shortcuts"><br>这时候当我们点击某个item，就会跳转到我们设置的对应的activity。</p>
<p>但这时候我们并无法区分它是用户以别的页面跳转过来的还是通过点击我们刚刚设置的shortcuts跳转过来的，这时候怎么办呢，我们可以通过判断当前页面的intent来区分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">		setContentView(R.layout.activity_main);</span><br><span class="line">		TextView view = findViewById(R.id.text);</span><br><span class="line">		view.setText(getIntent().getDataString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是我想到的一个方法，感觉应该还会有更好的方法。</p>
<p>以上就是静态的添加shortcuts的方法，另外还有动态添加shortcuts的方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ShortcutManager shortcutManager = <span class="keyword">null</span>;</span><br><span class="line">ShortcutInfo shortcut = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N_MR1) &#123;</span><br><span class="line">		shortcutManager = getSystemService(ShortcutManager<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		shortcut = <span class="keyword">new</span> ShortcutInfo.Builder(<span class="keyword">this</span>, <span class="string">"id1"</span>)</span><br><span class="line">						.setShortLabel(<span class="string">"Web site"</span>)</span><br><span class="line">						.setLongLabel(<span class="string">"Open the web site"</span>)</span><br><span class="line">						.setIcon(Icon.createWithResource(<span class="keyword">this</span>, R.mipmap.ic_launcher))</span><br><span class="line">						.setIntent(<span class="keyword">new</span> Intent(Intent.ACTION_VIEW,</span><br><span class="line">										Uri.parse(<span class="string">"https://www.mysite.example.com/"</span>)))</span><br><span class="line">						.build();</span><br><span class="line">		shortcutManager.setDynamicShortcuts(Arrays.asList(shortcut));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使部分shortcut失效或激活shortcut：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">shortcutManager.enableShortcuts(shortcutIds);</span><br><span class="line">shortcutManager.disableShortcuts(shortcutIds);</span><br></pre></td></tr></table></figure>
<p>效果：<br><img src="/blogimgs/shortcuts2.png" alt="效果图"></p>
<blockquote>
<p>参考地址：<a href="https://developer.android.google.cn/guide/topics/ui/shortcuts.html" target="_blank" rel="noopener">https://developer.android.google.cn/guide/topics/ui/shortcuts.html</a><br>原文地址：<a href="http://imaster.top/2017/11/29/android-O-app-shortcuts/" target="_blank" rel="noopener">http://imaster.top/2017/11/29/android-O-app-shortcuts/</a><br>转载请注明出处，未经允许不得转载。  </p>
</blockquote>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android-opencv机器视觉库的集成部署</title>
    <url>/2018/03/18/android-opencv%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E5%BA%93%E7%9A%84%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<p>这段时间一直在学习opencv在android平台上的应用,因此打算把学习的过程记录下来,就当是学习笔记吧.</p>
<p>opencv在android平台上的部署有两种方式:</p>
<ol>
<li>手机安装OpencvManager.apk,然后项目导入OpenCVSDK的Java库,使用 <code>OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_13, context, mLoaderCallback);</code>以AIDL多进程通信的方式,使用OpencvManager的服务进行OpenCV的运算.  </li>
<li>将OpenCV的native部分集成在App自己本身,但这会让apk安装包大一些.</li>
</ol>
<a id="more"></a>
<p>其实这两种方法都差不多,首先去<a href="https://opencv.org/" target="_blank" rel="noopener">官网</a>把OpenCV-android-sdk.zip下载下来,然后在android studio里面<code>File|import module</code> 选择sdk目录下的./java文件夹就好了.</p>
<p>但这样配置好之后还不能直接使用,因为opencv在使用之前还需要检查一下是否安装了OpenCV管理器,如果没有安装则会弹出提示框告诉你要去下载安装才能进行后续的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    <span class="comment">//使用前必须要loader成功才可以.</span></span><br><span class="line">    <span class="keyword">if</span> (!OpenCVLoader.initDebug()) &#123;</span><br><span class="line">        OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_13, <span class="keyword">this</span>, mLoaderCallback);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> BaseLoaderCallback mLoaderCallback = <span class="keyword">new</span> BaseLoaderCallback(<span class="keyword">this</span>) &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onManagerConnected</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">               <span class="keyword">case</span> LoaderCallbackInterface.SUCCESS: &#123;</span><br><span class="line">                   Log.i(TAG, <span class="string">"OpenCV loaded successfully"</span>);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//loader成功,在这里完成你的工作.↓</span></span><br><span class="line"></span><br><span class="line">                   <span class="comment">//&lt;editor-fold desc="高斯模糊"&gt;</span></span><br><span class="line">                   ImageView image_src = (ImageView) findViewById(R.id.image_src);</span><br><span class="line">                   ImageView image_result = (ImageView) findViewById(R.id.image_result);</span><br><span class="line"></span><br><span class="line">                   Bitmap src = BitmapFactory.decodeResource(getResources(), R.drawable.image);</span><br><span class="line">                   Mat mat = <span class="keyword">new</span> Mat(src.getWidth(), src.getHeight(), CvType.CV_8UC4);</span><br><span class="line">                   Utils.bitmapToMat(src, mat);</span><br><span class="line">                   Imgproc.blur(mat, mat, <span class="keyword">new</span> Size(<span class="number">30</span>, <span class="number">30</span>));</span><br><span class="line">                   Bitmap bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888);</span><br><span class="line">                   Utils.matToBitmap(mat, bitmap);</span><br><span class="line">                   image_src.setImageBitmap(src);</span><br><span class="line">                   image_result.setImageBitmap(bitmap);</span><br><span class="line">                   <span class="comment">//&lt;/editor-fold&gt;</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>: &#123;</span><br><span class="line">                   <span class="keyword">super</span>.onManagerConnected(status);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>

<p>程序运行之后成功显示出模糊效果既成功.</p>
<p>另外如果不想安装OpenCVManager.apk,则需要我们把opencv的库全部集成到我们自己的项目中去,其实也非常简单,只需要把opencv_sdk中的<code>OpenCV-android-sdk\sdk\native\libs</code>放到我们自己项目的jnilibs文件夹就可以了.</p>
<p>最后集成完试试效果,图片高斯模糊:</p>
<p><img src="http://miqt.github.io/blogimgs/device-2018-03-27-155048.png" alt="opencv高斯模糊"></p>
<p><strong>本地集成的DEMO:</strong><a href="https://github.com/miqt/OpenCVforAndroid" target="_blank" rel="noopener">https://github.com/miqt/OpenCVforAndroid</a></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android studio gradle home 路径设置</title>
    <url>/2017/08/01/android-studio-gradle-home-%E8%B7%AF%E5%BE%84%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>路径：</p>
<p><img src="http://img.blog.csdn.net/20170215174722429?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjc1MTI2NzE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android 上划删除效果，仿小米任务清除</title>
    <url>/2017/06/07/android-%E4%B8%8A%E5%88%92%E5%88%A0%E9%99%A4%E6%95%88%E6%9E%9C%EF%BC%8C%E4%BB%BF%E5%B0%8F%E7%B1%B3%E4%BB%BB%E5%8A%A1%E6%B8%85%E9%99%A4/</url>
    <content><![CDATA[<p>先贴上示例程序，实现解析有空再补。<br>示例程序见：<a href="https://github.com/MiQt/UpRemove" target="_blank" rel="noopener">https://github.com/MiQt/UpRemove</a></p>
<a id="more"></a>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android 命令行获取root权限</title>
    <url>/2017/09/05/android-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%8E%B7%E5%8F%96root%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\Downloads\640wandroid\CatchBest&gt;adb shell</span><br><span class="line">rk3399_firefly_box:&#x2F; $ su</span><br><span class="line">rk3399_firefly_box:&#x2F; # chmod 777 &#x2F;dev&#x2F;bus&#x2F;usb&#x2F; -R</span><br><span class="line">rk3399_firefly_box:&#x2F; #</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>android View 和 ViewGroup 事件分发机制</title>
    <url>/2018/04/26/android-View-%E5%92%8C-ViewGroup-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="ViewGroup的事件分发机制"><a href="#ViewGroup的事件分发机制" class="headerlink" title="ViewGroup的事件分发机制"></a>ViewGroup的事件分发机制</h2><p>大体流程为：<br>ViewGroup的<code>dispatchTouchEvent</code> -&gt; ViewGroup的<code>onInterceptTouchEvent</code> -&gt; 子View的<code>dispatchTouchEvent</code> -&gt;子View的<code>onTouchEvent</code>   </p>
<ol>
<li>ViewGroup.dispatchTouchEvent  事件拦截</li>
<li>ViewGroup.onInterceptTouchEvent 事件处理</li>
<li>View.dispatchTouchEvent 事件消费</li>
</ol>
<p>总结：从最外层向内传递（如果没有拦截的话），从最里层向外消费（如果没有return ture的话）</p>
<a id="more"></a>
<h2 id="View的事件分发机制"><a href="#View的事件分发机制" class="headerlink" title="View的事件分发机制"></a>View的事件分发机制</h2><p>其实就三个方法：</p>
<ol>
<li><code>View.dispatchTouchEvent()</code> ↓</li>
<li><code>View.mOnTouchListener.onTouch()</code> ↓</li>
<li><code>View.onTouchEvent()</code> ↓</li>
</ol>
<p>如果<code>View.mOnTouchListener.onTouch()</code>返回了ture表示事件已经被消费了，<code>View.onTouchEvent()</code>将不会被调用。<br>如果<code>View.mOnTouchListener.onTouch()</code>返回了false则事件还会继续传递给<code>View.onTouchEvent()</code>。<br>如果<code>View.onTouchEvent()</code>返回了ture表示事件已经被消费了，结束。<br>如果<code>View.onTouchEvent()</code>返回了false则还会调用<code>mInputEventConsistencyVerifier.onUnhandledEvent(event, 0);</code>  </p>
<p>另外还有一点，在<code>OnTouchEvent</code>中的主要还有<code>DOWN</code>、<code>MOVE</code>、<code>UP</code>三个Action：  </p>
<p><strong>Down中</strong>：115ms内没有触发UP，此时标记位为<code>PREPRESSED</code>，这个时间内不会触发OnClick()，当超过了这个时间，则将标记为PREPRESSED清除，并改为PRESSED<br><strong>MOVE中</strong>：主要检测用户是否划出控件，115内划出直接移除<code>mPendingCheckForTap</code>，115后划出，将移除PRESSED标识<br><strong>UP中</strong>：115内，此时标志位<code>PREPRESSED</code><br>总结为就是：<br>UP-Down=time;<br><strong>time &lt; 115ms:</strong>  <code>PREPRESSED</code> 状态<br><strong>115ms &lt; time &lt; 5ooms:</strong> 执行<code>onClick()</code>回调<br><strong>500ms &lt; time</strong>检查是否设置了<code>OnLongClickListerner</code> 如果有则会调用<code>boolean onLongClick(View v);</code>,如果没有或者<code>onLongClick()</code>返回了false，则依然还会调用<code>onClick()</code>  </p>
<p>dispatchTouchEvent源码：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//已经省略部分源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//mOnTouchListener不为空的话，优先给mOnTouchListener处理</span></span><br><span class="line">    <span class="keyword">if</span> (mOnTouchListener != <span class="keyword">null</span> &amp;&amp; mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//mOnTouchListener如果onTouch处理完返回false</span></span><br><span class="line">    <span class="comment">//则继续交给onTouchEvent()处理</span></span><br><span class="line">    <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">      onUnhandledEvent(event, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一图胜千言，可以拿着流程图去对比一下源码会有更好的效果哦：</p>
<p><img src="https://img-blog.csdn.net/20180426110114865?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NTEyNjcx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图"></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android-opencv之线性滤波.实现简单图像滤镜</title>
    <url>/2018/03/23/android-%E7%94%A8opencv%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%9B%BE%E5%83%8F%E6%BB%A4%E9%95%9C/</url>
    <content><![CDATA[<p>opencv的线性滤波可以为图像添加一些效果,比如模糊,降噪,锐化,腐蚀与膨胀等,当然我们也可以自己来定义<strong>核</strong>来实现一些特殊的效果.  </p>
<h2 id="核是什么"><a href="#核是什么" class="headerlink" title="核是什么?"></a>核是什么?</h2><p>那么上面提到的核是什么呢?  </p>
<p>核可以看做是沿着图像像素移动的一个窗口,它遍历图片的每个像素,并且将计算后的结果输出到该像素,通过这样的一个图可以更直观的理解这个概念. 核说白了就是一个固定大小的数值数组。该数组带有一个 锚点 ，一般位于数组中央. 它类似于这样 .   </p>
<p><img src="http://www.opencv.org.cn/opencvdoc/2.3.2/html/_images/filter_2d_tutorial_kernel_theory.png" alt="opencv的核">  </p>
<a id="more"></a>

<h2 id="如何用核实现卷积？"><a href="#如何用核实现卷积？" class="headerlink" title="如何用核实现卷积？"></a>如何用核实现卷积？</h2><blockquote>
<p>以下引用自<a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/imgtrans/filter_2d/filter_2d.html" target="_blank" rel="noopener">opencv中文教程</a></p>
</blockquote>
<p>假如你想得到图像的某个特定位置的卷积值，可用下列方法计算：</p>
<ol>
<li>将核的锚点放在该特定位置的像素上，同时，核内的其他值与该像素邻域的各像素重合；</li>
<li>将核内各值与相应像素值相乘，并将乘积相加；</li>
<li>将所得结果放到与锚点对应的像素上；</li>
<li>对图像所有像素重复上述过程。</li>
</ol>
<p>用公式表示上述过程如下：  </p>
<p><img src="http://www.opencv.org.cn/opencvdoc/2.3.2/html/_images/math/3ad6d7139f24a1a8b5ddd380ace0008c46799f95.png" alt="核卷积运算公式"></p>
<p>说实话,这个运算过程我真没有看懂(如果大家有能看明白的希望能讲一下),但这并不影响我们去使用它,因为幸运的是,OpenCV已经为我们提供了函数 <code>filter2D</code> 来实现了这些运算,我们并不需要自己去实现.  </p>
<h2 id="在android中实现图像滤波"><a href="#在android中实现图像滤波" class="headerlink" title="在android中实现图像滤波"></a>在android中实现图像滤波</h2><p>上面算是说了关于opencv线性滤波器的一些理论的东西吧,下面我们就来说一说在android平台中,如何利用opencv来实现一个图像滤波器.</p>
<p>第一步当然就是把opencvsdk配置到我们的项目中来了,并且配置好了之后,我们还要进行load成功才可以使用.这一部分可以参照我的<a href="http://imaster.top/2018/03/23/android-opencv%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E5%BA%93%E7%9A%84%E9%9B%86%E6%88%90/" target="_blank" rel="noopener" title="android-opencv机器视觉库的集成部署">上一篇笔记</a></p>
<p>第二步则是调用opencv的函数,进行图像处理,下面是五种滤镜的效果,及实现代码.</p>
<h3 id="简单滤镜之自定义核实现自己的线性滤波器"><a href="#简单滤镜之自定义核实现自己的线性滤波器" class="headerlink" title="简单滤镜之自定义核实现自己的线性滤波器"></a>简单滤镜之自定义核实现自己的线性滤波器</h3><p>效果:  </p>
<p><img src="https://github.com/miqt/OpenCVLeaning/raw/master/preview/opencv_fs.png" alt="">)<img src="https://github.com/miqt/OpenCVLeaning/raw/master/preview/opencv_zdy_r.png" alt=""></p>
<p>核心代码:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharpenProcessor</span> <span class="keyword">implements</span> <span class="title">ImgProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mat dec;</span><br><span class="line">    <span class="keyword">private</span> Mat src;</span><br><span class="line">    <span class="keyword">private</span> Bitmap bitmap_dec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mat kernel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initProcessor</span><span class="params">(Bitmap bitmap_src)</span> </span>&#123;</span><br><span class="line">        bitmap_dec = Bitmap.createBitmap(bitmap_src.getWidth(), bitmap_src.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        src = <span class="keyword">new</span> Mat();</span><br><span class="line">        dec = <span class="keyword">new</span> Mat();</span><br><span class="line">        Utils.bitmapToMat(bitmap_src, src);</span><br><span class="line">        kernel = <span class="keyword">new</span> Mat(<span class="number">3</span>, <span class="number">3</span>, CvType.CV_16SC1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        kernel.put(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">5</span>, -<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        Imgproc.filter2D(src, dec, src.depth(), kernel);</span><br><span class="line">        Utils.matToBitmap(dec, bitmap_dec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processor</span><span class="params">(<span class="keyword">int</span> progress)</span> </span>&#123;</span><br><span class="line">        kernel.put(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, progress, -<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        Imgproc.filter2D(src, dec, src.depth(), kernel);</span><br><span class="line">        Utils.matToBitmap(dec, bitmap_dec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bitmap_dec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简单滤镜之高斯模糊"><a href="#简单滤镜之高斯模糊" class="headerlink" title="简单滤镜之高斯模糊"></a>简单滤镜之高斯模糊</h3><p>效果:</p>
<p><img src="http://miqt.github.io/blogimgs/device-2018-03-27-155048.png" alt="opencv高斯模糊">  </p>
<p>核心代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;editor-fold desc="高斯模糊"&gt;</span></span><br><span class="line">ImageView image_src = (ImageView) findViewById(R.id.image_src);</span><br><span class="line">ImageView image_result = (ImageView) findViewById(R.id.image_result);</span><br><span class="line"></span><br><span class="line">Bitmap src = BitmapFactory.decodeResource(getResources(), R.drawable.image);</span><br><span class="line">Mat mat = <span class="keyword">new</span> Mat(src.getWidth(), src.getHeight(), CvType.CV_8UC4);</span><br><span class="line">Utils.bitmapToMat(src, mat);</span><br><span class="line">Imgproc.blur(mat, mat, <span class="keyword">new</span> Size(<span class="number">30</span>, <span class="number">30</span>));</span><br><span class="line">Bitmap bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888);</span><br><span class="line">Utils.matToBitmap(mat, bitmap);</span><br><span class="line">image_src.setImageBitmap(src);</span><br><span class="line">image_result.setImageBitmap(bitmap);</span><br><span class="line"><span class="comment">//&lt;/editor-fold&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="简单滤镜之腐蚀"><a href="#简单滤镜之腐蚀" class="headerlink" title="简单滤镜之腐蚀"></a>简单滤镜之腐蚀</h3><p>效果:  </p>
<p><img src="https://github.com/miqt/OpenCVLeaning/raw/master/preview/opencv_fs.png" alt="腐蚀">)<img src="https://github.com/miqt/OpenCVLeaning/raw/master/preview/opencv_fs_r.png" alt="腐蚀"></p>
<p>核心代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 腐蚀运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErodeProcessor</span> <span class="keyword">implements</span> <span class="title">ImgProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mat dec;</span><br><span class="line">    <span class="keyword">private</span> Mat src;</span><br><span class="line">    <span class="keyword">private</span> Bitmap bitmap_dec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mat kernel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initProcessor</span><span class="params">(Bitmap bitmap_src)</span> </span>&#123;</span><br><span class="line">        bitmap_dec = Bitmap.createBitmap(bitmap_src.getWidth(), bitmap_src.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        src = <span class="keyword">new</span> Mat();</span><br><span class="line">        dec = <span class="keyword">new</span> Mat();</span><br><span class="line">        Utils.bitmapToMat(bitmap_src, src);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        processor(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processor</span><span class="params">(<span class="keyword">int</span> wight)</span> </span>&#123;</span><br><span class="line">        kernel = Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, <span class="keyword">new</span> Size(wight, wight));</span><br><span class="line">        Imgproc.erode(src, dec, kernel);</span><br><span class="line">        Utils.matToBitmap(dec, bitmap_dec);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bitmap_dec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Demo:<a href="https://github.com/miqt/OpenCVLeaning" target="_blank" rel="noopener">https://github.com/miqt/OpenCVLeaning</a><br>本文出自: <a href="http://imaster.top" target="_blank" rel="noopener">http://imaster.top</a><br>本文为作者原创,转载请注明出处.  </p>
</blockquote>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>用24k纯java自己实现android的handler+message通信机制</title>
    <url>/2018/09/21/android-handler-message/</url>
    <content><![CDATA[<p>事情的起因还是因为一次面试经历。  </p>
<p>面试官：“说一下android的handler机制”   </p>
<p>经过几次面试之后发现几乎每个面试官都会问到这个问题，真的都快被问烦了好吧，于是用飞快的速度把之前都快说烂了答案的又说了一遍，好不容易都说完了，这时候面试官的操作来了，直接拿过来几张白纸。</p>
<p>“恩，说的不错，来，那你试试能不能尝试用伪代码实现一下。”      </p>
<p>还有这种操作，当时我就蒙了，心想，要不就试试吧，反正都用了不知道多少次了。   </p>
<p>一开始写想的思路就是启动一个线程开启一个死循环仿照looper来一直轮训消息队列，然后没有的话就阻塞线程，等消息来了再唤醒继续取出消息处理，但到了postdelay()这个方法时，延时处理就不知道怎么搞了，这把我难住了，因为需要根据时间线来取消息，比如先插入个等待2秒的后插入一个等待1秒的，那么就要时间少的最先运行，想了一会，一时没想出好的方法，然后就下一题了。。。。    </p>
<p>回来就想，用的熟练跟自己能实现出来还是有差别呀，之前咋就没想过如果自己实现的话会是什么样子呢。    </p>
<p>回来之后好好翻了翻android的源码，痛定思痛。花了半天，终于按照android的handler机制的思路自己实现了出来。   </p>
<p>下面就是我的实现过程，比起android官方的肯定要简单点，但主要的线程通讯和延迟处理都实现出来了。   </p>
<a id="more"></a>

<h2 id="handler-message-机制的由来"><a href="#handler-message-机制的由来" class="headerlink" title="handler message 机制的由来"></a>handler message 机制的由来</h2><p>android 的 UI 操作并不是线程安全的，我们知道，在android中子线程可以有好多个，但是如果每个线程都可以对ui进行访问，我们的界面可能就会变得混乱不堪，这样多个线程操作同一资源就会造成线程安全问题，当然，需要解决线程安全问题的时候，我们第一想到的可能就是加锁，但是加锁会降低运行效率，所以android出于性能的考虑，并没有使用加锁来进行ui操作的控制。</p>
<p>但问题又回来了，既然想要性能，有想要解决子线程更新ui的需求，那么应该怎么办呢？</p>
<p>因此android规定，ui线程只能由MainThread进行访问，其他菜鸡子线程想更新ui只能先写报告（handler.sendmessage()）交给MainThread代为处理。</p>
<p>而这个写报告并由MainThread代为更新UI的过程，就是使用handler message机制来实现的了。</p>
<p>因此handler message 机制也是对于UI刷新线程安全问题的一个高性能的解决方案，并且这套机制不仅仅适用于主线程和子线程通讯，它适用于任何一对多线程间的通讯。</p>
<h2 id="主要构成成员"><a href="#主要构成成员" class="headerlink" title="主要构成成员"></a>主要构成成员</h2><ol>
<li>Handler：消息处理，消息循环从消息队列中取出消息后要对消息进行处理。</li>
<li>Message：消息的实体</li>
<li>MessageQueue：消息队列</li>
<li>Looper：消息循环</li>
</ol>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p><em>Message.java</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miqt.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> what;</span><br><span class="line">	<span class="keyword">public</span> Object obj1;</span><br><span class="line">	<span class="keyword">public</span> Object obj2;</span><br><span class="line">	<span class="keyword">public</span> Handler target;</span><br><span class="line">	<span class="keyword">public</span> Runnable callback;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(<span class="keyword">int</span> what, Object obj1, Object obj2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.what = what;</span><br><span class="line">		<span class="keyword">this</span>.obj1 = obj1;</span><br><span class="line">		<span class="keyword">this</span>.obj2 = obj2;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(<span class="keyword">int</span> what)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.what = what;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(Runnable run)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.callback = run;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先就是‘信封’实体message，我这里只实现了message传消息常用的变量，对于android源码中的消息池我没有实现。</p>
<p><em>MessageQueue.java</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miqt.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span> </span>&#123;</span><br><span class="line">	DelayQueue&lt;DelayRunnable&gt; queue = <span class="keyword">new</span> DelayQueue&lt;DelayRunnable&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 入队</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Message msg, <span class="keyword">long</span> delayInMilliseconds)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"handler is null"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		DelayRunnable runn = <span class="keyword">new</span> DelayRunnable() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				msg.target.dispatchMessage(msg);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		runn.setDelay(delayInMilliseconds);</span><br><span class="line">		queue.add(runn);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 出队</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> DelayRunnable <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> queue.take();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayRunnable</span> <span class="keyword">implements</span> <span class="title">Delayed</span>, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">long</span> delay;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDelay</span><span class="params">(<span class="keyword">long</span> delayInMilliseconds)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.delay = System.nanoTime() + TimeUnit.NANOSECONDS.convert(delayInMilliseconds, TimeUnit.MILLISECONDS);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">			DelayRunnable that = (DelayRunnable) o;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.delay &gt; that.delay) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.delay &lt; that.delay) &#123;</span><br><span class="line">				<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">long</span> result = unit.convert(delay - System.nanoTime(), TimeUnit.NANOSECONDS);</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消息队列只实现了队列的入队和出队，遵循消息先进先出并且需要根据时间优先出队的原则，使用了DelayQueue来储存消息，另外创建DelayRunnable实现了Delayed接口的compareTo方法和getDelay方法，compareTo方法用来比较消息在队列中的顺序，getDelay方法是用来决定是否出队处理，当返回值&lt;=0时，则会出队处理。</p>
<p><em>Looper.java</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miqt.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.miqt.test.MessageQueue.DelayRunnable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	MessageQueue queue;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Looper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		queue = <span class="keyword">new</span> MessageQueue();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Looper me = myLooper();</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			me.queue.next().run();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 检查线程中是否已经有一个Looper循环了</span></span><br><span class="line">		<span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		sThreadLocal.set(<span class="keyword">new</span> Looper());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Looper实现了核心的prepare方法和loop方法，loop开启轮训之后则是开启死循环一直取消息来处理，这里的queue.next(),实际上类似于一个阻塞方法，android源码的实现方式我看是放在了native层中，而java原生不是，java原生的代码它实际上是首先会调用DelayRunnable.getDelay()取得一个纳秒值，然后一直减去系统的时间，直到减到小于0返回DelayRunnable对象，看一眼这块的实现源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">awaitNanos</span><span class="params">(<span class="keyword">long</span> nanosTimeout)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">            Node node = addConditionWaiter();</span><br><span class="line">            <span class="keyword">int</span> savedState = fullyRelease(node);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> deadline = System.nanoTime() + nanosTimeout;</span><br><span class="line">            <span class="keyword">int</span> interruptMode = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nanosTimeout &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                    transferAfterCancelledWait(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nanosTimeout &gt;= spinForTimeoutThreshold)</span><br><span class="line">                    LockSupport.parkNanos(<span class="keyword">this</span>, nanosTimeout);</span><br><span class="line">                <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                nanosTimeout = deadline - System.nanoTime();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</span><br><span class="line">                interruptMode = REINTERRUPT;</span><br><span class="line">            <span class="keyword">if</span> (node.nextWaiter != <span class="keyword">null</span>)</span><br><span class="line">                unlinkCancelledWaiters();</span><br><span class="line">            <span class="keyword">if</span> (interruptMode != <span class="number">0</span>)</span><br><span class="line">                reportInterruptAfterWait(interruptMode);</span><br><span class="line">            <span class="keyword">return</span> deadline - System.nanoTime();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><em>Handler.java</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miqt.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Looper mLooper;</span><br><span class="line">	MessageQueue mQueue;</span><br><span class="line">	<span class="keyword">private</span> CallBack mCallback;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper mLooper, CallBack callBack)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.mLooper = mLooper;</span><br><span class="line">		<span class="keyword">this</span>.mCallback = callBack;</span><br><span class="line">		mQueue = mLooper.queue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">		Message msg = <span class="keyword">new</span> Message(r);</span><br><span class="line">		<span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">			msg.target = <span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mQueue.enqueue(msg, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postDelay</span><span class="params">(Runnable r, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">		Message msg = <span class="keyword">new</span> Message(r);</span><br><span class="line">		<span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">			msg.target = <span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mQueue.enqueue(msg, delayMillis);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">			msg.target = <span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mQueue.enqueue(msg, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">		message.callback.run();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">			handleCallback(msg);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			handleMessage(msg);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">interface</span> <span class="title">CallBack</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后就是handler了，它其实是最简单的，只负责调用之前封装好的就行了，我在这里按照android分发message的逻辑实现了dispatchMessage，这样的话调用起来几乎跟在android上一模一样，优先级也一样，先出发message里面的runnable运行,然后触发CallBack对象的handleMessage，如果返回false的话那么还会触发自己的方法public void handleMessage(Message message)。    </p>
<p>到了这里就实现完成了，接下来就是测试一下是否可用。    </p>
<p>这是我的测试代码。    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miqt.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Acty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HELLO = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> Handler handler;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				Looper.prepare();</span><br><span class="line">				handler = <span class="keyword">new</span> Handler(Looper.myLooper(), <span class="keyword">new</span> MyCallBack());</span><br><span class="line">				Looper.loop();</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		<span class="comment">// 创建线程不定时发送message</span></span><br><span class="line">		test();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">int</span> type = (<span class="keyword">int</span>) (Math.random() * <span class="number">3</span>);</span><br><span class="line">					<span class="keyword">switch</span> (type) &#123;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">						System.out.println(<span class="string">"[发送方]：sendMessage"</span>);</span><br><span class="line">						Message message = <span class="keyword">new</span> Message(HELLO);</span><br><span class="line">						message.obj1 = <span class="string">"001"</span> + Math.random();</span><br><span class="line">						handler.sendMessage(message);</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">						System.out.println(<span class="string">"[发送方]：post"</span>);</span><br><span class="line">						handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">							<span class="meta">@Override</span></span><br><span class="line">							<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">								System.out.println(<span class="string">"[接受方]post"</span>);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;);</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">						<span class="keyword">long</span> delaytime = (<span class="keyword">long</span>) (Math.random() * <span class="number">5000</span>);</span><br><span class="line">						System.out.println(<span class="string">"[发送方]：postDelay:"</span> + String.valueOf(delaytime));</span><br><span class="line">						handler.postDelay(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">							<span class="meta">@Override</span></span><br><span class="line">							<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">								System.out.println(<span class="string">"[接受方]postDelay"</span> + delaytime);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;, delaytime);</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">default</span>:</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallBack</span> <span class="keyword">implements</span> <span class="title">Handler</span>.<span class="title">CallBack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">			<span class="keyword">case</span> HELLO:</span><br><span class="line">				String str = (String) msg.obj1;</span><br><span class="line">				System.out.println(<span class="string">"[接受方]"</span> + str + <span class="string">"开始处理"</span>);</span><br><span class="line">				System.out.println(<span class="string">"[接受方]"</span> + <span class="string">"hello,我来自消息队列"</span>);</span><br><span class="line">				System.out.println(<span class="string">"[接受方]"</span> + str + <span class="string">"处理完成，出队"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开启了两个线程，一个线程作为接收处理消息的线程，一个线程负责随机一个时间并且用不同的方式来发送消息。     </p>
<p>测试结果：   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[发送方]：sendMessage</span><br><span class="line">[接受方]0010.5516496029786089开始处理</span><br><span class="line">[接受方]hello,我来自消息队列</span><br><span class="line">[接受方]0010.5516496029786089处理完成，出队</span><br><span class="line">[发送方]：post</span><br><span class="line">[接受方]post</span><br><span class="line">[发送方]：post</span><br><span class="line">[接受方]post</span><br><span class="line">[发送方]：sendMessage</span><br><span class="line">[接受方]0010.45668723454926696开始处理</span><br><span class="line">[接受方]hello,我来自消息队列</span><br><span class="line">[接受方]0010.45668723454926696处理完成，出队</span><br><span class="line">[发送方]：post</span><br><span class="line">[接受方]post</span><br><span class="line">[发送方]：sendMessage</span><br><span class="line">[接受方]0010.43970565205942336开始处理</span><br><span class="line">[接受方]hello,我来自消息队列</span><br><span class="line">[接受方]0010.43970565205942336处理完成，出队</span><br><span class="line">[发送方]：postDelay:3647</span><br><span class="line">[发送方]：postDelay:4144</span><br><span class="line">[发送方]：postDelay:497</span><br><span class="line">[接受方]postDelay497</span><br><span class="line">[发送方]：sendMessage</span><br><span class="line">[接受方]0010.4489768565868292开始处理</span><br><span class="line">[接受方]hello,我来自消息队列</span><br><span class="line">[接受方]0010.4489768565868292处理完成，出队</span><br><span class="line">[接受方]postDelay3647</span><br><span class="line">[发送方]：post</span><br><span class="line">[接受方]post</span><br><span class="line">[发送方]：sendMessage</span><br><span class="line">[接受方]0010.5013814373539061开始处理</span><br><span class="line">[接受方]hello,我来自消息队列</span><br><span class="line">[接受方]0010.5013814373539061处理完成，出队</span><br><span class="line">[接受方]postDelay4144</span><br><span class="line">[发送方]：postDelay:4358</span><br></pre></td></tr></table></figure>


<p>可以看到不管是sendMessage、post还是postDelay,Handler都有条不紊的按照顺序进行处理，并且postDelay发出的消息会按照正确的顺序和时间点来运行。      </p>
<p>通过这次的实现，感觉对android消息机制有了更深的了解，以后还是要多思考多学习呀。    </p>
]]></content>
  </entry>
  <entry>
    <title>android代码保护永不闪退</title>
    <url>/2019/11/30/android%E4%BB%A3%E7%A0%81%E4%BF%9D%E6%8A%A4%E6%B0%B8%E4%B8%8D%E9%97%AA%E9%80%80/</url>
    <content><![CDATA[<p>在我们开发的过程中,再厉害的程序员也无法保证写的代码没有错误,而这里面最严重的错误,对于android开发来说,毫无疑问就是app闪退了.特别是在开发第三方SDK的时候,假设因为SDK里面报的问题,导致对方App崩溃了,这对SDK而言的打击是非常严重的,有的时候我们甚至希望SDK即使无法很好的工作,也不要引发对接方App的崩溃.</p>
<p>下面我就来介绍两种,可以根据代码判断,只会代码所在线程死掉,但不会引发崩溃的方法:</p>
<ol>
<li>hook Thread.UncaughtExceptionHandler 的方式</li>
<li>代理 Thread.UncaughtExceptionHandler 的方式</li>
</ol>
<h2 id="hook-Thread-UncaughtExceptionHandler-的方式"><a href="#hook-Thread-UncaughtExceptionHandler-的方式" class="headerlink" title="hook Thread.UncaughtExceptionHandler 的方式"></a>hook Thread.UncaughtExceptionHandler 的方式</h2><p>第一种方式就是,我们在程序启动的时候,先使用<code>Thread.getDefaultUncaughtExceptionHandler();</code>拿到系统的错误处理Handler对象,再次之上,我们自己创建一个 Thread.UncaughtExceptionHandler 的继承类,包裹住系统的错误处理Handler对象之后,把我们自己创建的Thread.UncaughtExceptionHandler 传递回去.<br>系统的Thread.UncaughtExceptionHandler的实现类是<code>com.android.internal.os.RuntimeInit$UncaughtHandler</code></p>
<a id="more"></a>

<p>hook代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread.UncaughtExceptionHandler ueh = Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ueh == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mSystemUeh = <span class="keyword">null</span>;</span><br><span class="line">        mOtherUeh = <span class="keyword">null</span>;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(CrashHookImpl2.<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String androidUeh = <span class="string">"com.android.internal.os.RuntimeInit$UncaughtHandler"</span>;</span><br><span class="line">    String selfUeh = getClass().getName();</span><br><span class="line">    String currUeh = ueh.getClass().getName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统的</span></span><br><span class="line">    <span class="keyword">if</span> (androidUeh.equals(currUeh)) &#123;</span><br><span class="line">        mSystemUeh = ueh;</span><br><span class="line">        mOtherUeh = <span class="keyword">null</span>;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(CrashHookImpl2.<span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selfUeh.equals(currUeh)) &#123;</span><br><span class="line">        <span class="comment">//自己人 不处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// bugly的 -&gt; currUeh.contains("com.tencent.bugly.crashreport.crash")</span></span><br><span class="line">        mSystemUeh = <span class="keyword">null</span>;</span><br><span class="line">        mOtherUeh = ueh;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(CrashHookImpl2.<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中,CrashHookImpl2是我们继承自Thread.UncaughtExceptionHandler 自己的实现类, 其中<code>uncaughtException</code>实现如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//-----------自己的处理,拦截除0异常-------------------------------</span></span><br><span class="line">    StackTraceElement[] elements = e.getStackTrace();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.getClass().getName().equals(<span class="string">"java.lang.ArithmeticException"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">//-----------下面的系统的uncaughtException不走,既不会崩溃---------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mOtherUeh != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mOtherUeh.uncaughtException(t, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mSystemUeh != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mSystemUeh.uncaughtException(t, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候, 我们可以在程序中写一个除以0 的异常,则是不会引发崩溃的,只会引发线程的停止:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CrashHookImpl.getInstance().hook();</span><br><span class="line">CrashHookImpl.getInstance().addCutOffExceptionHandler(<span class="keyword">new</span> CrashHook.CutOffExceptionHandler() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCutOffException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">        StackTraceElement[] elements = e.getStackTrace();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.getClass().getName().equals(<span class="string">"java.lang.ArithmeticException"</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="number">100</span> / <span class="number">0</span> + <span class="string">"hook"</span>);</span><br><span class="line">            String nullp = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> a = nullp.length();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure>

<p>实现类全部代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.analysys.track.internal.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.HandlerThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrashHookImpl2</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span>, <span class="title">CrashHook</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> CrashHookImpl2 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread.UncaughtExceptionHandler mSystemUeh;</span><br><span class="line">    <span class="keyword">private</span> Thread.UncaughtExceptionHandler mOtherUeh;</span><br><span class="line">    <span class="keyword">private</span> List&lt;CutOffExceptionHandler&gt; exceptionHandlers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CrashHookImpl2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        exceptionHandlers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread.UncaughtExceptionHandler ueh = Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ueh == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSystemUeh = <span class="keyword">null</span>;</span><br><span class="line">            mOtherUeh = <span class="keyword">null</span>;</span><br><span class="line">            Thread.setDefaultUncaughtExceptionHandler(CrashHookImpl2.<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String androidUeh = <span class="string">"com.android.internal.os.RuntimeInit$UncaughtHandler"</span>;</span><br><span class="line">        String selfUeh = getClass().getName();</span><br><span class="line">        String currUeh = ueh.getClass().getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//系统的</span></span><br><span class="line">        <span class="keyword">if</span> (androidUeh.equals(currUeh)) &#123;</span><br><span class="line">            mSystemUeh = ueh;</span><br><span class="line">            mOtherUeh = <span class="keyword">null</span>;</span><br><span class="line">            Thread.setDefaultUncaughtExceptionHandler(CrashHookImpl2.<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selfUeh.equals(currUeh)) &#123;</span><br><span class="line">            <span class="comment">//自己人 不处理</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// bugly的 -&gt; currUeh.contains("com.tencent.bugly.crashreport.crash")</span></span><br><span class="line">            mSystemUeh = <span class="keyword">null</span>;</span><br><span class="line">            mOtherUeh = ueh;</span><br><span class="line">            Thread.setDefaultUncaughtExceptionHandler(CrashHookImpl2.<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CrashHookImpl2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (CrashHookImpl2<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> CrashHookImpl2();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSystemUeh != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Thread.setDefaultUncaughtExceptionHandler(mSystemUeh);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mOtherUeh != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Thread.setDefaultUncaughtExceptionHandler(mSystemUeh);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCutOffExceptionHandler</span><span class="params">(CrashHook.CutOffExceptionHandler cutOffExceptionHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cutOffExceptionHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        exceptionHandlers.add(cutOffExceptionHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCutOffExceptionHandler</span><span class="params">(CrashHook.CutOffExceptionHandler cutOffExceptionHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cutOffExceptionHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        exceptionHandlers.remove(cutOffExceptionHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tryHook</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"hook_ch"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler(thread.getLooper());</span><br><span class="line">        handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (size &lt;= (time / <span class="number">200</span>)) &#123;</span><br><span class="line">                    size++;</span><br><span class="line">                    hook();</span><br><span class="line">                    handler.postDelayed(<span class="keyword">this</span>, <span class="number">200</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR2) &#123;</span><br><span class="line">                        thread.quitSafely();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        thread.quit();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; exceptionHandlers.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> consumed = exceptionHandlers.get(i).onCutOffException(t, e);</span><br><span class="line">            <span class="keyword">if</span> (consumed) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mOtherUeh != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mOtherUeh.uncaughtException(t, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mSystemUeh != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSystemUeh.uncaughtException(t, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代理-Thread-UncaughtExceptionHandler-的方式"><a href="#代理-Thread-UncaughtExceptionHandler-的方式" class="headerlink" title="代理 Thread.UncaughtExceptionHandler 的方式"></a>代理 Thread.UncaughtExceptionHandler 的方式</h2><p>实际上也是Hook默认的 Thread.UncaughtExceptionHandler , 但这种方式的好处是,我们自己无需创建实现Thread.UncaughtExceptionHandler接口的实现类,而只需要使用<code>Proxy.newProxyInstance</code>代理系统默认的<code>Thread.UncaughtExceptionHandler</code>就好了,这种方式比起上面一种来说,除了效果一致以外,好处可能就是可以避免一些代码的检查.</p>
<p>代理方式的hook代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hooked) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Thread.UncaughtExceptionHandler ueh = Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line">    <span class="keyword">if</span> (ueh == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代理逻辑</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Px</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Thread.UncaughtExceptionHandler handler;</span><br><span class="line">        <span class="keyword">private</span> Method uncaughtExceptionMethod;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Px</span><span class="params">(Thread.UncaughtExceptionHandler handler)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.handler = handler;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                uncaughtExceptionMethod = Thread.UncaughtExceptionHandler.class.getMethod("uncaughtException", Thread.class, Throwable.class);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//先走自己的</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (uncaughtExceptionMethod != <span class="keyword">null</span> &amp;&amp; uncaughtExceptionMethod.equals(method)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length == <span class="number">2</span>) &#123;</span><br><span class="line">                        Thread thread = (Thread) args[<span class="number">0</span>];</span><br><span class="line">                        Throwable throwable = (Throwable) args[<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; exceptionHandlers.size(); i++) &#123;</span><br><span class="line">                            <span class="keyword">boolean</span> cutoff = exceptionHandlers.get(i).onCutOffException(thread, throwable);</span><br><span class="line">                            <span class="keyword">if</span> (cutoff) &#123;</span><br><span class="line">                                <span class="comment">//截断</span></span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//原来的</span></span><br><span class="line">                method.invoke(handler, args);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Thread.UncaughtExceptionHandler hookedUeh = (Thread.UncaughtExceptionHandler) Proxy.newProxyInstance(</span><br><span class="line">            ueh.getClass().getClassLoader(),</span><br><span class="line">            ueh.getClass().getInterfaces(),</span><br><span class="line">            <span class="keyword">new</span> Px(ueh));</span><br><span class="line">    Thread.setDefaultUncaughtExceptionHandler(hookedUeh);</span><br><span class="line">    hooked = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本种方式的全部实现代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.analysys.track.internal.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrashHookImpl</span> <span class="keyword">implements</span> <span class="title">CrashHook</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;CutOffExceptionHandler&gt; exceptionHandlers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> CrashHookImpl instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hooked = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CrashHookImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        exceptionHandlers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CrashHookImpl <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (CrashHookImpl<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> CrashHookImpl();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hooked) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.UncaughtExceptionHandler ueh = Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line">        <span class="keyword">if</span> (ueh == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Px</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> Thread.UncaughtExceptionHandler handler;</span><br><span class="line">            <span class="keyword">private</span> Method uncaughtExceptionMethod;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="title">Px</span><span class="params">(Thread.UncaughtExceptionHandler handler)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.handler = handler;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    uncaughtExceptionMethod = Thread.UncaughtExceptionHandler.class.getMethod("uncaughtException", Thread.class, Throwable.class);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (uncaughtExceptionMethod != <span class="keyword">null</span> &amp;&amp; uncaughtExceptionMethod.equals(method)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length == <span class="number">2</span>) &#123;</span><br><span class="line">                            Thread thread = (Thread) args[<span class="number">0</span>];</span><br><span class="line">                            Throwable throwable = (Throwable) args[<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; exceptionHandlers.size(); i++) &#123;</span><br><span class="line">                                <span class="keyword">boolean</span> cutoff = exceptionHandlers.get(i).onCutOffException(thread, throwable);</span><br><span class="line">                                <span class="keyword">if</span> (cutoff) &#123;</span><br><span class="line">                                    <span class="comment">//截断</span></span><br><span class="line">                                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ignored) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//原来的</span></span><br><span class="line">                    method.invoke(handler, args);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ignored) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.UncaughtExceptionHandler hookedUeh = (Thread.UncaughtExceptionHandler) Proxy.newProxyInstance(</span><br><span class="line">                ueh.getClass().getClassLoader(),</span><br><span class="line">                ueh.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> Px(ueh));</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(hookedUeh);</span><br><span class="line">        hooked = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hooked) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.UncaughtExceptionHandler ueh = Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line">        <span class="keyword">if</span> (ueh == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(ueh);</span><br><span class="line">        hooked = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCutOffExceptionHandler</span><span class="params">(CutOffExceptionHandler cutOffExceptionHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cutOffExceptionHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        exceptionHandlers.add(cutOffExceptionHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCutOffExceptionHandler</span><span class="params">(CutOffExceptionHandler cutOffExceptionHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cutOffExceptionHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        exceptionHandlers.remove(cutOffExceptionHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>对于崩溃,这两种方法只是避险的手段,而在我们的开发中,通过严谨的代码审查和测试,在上线之前解决问题,才是最好的选择.以上方法除了保护崩溃意外,还可以统计错误上报:<br>使用方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CrashHookImpl.getInstance().hook();</span><br><span class="line">       <span class="comment">//保护所有的除零崩溃</span></span><br><span class="line">       CrashHookImpl.getInstance().addCutOffExceptionHandler(<span class="keyword">new</span> CrashHook.CutOffExceptionHandler() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCutOffException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (e.getClass().getName().equals(<span class="string">"java.lang.ArithmeticException"</span>)) &#123;</span><br><span class="line">                   <span class="comment">//返回true,截断崩溃</span></span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//统计上报</span></span><br><span class="line">       CrashHookImpl.getInstance().addCutOffExceptionHandler(<span class="keyword">new</span> CrashHook.CutOffExceptionHandler() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCutOffException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">               StackTraceElement[] elements = e.getStackTrace();</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">                  String msg= elements[i].getClassName()+elements[i].getMethodName()+elements[i].getLineNumber();</span><br><span class="line">                  <span class="comment">//上报错误</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//返回false 不截断</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android 降低minSdkVersion的版本</title>
    <url>/2017/08/07/android-%E9%99%8D%E4%BD%8EminSdkVersion%E7%9A%84%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>最近使用ceamera2开发相机，但因为他是支持的最小API是21，那么我想使用ceamera2的话我的APP不能在小于5.0的Android上运行了吗，答案当然是否定的，我们可以降低自己的minSdkVersion的版本，从而让用户在使用的时候还能使用除了有版本要求的其他功能。<br>我用了<a href="http://blog.csdn.net/qq_27512671/article/details/51026794" target="_blank" rel="noopener">http://blog.csdn.net/qq_27512671/article/details/51026794</a> 的例子来进行了这件事。</p>
<a id="more"></a>
<p>降低minSdkVersion的版本首先就是要在app/build.gradle里面做一下改动了，原来的minSdkVersion是21，我改成了18，也就时对应Android 4.3</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">       applicationId <span class="string">"com.iezview.threemodel"</span></span><br><span class="line">       minSdkVersion <span class="number">18</span></span><br><span class="line">       targetSdkVersion <span class="number">21</span></span><br><span class="line">       versionCode <span class="number">1</span></span><br><span class="line">       versionName <span class="string">"1.0"</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>改完之后代码就报红了，它提示我Call requires API level 21 (current min is 18)，也就是说他需要minSdkVersion是21而我现在的是18，那么怎么办呢，在类文件的开头加上这一句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Camera2Fragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">	。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后对于低于LOLLIPOP版本的怎么办呢，可以在调用它的地方给用户个提示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"Android系统版本不不足，无法使用此功能"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            TextView view = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">            view.setText(<span class="string">"Android系统版本不对"</span>);</span><br><span class="line">            view.setGravity(Gravity.CENTER);</span><br><span class="line">            view.setLayoutParams(<span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));</span><br><span class="line">            setContentView(view);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成，比较简单。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android代码执行adb shell终端命令（linux命令）并返回执行结果</title>
    <url>/2017/09/26/android%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Cadb-shell-%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%BF%94%E5%9B%9E%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/</url>
    <content><![CDATA[<h2 id="2020年6月2日17-37-27更新："><a href="#2020年6月2日17-37-27更新：" class="headerlink" title="2020年6月2日17:37:27更新："></a>2020年6月2日17:37:27更新：</h2><blockquote>
<p>这篇博文还是有挺多人看的，但之前写的方法其实比较早还是有点问题的，后面我又优化了下工具类。<br>后来我无意间看到一个之前看到非Root运行Adb的技巧，算是黑科技吧，亲测可用，放到了另一篇博文。转发的，大家可以研究研究。<br>非root直接在手机端运行adb命令：地址：<a href="https://miqt.github.io/2020/06/02/高级权限命令，例如修改手机设置等（转）/">https://miqt.github.io/2020/06/02/高级权限命令，例如修改手机设置等（转）/</a></p>
</blockquote>
<hr>
<p>在做Android开发板相关的开发需求的时候，我们有的时候需要去到Android系统的一个linux终端（adbshell）里面来执行一些命令，以便于查看部分文件内容或者修改部分文件权限等需求，通常我们可以使用Android studio自带的terminal工具运行先adb shell 命令来进行</p>
<a id="more"></a>
<p><img src="%5Cblogimgs%5Cterminal.png" alt="android studio terminal工具"></p>
<p>这样不好的就是我们可能有的操作就要每次设备重启的时候都要手动的敲一遍这样的代码，十分麻烦。那么怎么才能让app启动的时候自己来运行这些命令呢？<br>一番查资料，终于找到了，主要是使用到了_java.lang.Process_这个类，通过使用Runtime.getRuntime().exec(“su”);这个方法，我们就能获得Process的一个实例，通过这个Process的实例，我们就可以获取命令终端的输入输出流来提交命令和获取命令执行结果啦。  </p>
<h3 id="RootCmd工具类"><a href="#RootCmd工具类" class="headerlink" title="RootCmd工具类"></a>RootCmd工具类</h3><p>注意：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">"su"</span>);</span><br></pre></td></tr></table></figure>
<p>这行代码只能在已经root的设备上才能运行，没有root的设备运行会抛出异常。</p>
<p>下面来看它的具体实现代码吧，我把它封装成了一个工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Android运行linux命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RootCmd</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"RootCmd"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> mHaveRoot = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   判断机器Android是否已经root，即是否获取root权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">haveRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mHaveRoot) &#123;</span><br><span class="line">            <span class="keyword">int</span> ret = execRootCmdSilent(<span class="string">"echo test"</span>); <span class="comment">// 通过执行测试命令来检测</span></span><br><span class="line">            <span class="keyword">if</span> (ret != -<span class="number">1</span>) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"have root!"</span>);</span><br><span class="line">                mHaveRoot = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"not root!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"mHaveRoot = true, have root!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mHaveRoot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 执行命令并且输出结果</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">execRootCmd</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line">        DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(<span class="string">"su"</span>);<span class="comment">// 经过Root处理的android系统即有su命令</span></span><br><span class="line">            dos = <span class="keyword">new</span> DataOutputStream(p.getOutputStream());</span><br><span class="line">            dis = <span class="keyword">new</span> DataInputStream(p.getInputStream());</span><br><span class="line"></span><br><span class="line">            Log.i(TAG, cmd);</span><br><span class="line">            dos.writeBytes(cmd + <span class="string">"\n"</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">            dos.writeBytes(<span class="string">"exit\n"</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = dis.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.d(<span class="string">"result"</span>, line);</span><br><span class="line">                result += line;</span><br><span class="line">            &#125;</span><br><span class="line">            p.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 执行命令但不关注结果输出</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execRootCmdSilent</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">        DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(<span class="string">"su"</span>);</span><br><span class="line">            dos = <span class="keyword">new</span> DataOutputStream(p.getOutputStream());</span><br><span class="line"></span><br><span class="line">            Log.i(TAG, cmd);</span><br><span class="line">            dos.writeBytes(cmd + <span class="string">"\n"</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">            dos.writeBytes(<span class="string">"exit\n"</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">            p.waitFor();</span><br><span class="line">            result = p.exitValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在app启动的onCreate（）方法中，来执行linux命令，注意命令的结尾要加\n才表示执行。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> : <span class="type">Application</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line">				<span class="comment">//修改/dev/bus/usb/文件夹的权限，注意添加\n</span></span><br><span class="line">        <span class="keyword">val</span> commend = <span class="string">"chmod 777 /dev/bus/usb/ -R \n"</span></span><br><span class="line">        <span class="keyword">val</span> result = RootCmd.execRootCmd(commend)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>亲测以上内容linux的大部分的命令都可以执行，但有一部分命令却执行不了，例如给一块硬盘分区：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行</span><br><span class="line">127|rk3399_firefly_box:&#x2F; # fdisk &#x2F;dev&#x2F;sda</span><br><span class="line">输出</span><br><span class="line">sh: fdisk: not found</span><br></pre></td></tr></table></figure>
<p>不知道这是为什么，使用android studio terminal工具也是同样的结果。有知道的也请麻烦解答。</p>
<blockquote>
<p>本文出自：<a href="http://imaster.top" target="_blank" rel="noopener">http://imaster.top</a><br>转载请注明出处</p>
</blockquote>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android开发板挂载SSD硬盘</title>
    <url>/2017/04/08/android%E5%BC%80%E5%8F%91%E7%89%88%E6%8C%82%E8%BD%BDSSD%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<p>利用配的转接板装上固态盘后。设备启动后没有识别硬盘<br>固态盘的型号是金泰克 P600 M.2 2280 PCIe3.0X4</p>
<p>android开发板识别挂载的固态盘的方法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果资源管理器上没有PCIE项，可以先看看识别到nvme设备没有：</span><br><span class="line">rk3399_firefly_mipi_box:&#x2F; # ls &#x2F;dev&#x2F;block&#x2F;nvme0n1*     有的话会有类似这种输出：                  </span><br><span class="line">&#x2F;dev&#x2F;block&#x2F;nvme0n1 &#x2F;dev&#x2F;block&#x2F;nvme0n1p1 &#x2F;dev&#x2F;block&#x2F;nvme0n1p1</span><br><span class="line">如果没有nvme设备，请先确定SSD是否正确连接到开发板，或者SSD拿到电脑上测试是否可用。</span><br><span class="line"></span><br><span class="line">有设备，但资源管理器上没有PCIE项的话可以尝试格式化SSD（有风险，注意数据备份），fdisk具体使用方法请自行搜索：</span><br><span class="line">rk3399_firefly_mipi_box:&#x2F; # busybox fdisk  &#x2F;dev&#x2F;block&#x2F;nvme0n1p1              </span><br><span class="line"></span><br><span class="line">The number of cylinders for this disk is set to 59831.</span><br><span class="line">There is nothing wrong with that, but this is larger than 1024,</span><br><span class="line">and could in certain setups cause problems with:</span><br><span class="line">1) software that runs at boot time (e.g., old versions of LILO)</span><br><span class="line">2) booting and partitioning software from other OSs</span><br><span class="line">   (e.g., DOS FDISK, OS&#x2F;2 FDISK)</span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Command action</span><br><span class="line">   e   extended</span><br><span class="line">   p   primary partition (1-4)</span><br><span class="line">e</span><br><span class="line">Partition number (1-4): 1</span><br><span class="line">First cylinder (1-59831, default 1):</span><br><span class="line">Using default value 1</span><br><span class="line">Last cylinder or +size or +sizeM or +sizeK (1-59831, default 59831):</span><br><span class="line">Using default value 59831</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line"></span><br><span class="line">Disk &#x2F;dev&#x2F;block&#x2F;nvme0n1p1: 62.7 GB, 62737350656 bytes</span><br><span class="line">64 heads, 32 sectors&#x2F;track, 59831 cylinders</span><br><span class="line">Units &#x3D; cylinders of 2048 * 512 &#x3D; 1048576 bytes</span><br><span class="line"></span><br><span class="line">                Device Boot      Start         End      Blocks  Id System</span><br><span class="line">&#x2F;dev&#x2F;block&#x2F;nvme0n1p1p1               1       59831    61266928   5 Extended</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table</span><br><span class="line">fdisk: WARNING: rereading partition table failed, kernel still uses old table: Invalid argument</span><br><span class="line"></span><br><span class="line">格式化为FAT32：</span><br><span class="line">1|rk3399_firefly_mipi_box:&#x2F; # mkdosfs &#x2F;dev&#x2F;block&#x2F;nvme0n1p1                     </span><br><span class="line">opening &#x2F;dev&#x2F;block&#x2F;nvme0n1p1</span><br><span class="line">&#x2F;dev&#x2F;block&#x2F;nvme0n1p1: 122414304 sectors in 7650894 FAT32 clusters (8192 bytes&#x2F;cluster)</span><br><span class="line">MBR type: 11</span><br><span class="line">bps&#x3D;512 spc&#x3D;16 res&#x3D;32 nft&#x3D;2 mid&#x3D;0xf0 spt&#x3D;122533888 hds&#x3D;0 hid&#x3D;0 bsec&#x3D;122533888 bspf&#x3D;59776 rdcl&#x3D;2 infs&#x3D;1 bkbs&#x3D;2</span><br><span class="line"></span><br><span class="line">尝试手动挂载：</span><br><span class="line">rk3399_firefly_mipi_box:&#x2F; # mkdir &#x2F;data&#x2F;nvme</span><br><span class="line">rk3399_firefly_mipi_box:&#x2F; # busybox mount &#x2F;dev&#x2F;block&#x2F;nvme0n1p1  &#x2F;data&#x2F;nvme</span><br><span class="line">如果成功输入mount命令会有下面信息输出：</span><br><span class="line">&#x2F;dev&#x2F;block&#x2F;nvme0n1p1 on &#x2F;data&#x2F;nvme type vfat (rw,relatime,fmask&#x3D;0000,dmask&#x3D;0000,allow_utime&#x3D;0022,codepage&#x3D;437,iocharset&#x3D;iso88</span><br><span class="line">59-1,shortname&#x3D;mixed,errors&#x3D;remount-ro)</span><br><span class="line">可以的话重启系统，资源管理器上应该有个PCIE的选项。</span><br><span class="line">NOTE：目前资源管理器在NVME多个分区时，只挂载第一个分区</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>桥</title>
    <url>/2007/10/17/model/</url>
    <content><![CDATA[<iframe width="340" height="340*3/4" src="https://sketchfab.com/models/02e3be8cc12c4c84a3ee04854fdb8250/embed?annotation=1&amp;annotation_cycle=5&amp;autospin=0.2&amp;autostart=1&amp;preload=1" frameborder="0" allowvr allowfullscreen mozallowfullscreen="true" webkitallowfullscreen="true" onmousewheel=""></iframe>
]]></content>
  </entry>
  <entry>
    <title>当系统时间小于1970年</title>
    <url>/2018/10/16/android%E6%BA%90%E7%A0%81%E6%97%A5%E8%AE%B0-SystemClock-java-sleep/</url>
    <content><![CDATA[<p>我们知道，计算器的时间是从1970年开始的，而java获取时间的方法System.currentTimeMillis()的返回值也是从0开始的，0就代表1970年一月一日。</p>
<p>那么这个如果值为负数会怎么样？1969年？</p>
<p>今天在读SystemServer源码的时候看到其中run方法修复时间的一段。它是这么处理的。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If a device's clock is before 1970 (before 0), a lot of</span></span><br><span class="line"><span class="comment">// APIs crash dealing with negative numbers, notably</span></span><br><span class="line"><span class="comment">// java.io.File#setLastModified, so instead we fake it and</span></span><br><span class="line"><span class="comment">// hope that time from cell towers or NTP fixes it shortly.</span></span><br><span class="line"><span class="keyword">if</span> (System.currentTimeMillis() &lt; EARLIEST_SUPPORTED_TIME) &#123;</span><br><span class="line">    Slog.w(TAG, <span class="string">"System clock is before 1970; setting to 1970."</span>);</span><br><span class="line">    SystemClock.setCurrentTimeMillis(EARLIEST_SUPPORTED_TIME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是手机的时钟可能是小于1970年的，但如果小于这个值的话java.io.File#setLastModified则会引起崩溃，因此android源码在这里加了个判断，如果时间小于1970，则把时间设置为1970年。。（注释是说1970年，但实际上拿<code>EARLIEST_SUPPORTED_TIME</code>这个时间戳计算是1972/9/27 8:0:0,不知道为什么是这个时间，难道这就是口是心非？？）</p>
<p>具体就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The earliest supported time.  We pick one day into 1970, to</span></span><br><span class="line">    <span class="comment">// give any timezone code room without going into negative time.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EARLIEST_SUPPORTED_TIME = <span class="number">86400</span> * <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>


<p>实现设置CurrentTimeMillis的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the current wall time, in milliseconds.  Requires the calling</span></span><br><span class="line"><span class="comment"> * process to have appropriate permissions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> if the clock was successfully set to the specified time.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setCurrentTimeMillis</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span><br><span class="line">    IBinder b = ServiceManager.getService(Context.ALARM_SERVICE);</span><br><span class="line">    IAlarmManager mgr = IAlarmManager.Stub.asInterface(b);</span><br><span class="line">    <span class="keyword">if</span> (mgr == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mgr.setTime(millis);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"Unable to set RTC"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"Unable to set RTC"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键的就是<code>mgr.setTime(millis);</code>设置了时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setTime</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    Parcel _data = Parcel.obtain();</span><br><span class="line">    Parcel _reply = Parcel.obtain();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> _result;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        _data.writeInterfaceToken(<span class="string">"android.app.IAlarmManager"</span>);</span><br><span class="line">        _data.writeLong(millis);</span><br><span class="line">        <span class="keyword">this</span>.mRemote.transact(<span class="number">2</span>, _data, _reply, <span class="number">0</span>);</span><br><span class="line">        _reply.readException();</span><br><span class="line">        _result = <span class="number">0</span> != _reply.readInt();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        _reply.recycle();</span><br><span class="line">        _data.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>编程碎碎念</title>
    <url>/2018/01/25/coding_list/</url>
    <content><![CDATA[<p>主要把平时开发中一些细碎的知识点记录下来,方便以后查阅.</p>
<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="解决外置SDCard无法访问的问题"><a href="#解决外置SDCard无法访问的问题" class="headerlink" title="解决外置SDCard无法访问的问题"></a>解决外置SDCard无法访问的问题</h2><ul>
<li><a href="http://zhixinliu.com/2015/02/24/2015-02-24-SAF-and-client-code/" target="_blank" rel="noopener" title="Android SAF介绍以及SD Card的访问实例">Android SAF介绍以及SD Card的访问实例</a></li>
<li><a href="https://developer.android.google.cn/guide/topics/providers/document-provider.html" target="_blank" rel="noopener" title="存储访问框架">存储访问框架</a></li>
</ul>
<h2 id="给未签名的空包签名"><a href="#给未签名的空包签名" class="headerlink" title="给未签名的空包签名"></a>给未签名的空包签名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jarsigner -verbose -keystore [keystorePath] -signedjar [apkOut] [apkIn] [alias]</span><br></pre></td></tr></table></figure>
<ul>
<li><p>keystorePath参数代表keyStore的绝对路径，如D:\keystore   </p>
</li>
<li><p>apkOut参数代表签名后的apk路径，如D:\signed.apk   </p>
</li>
<li><p>apkin参数代表在腾讯应用中心下载的未签名apk，默认名称为tap_unsign.apk   </p>
</li>
<li><p>alias参数代表签名用的整数名称（创建keyStore时所填写），如timdong   </p>
<a id="more"></a>

</li>
</ul>
<h2 id="调用webview打开链接或下载"><a href="#调用webview打开链接或下载" class="headerlink" title="调用webview打开链接或下载"></a>调用webview打开链接或下载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val intent &#x3D; Intent()</span><br><span class="line">intent.action &#x3D; &quot;android.intent.action.VIEW&quot;</span><br><span class="line">intent.data &#x3D; Uri.parse(url)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure>
<h2 id="让webview加载url的时候判断如果目标是文件直接触发下载"><a href="#让webview加载url的时候判断如果目标是文件直接触发下载" class="headerlink" title="让webview加载url的时候判断如果目标是文件直接触发下载"></a>让webview加载url的时候判断如果目标是文件直接触发下载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">web_view.setDownloadListener &#123; url,</span><br><span class="line">                               userAgent,</span><br><span class="line">                               contentDisposition,</span><br><span class="line">                               mimetype,</span><br><span class="line">                               contentLength</span><br><span class="line">    -&gt;</span><br><span class="line">    downloadTo(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="关于代码混淆"><a href="#关于代码混淆" class="headerlink" title="关于代码混淆"></a>关于代码混淆</h2><p><a href="http://www.liqingbo.cn/blog-1263.html" target="_blank" rel="noopener" title="PHP给源代码加密的几种方法">PHP给源代码加密的几种方法</a></p>
<hr>
<h2 id="6行代码app直达小程序"><a href="#6行代码app直达小程序" class="headerlink" title="6行代码app直达小程序"></a>6行代码app直达小程序</h2><p>不需要SDK</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContentResolver contentResolver = getContentResolver();</span><br><span class="line">Uri uri = Uri.parse(<span class="string">"content://com.tencent.mm.sdk.comm.provider/launchWXMiniprogram"</span>);</span><br><span class="line">String[] strings = <span class="keyword">new</span> String[]&#123;appid, xcxId, <span class="string">""</span>, <span class="string">""</span> + <span class="number">0</span>&#125;;</span><br><span class="line">Cursor cursor;</span><br><span class="line"><span class="keyword">if</span> ((cursor = contentResolver.query(uri, (String[]) <span class="keyword">null</span>, (String) <span class="keyword">null</span>, strings, (String) <span class="keyword">null</span>)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    cursor.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>java 注解使用与注意事项</title>
    <url>/2019/04/16/java-%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E4%B8%8E%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>想拥有一个star过千的项目好难啊，费劲巴力的整出来star几天才有一个[捂脸]，不过咱也不气馁，毕竟开发个东西出来对自己的技术也是个帮助不是。  </p>
<p><a href="https://github.com/miqt/WandFix" target="_blank" rel="noopener">wandfix</a>开发了有一段时间了，在开发和使用的过程中也发现了一些问题，特别是帮助了我学习对于java 注解的使用。今天就打算分享我在这个项目中对于注解使用。   </p>
<p>java注解在部分情况下是个可以帮助我们提升开发效率的东西，比如大名鼎鼎的控件绑定库 <a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">ButterKnife</a> 当下比较热门的网络请求库<a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">retrofit</a> ，在使用它们的过程中我们可以使用注解来非常方便的实现一些事情，比如最经典的findviewbyid。  </p>
<p>我认为使用注解，一定要注意的有3点：  </p>
<ol>
<li>注解的元素</li>
<li>指定注解的使用范围，绑定在方法上还是class上等</li>
<li>指定注解的保留环境</li>
</ol>
<a id="more"></a>

<h2 id="定义一个注解"><a href="#定义一个注解" class="headerlink" title="定义一个注解"></a>定义一个注解</h2><p>跟定义一个 class 差不多，class 关键字改成 @interface 就成了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindProxy &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置注解的元素"><a href="#设置注解的元素" class="headerlink" title="设置注解的元素"></a>设置注解的元素</h2><p>注解的参数仅支持以下数据类型：</p>
<ul>
<li>Class</li>
<li>String</li>
<li>java八种基本类型</li>
<li>enum</li>
<li>Annotation</li>
<li>上面类型的数组</li>
</ul>
<p>注解的元素对默认值还有限制，元素不能有不确定的值。也就是说，元素必须要么具有默认值，要么在使用注解时提供元素的值，对于非基本类型的元素，无论是在源代码中声明，还是在注解接口中定义默认值，都不能以null作为值，元素使用 default 关键字设置默认值，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindProxy &#123;</span><br><span class="line">    <span class="function">ParentalEntrustmentLevel <span class="title">level</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="keyword">default</span> ParentalEntrustmentLevel.NEVER</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="指定注解的使用范围，绑定在方法上还是class上等"><a href="#指定注解的使用范围，绑定在方法上还是class上等" class="headerlink" title="指定注解的使用范围，绑定在方法上还是class上等"></a>指定注解的使用范围，绑定在方法上还是class上等</h2><p>使用 @Target 指定注解的使用范围:</p>
<p>取值(ElementType)有：</p>
<ol>
<li>CONSTRUCTOR:用于描述构造器</li>
<li>FIELD:用于描述域</li>
<li>LOCAL_VARIABLE:用于描述局部变量</li>
<li>METHOD:用于描述方法</li>
<li>PACKAGE:用于描述包</li>
<li>PARAMETER:用于描述参数</li>
<li>TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindProxy &#123;</span><br><span class="line">    <span class="comment">//class name</span></span><br><span class="line">    <span class="function">Class <span class="title">clazz</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双亲委托禁用级别</span></span><br><span class="line">    <span class="function">ParentalEntrustmentLevel <span class="title">level</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="keyword">default</span> ParentalEntrustmentLevel.NEVER</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指定注解的保留环境"><a href="#指定注解的保留环境" class="headerlink" title="指定注解的保留环境"></a>指定注解的保留环境</h2><p>指定注解的保留环境使用@Retention 元注解，这个务必要添加，因为如果不添加，注解当代码编译运行后可能被丢弃而失效。<br>取值（RetentionPoicy）有：  </p>
<ol>
<li>SOURCE:在源文件中有效（即源文件保留）</li>
<li>CLASS:在class文件中有效（即class保留）</li>
<li>RUNTIME:在运行时有效（即运行时保留）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindProxy &#123;</span><br><span class="line">    <span class="comment">//class name</span></span><br><span class="line">    <span class="function">Class <span class="title">clazz</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双亲委托禁用级别</span></span><br><span class="line">    <span class="function">ParentalEntrustmentLevel <span class="title">level</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="keyword">default</span> ParentalEntrustmentLevel.NEVER</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h2><p>以上的@BindProxy注解是用来实现绑定activity代理的，activity代理就是实现一个类，代理activity生命周期的所有事物，而activity的生命周期中仅仅是将这个事件交给代理去处理。</p>
<p>被代理的 activity 代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定代理类</span></span><br><span class="line"><span class="meta">@BindProxy</span>(clazz = TextActivityProxy<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//必须继承 <span class="title">ProxyActivity</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TextActivity</span> <span class="keyword">extends</span> <span class="title">ProxyActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里什么都不用写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我在ProxyActivity 中进行了绑定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    BindProxy proxyInfo = <span class="keyword">this</span>.getClass().getAnnotation(BindProxy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//如果这个类没添加这个注解，证明这个activity不需要代理，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (proxyInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String proxyName = <span class="keyword">this</span>.getClass().getAnnotation(BindProxy<span class="class">.<span class="keyword">class</span>).<span class="title">clazz</span>().<span class="title">getName</span>()</span>;</span><br><span class="line">    ParentalEntrustmentLevel level = <span class="keyword">this</span>.getClass().getAnnotation(BindProxy<span class="class">.<span class="keyword">class</span>).<span class="title">level</span>()</span>;</span><br><span class="line">    <span class="keyword">if</span> (proxyName != <span class="keyword">null</span> &amp;&amp; proxyName.length() != <span class="number">0</span>) &#123;</span><br><span class="line">        proxy = ObjectFactory.make(proxyName, level, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (proxy != <span class="keyword">null</span>) &#123;</span><br><span class="line">            proxy.onCreate(savedInstanceState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>BindProxy proxyInfo = this.getClass().getAnnotation(BindProxy.class);</code>这一句是拿到了注解中的值，然后通过反射进行了绑定。</p>
<p>这只是一个小小的例子，关于 @注解 还有更多的地方等你发掘。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>java实现计算复杂数学表达式</title>
    <url>/2018/10/16/math-calculate/</url>
    <content><![CDATA[<p>用过python或者PHP的同学应该知道，他们有个eval函数，这个函数真的是好用啊，比如我算数的时候就喜欢用python的控制台来当做计算器。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;copyright&quot;, &quot;credits&quot; or &quot;license()&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; print(&#39;公积金每年存多少？&#39;,3500*0.12*2*12)</span><br><span class="line">公积金每年存多少？ 10080.0</span><br><span class="line">&gt;&gt;&gt; print(&#39;余额宝年利率0.27的话，一万每天利息多少？&#39;,1*270&#x2F;365)</span><br><span class="line">余额宝年利率0.27的话，一万每天利息多少？ 0.7397260273972602</span><br><span class="line">&gt;&gt;&gt; 400+10&#x2F;(120-20)+400</span><br><span class="line">800.1</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>但java貌似没有。   </p>
<p>以下是我自己的实现。</p>
<a id="more"></a>

<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>思路就是分两步来进行</p>
<ol>
<li>翻译输入的数学表达式，也就是中缀表达式转后缀表达式。例如 <code>a+b*(c-d)</code> 转为后缀表达式就是 <code>abcd-*+</code></li>
<li>对后缀表达式计算结果。这里用到了栈存储计算结果，每次都是对两个数计算，例如 <code>abcd-*+</code> ，计算方法是先从头遍历，数字直接入栈，当遇到计算符，则从栈顶取出来两个数计算然后再把结果压栈，最终全部计算完之后栈里面只剩下一个元素就是结果。</li>
</ol>
<h3 id="1-中缀表达式转后缀表达式"><a href="#1-中缀表达式转后缀表达式" class="headerlink" title="1.中缀表达式转后缀表达式"></a>1.中缀表达式转后缀表达式</h3><p>实现转换的基本步骤如下：</p>
<ol>
<li>初始化一个运算符栈。</li>
<li>从算数表达式输入的字符串中依次从左向右每次读取一个字符。</li>
<li>如果当前字符是操作数，则直接填写到后缀表达式。</li>
<li>如果当前字符是（左括号，将其压入运算符栈（第一步定义）。   </li>
<li>如果当前字符为运算符，则  <ol>
<li>当运算符栈为空，则将其压入运算符栈。</li>
<li>当此运算符的优先级高于栈顶元素的时候，则将此运算符压入运算符栈；否则，弹出栈顶运算符到后缀表达式，并且将当前运算符压栈。回到步骤2.</li>
</ol>
</li>
<li>如果当前字符是）右括号，反复将栈顶元素弹出到后缀表达式，直到栈顶元素是左括号（为止，并将左括号从栈中弹出丢弃。</li>
<li>如果读取还未完成，回到步骤2.</li>
<li>如果读取完成，则将栈中剩余的运算符依次弹出到后缀表达式。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">transfer</span><span class="params">(String mathStr)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 标记输出结果</span></span><br><span class="line">		StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		<span class="comment">// 1.初始化一个运算符栈。</span></span><br><span class="line">		Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">		<span class="keyword">if</span> (mathStr == <span class="keyword">null</span> || mathStr.length() == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">		System.out.println(<span class="string">"中缀表达式："</span> + mathStr);</span><br><span class="line">		<span class="keyword">char</span>[] arr = mathStr.toCharArray();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">			<span class="comment">// 2.从算数表达式输入的字符串中依次从左向右每次读取一个字符。</span></span><br><span class="line">			<span class="keyword">char</span> s = arr[i];</span><br><span class="line">			<span class="comment">// 3.如果当前字符是操作数，则直接填写到后缀表达式。</span></span><br><span class="line">			<span class="keyword">if</span> (Character.isDigit(s)) &#123;</span><br><span class="line">				result.append(s);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 4.如果当前字符是（左括号，将其压入运算符栈（第一步定义）。</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'('</span> == s) &#123;</span><br><span class="line">				stack.push(s);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 5.如果当前字符为运算符，则</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'+'</span> == s || <span class="string">'-'</span> == s || <span class="string">'*'</span> == s || <span class="string">'/'</span> == s) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">					<span class="keyword">char</span> stackTop = stack.pop();</span><br><span class="line">					<span class="comment">// 当此运算符的优先级高于栈顶元素的时候，则将此运算符压入运算符栈</span></span><br><span class="line">					<span class="keyword">if</span> (compare(s, stackTop)) &#123;</span><br><span class="line">						stack.push(stackTop);</span><br><span class="line">						stack.push(s);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">// 否则，弹出栈顶运算符到后缀表达式，并且将当前运算符压栈。回到步骤2.</span></span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						result.append(stackTop);</span><br><span class="line">						stack.push(s);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 5.1.当运算符栈为空，则将其压入运算符栈。</span></span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					stack.push(s);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 6.如果当前字符是）右括号，反复将栈顶元素弹出到后缀表达式，直到栈顶元素是左括号（为止，并将左括号从栈中弹出丢弃。</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">')'</span>) &#123;</span><br><span class="line">				<span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">					<span class="keyword">char</span> item = stack.pop();</span><br><span class="line">					<span class="keyword">if</span> (item != <span class="string">'('</span>) &#123;</span><br><span class="line">						result.append(item);</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">			result.append(stack.pop());</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"后缀表达式："</span> + result.toString());</span><br><span class="line">		<span class="keyword">return</span> result.toString();</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">//比较优先级</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">char</span> s, <span class="keyword">char</span> item)</span> </span>&#123;</span><br><span class="line">  		<span class="keyword">if</span> (item == <span class="string">'('</span>) &#123;</span><br><span class="line">  			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  		&#125;</span><br><span class="line">  		<span class="keyword">if</span> (s == <span class="string">'*'</span> || s == <span class="string">'/'</span>) &#123;</span><br><span class="line">  			<span class="keyword">if</span> (item == <span class="string">'+'</span> || item == <span class="string">'-'</span>) &#123;</span><br><span class="line">  				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  			&#125;</span><br><span class="line">  		&#125;</span><br><span class="line">  		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  	&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-计算结果"><a href="#2-计算结果" class="headerlink" title="2.计算结果"></a>2.计算结果</h3><p>每次都是对两个数计算，例如 <code>abcd-*+</code> ，计算方法是先从头遍历，数字直接入栈，当遇到计算符，则从栈顶取出来两个数计算然后再把结果压栈，最终全部计算完之后栈里面只剩下一个元素就是结果。   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String transferToPostfix)</span> </span>&#123;</span><br><span class="line">		Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">		<span class="keyword">char</span>[] c = transferToPostfix.toCharArray();</span><br><span class="line">		<span class="keyword">int</span> a, b;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">			<span class="keyword">switch</span> (c[i]) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">				a = Integer.valueOf(stack.pop().toString());</span><br><span class="line">				b = Integer.valueOf(stack.pop().toString());</span><br><span class="line">				stack.push(b + a);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">				a = Integer.valueOf(stack.pop().toString());</span><br><span class="line">				b = Integer.valueOf(stack.pop().toString());</span><br><span class="line">				stack.push(b - a);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">				a = Integer.valueOf(stack.pop().toString());</span><br><span class="line">				b = Integer.valueOf(stack.pop().toString());</span><br><span class="line">				stack.push(b * a);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">				a = Integer.valueOf(stack.pop().toString());</span><br><span class="line">				b = Integer.valueOf(stack.pop().toString());</span><br><span class="line">				stack.push(b / a);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				Character d = c[i];</span><br><span class="line">				stack.push(Integer.valueOf(d.toString()));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> stack.pop();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"计算结果："</span> + calculate(transferToPostfix(<span class="string">"1+2*(3-4)"</span>)));</span><br><span class="line">  System.out.println(<span class="string">"计算结果："</span> + calculate(transferToPostfix(<span class="string">"3-2/3"</span>)));</span><br><span class="line">  System.out.println(<span class="string">"计算结果："</span> + calculate(transferToPostfix(<span class="string">"2*3-9/(4-1)"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--------------</span><br><span class="line">中缀表达式：1+2*(3-4)</span><br><span class="line">后缀表达式：1234-*+</span><br><span class="line">计算结果：-1</span><br><span class="line">--------------</span><br><span class="line">中缀表达式：3-2&#x2F;3</span><br><span class="line">后缀表达式：323&#x2F;-</span><br><span class="line">计算结果：3</span><br><span class="line">--------------</span><br><span class="line">中缀表达式：2*3-9&#x2F;(4-1)</span><br><span class="line">后缀表达式：23*941-&#x2F;-</span><br><span class="line">计算结果：3</span><br></pre></td></tr></table></figure>


<p>这里我使用了char来存储运算单位，因此只能运算个位数，如果要运算多位数或者是带小数的，把char类型换成自己封装的就可以了，思路都是一样的。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 插件Debug方法</title>
    <url>/2020/12/29/plugin-debug/</url>
    <content><![CDATA[<p>以前开发Android字节码插件都是盲目调试，特别麻烦，今天看ByteX开源群里相关讨论，这里记录下。</p>
<p>从 <a href="https://github.com/bytedance/ByteX/blob/master/wiki/ByteX-Developer-API-zh.md" target="_blank" rel="noopener">ByteX</a> 看来的方法。大家也可以去源地址看。</p>
<a id="more"></a>

<p>插件调试步骤：</p>
<ol>
<li>在AndroidStudio新建run configuration.<br><img src="/blogimgs/AS_edit_configuration.png" alt="source/blogimgs/AS_edit_configuration.png"><br><img src="/blogimgs/AS_remote_debug.png" alt="source/blogimgs/AS_remote_debug.png"></li>
</ol>
<ol start="2">
<li><p>把插件本地发布然后接入到app工程里之后,在命令行执行构建命令,末尾拼上这一串参数,比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;gradlew clean :example:assembleDouyinCnRelease -Dorg.gradle.debug&#x3D;true --no-daemon</span><br></pre></td></tr></table></figure>
<p>我这里是在app模块中接入的，我使用的以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gradlew clean :app:assemble -Dorg.gradle.debug&#x3D;true --no-daemon</span><br></pre></td></tr></table></figure>
</li>
<li><p>马上切换到刚刚创建的Configuration,点击debug按钮.<br><img src="/blogimgs/AS_debug_button.png" alt="source/blogimgs/AS_debug_button.png"></p>
</li>
<li><p>成功进入插件Debug<br><img src="/blogimgs/plugin_debug_result.png" alt="source/blogimgs/plugin_debug_result.png"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>一点设计 —— App\Tour</title>
    <url>/2017/05/08/tour/</url>
    <content><![CDATA[<iframe src="https://modao.cc/app/DBqBck5Rah9TWrzE1Azzc9RHO0blZYP/embed" width="488" height="900" allowTransparency="true" frameborder="0"></iframe>
<a id="more"></a>

<p><a href="https://modao.cc/app/FUNOxoKfTHwhC0LvCSYQPNaMAKAsLZS" target="_blank" rel="noopener">点击跳转到墨刀查看&gt;&gt;</a>  </p>
<p>设想的一款旅游类app原型图，旨在遵从Material Design UI的设计风格，让用户可以以一个简单的即时的方式，展示自己的美丽旅行。水平有限，还需进步。</p>
]]></content>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>android基于mvp的热修复方案构思，不使用第三方</title>
    <url>/2018/08/01/mvp-hot-fix/</url>
    <content><![CDATA[<p>核心思想就是Presenter层只写接口，然后使用java的classloader机制加载Presenter层的实现类来产生对象然后赋值给接口指针调用。通过不停的更换classloader所加载的文件，但调用方法一致，来达到热修复的目的。   </p>
<p>下面是我画的一个整体的结构图。  </p>
<p><img src="https://miqt.github.io/blogimgs/mvp_hot_fix.jpg" alt="mvphotfix结构图">    </p>
<a id="more"></a>

<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>现在开发android项目大部分都已经由mvc转移到了mvp，关于mvp是什么大致也不必多说了，无非三个层：  </p>
<ul>
<li>m：model层，一般封装对数据的操作，增删改查，接口访问等等。</li>
<li>v：view层，也就是视图层，视图层不主动做什么，只是根据某些事件作出对应的视图展示。</li>
<li>p：Presenter层，也就是逻辑层。</li>
</ul>
<p>图解(之前在别的博文看到的，觉得比较好就直接拿来用了):<br><img src="https://upload-images.jianshu.io/upload_images/2413316-e7fe02362c275ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="MVP"></p>
<p>在mvp模式中，model层和view层不再有直接交互，而把相应的工作交给了“中间人”Presenter层来处理。<br>因此在我们的项目中，Presenter层可以说是一个改动比较频繁，逻辑比较复杂的一个模块。也是较容易出现问题的一个模块，对Presenter层实现热修复，对项目的稳定性是十分有利的。<br>总结一下：</p>
<ul>
<li>项目背景：mvp的项目。  </li>
<li>需求：在不修改model层和view层的基础上，实现对Presenter层的热修复。  </li>
</ul>
<h2 id="尝试实现"><a href="#尝试实现" class="headerlink" title="尝试实现"></a>尝试实现</h2><p>既然大体思路都有了，那么咱们就来尝试一下能不能行得通吧。做一个案例，功能非常简单，界面上一个按钮，点击按钮吐司一个字符串，这个字符串通过。   </p>
<h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><p>除了一路next之外我这里想说的实际上是项目module结构：<br><img src="https://miqt.github.io/blogimgs/20180801154218.png" alt="项目结构图">    </p>
<ul>
<li>app里面主要写项目的相关界面。</li>
<li>motorlib里面主要写presenter接口和热修复、classloadler等相关的代码，另外model层也可以在里面写，其实它们可以写在app里面，但这样组件化的话，更有利于解耦。  </li>
<li>motorhot这里就是写presenter的具体实现了，另外model层也可以在里面写，那样的话对于后台接口返回的数据格式变更等也可以进行修复了。  </li>
</ul>
<p>再设置一下这三个module之间的引用关系。</p>
<p>.\app\build.gradle</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F;只关心接口，不关心实现，因此只引用motorlib</span><br><span class="line">    implementation project(&#39;:motorlib&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>.\motorhot\build.gradle</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F;需要集成motorlib定义的接口，因此需要引用</span><br><span class="line">    implementation project(&#39;:motorlib&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>.\motorlib\build.gradle</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  ...</span><br><span class="line">  &#x2F;&#x2F;因为只定义接口，所以都不需要引用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-persenter接口"><a href="#2-persenter接口" class="headerlink" title="2.persenter接口"></a>2.persenter接口</h3><p>在motorlib中创建一个java接口，AppParsenter，里面只有一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppParsenter</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getStr</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-实现接口persenter接口"><a href="#3-实现接口persenter接口" class="headerlink" title="3.实现接口persenter接口"></a>3.实现接口persenter接口</h3><p>在motorlib中创建一个java类，实现AppParsenter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppParsenterImpl</span> <span class="keyword">implements</span> <span class="title">AppParsenter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello word !"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-热修复文件打包"><a href="#4-热修复文件打包" class="headerlink" title="4.热修复文件打包"></a>4.热修复文件打包</h3><p>在android studio中的右侧，打开Gradle一栏，然后点击（也可以直接运行gradlew命令<code>gradlew motorhot:assembleRelease</code>）：  </p>
<p><img src="https://miqt.github.io/blogimgs/20180801160206.png" alt="打包"><br>打包后的jar包文件存放在<code>.\motorhot\build\intermediates\bundles\release\classes.jar</code>  </p>
<p>拿到打包好的classes.jar,然后使用android sdk提供的dx.bat将jar包转换为dex：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CD ..\android\sdk\build-tools\20.0.0</span><br><span class="line">dx --dex --output&#x3D;..\hotfix.dex ..\classes.jar</span><br></pre></td></tr></table></figure>
<p>这样,用于热修复的.dex文件就打包完成了。</p>
<h3 id="5-ObjectFactory"><a href="#5-ObjectFactory" class="headerlink" title="5.ObjectFactory"></a>5.ObjectFactory</h3><p>因为dex的加载离不开<code>DexClassLoader</code>，因此我在这里先对DexClassLoader进行了一下封装：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Motor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> MotorListener listener;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Motor motor;</span><br><span class="line">    <span class="keyword">private</span> DexClassLoader mClassLoader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Motor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Motor <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (motor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Motor<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (motor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    motor = <span class="keyword">new</span> Motor();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> motor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, MotorListener listener)</span> </span>&#123;</span><br><span class="line">        get();</span><br><span class="line">        motor.context = context;</span><br><span class="line">        motor.listener = listener;</span><br><span class="line">        <span class="comment">//加载dex</span></span><br><span class="line">        motor.initClassLoader();</span><br><span class="line">        listener.initFnish();</span><br><span class="line">        <span class="comment">//todo 网络检查dex更新</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String dexDir = context.getCacheDir().getAbsolutePath() + <span class="string">"/dex/"</span>;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(dexDir);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        File dexFile = <span class="keyword">new</span> File(dir, <span class="string">"mydex.dex"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!(dexFile.exists() &amp;&amp; dexFile.isFile() &amp;&amp; dexFile.length() &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            copyFileFromAssets(context, <span class="string">"mydex.dex"</span>, dexFile.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line">        mClassLoader = <span class="keyword">new</span> DexClassLoader(</span><br><span class="line">                dexFile.getAbsolutePath(), context.getFilesDir().getAbsolutePath()</span><br><span class="line">                , <span class="keyword">null</span>, context.getClassLoader());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">copyFileFromAssets</span><span class="params">(Context context, String assetName, String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> bRet = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = context.getAssets().open(assetName);</span><br><span class="line"></span><br><span class="line">            File file = <span class="keyword">new</span> File(path);</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            <span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">64</span>];</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((i = is.read(temp)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                fos.write(temp, <span class="number">0</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">            fos.close();</span><br><span class="line">            is.close();</span><br><span class="line">            bRet = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bRet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DexClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mClassLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmClassLoader</span><span class="params">(DexClassLoader mClassLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mClassLoader = mClassLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MotorListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">initFnish</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">initError</span><span class="params">(Throwable throwable)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单例，首先从assets中把.dex文件拷贝到android的沙盒目录（android加载dex的时候有限制，必须是在沙盒目录中才能加载），然后构建好了mClassLoader就完成了。    </p>
<p>方便起见，热修复文件就不从网络下载了，因此直接把打包好的.dex拷贝到项目的assets文件夹中。   </p>
<p><img src="https://miqt.github.io/blogimgs/20180801165443.png" alt="打包">  </p>
<p>在motorlib中创建ObjectFactory，用来通过classloader生产对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">make</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;AppParsenter&gt; ap = (Class&lt;AppParsenter&gt;) Motor.get()</span><br><span class="line">                    .getClassLoader().loadClass(<span class="string">"com.example.motordex.AppParsenterImpl"</span>);</span><br><span class="line">            AppParsenter o = ap.newInstance();</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到了这里就可以注意到了，反射构建对象的时候<code>ap.newInstance();</code>没法传参数，因此对于Parsenter的实现类中，必须有一个无参的构造方法。</p>
<h3 id="6-运行"><a href="#6-运行" class="headerlink" title="6.运行"></a>6.运行</h3><p>app中新建一个activity，设置一个按钮然后添加点击事件：<br>layout/activity_main.xml  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:onClick</span>=<span class="string">"getStr"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"获取字符串"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>com.example.miqt.dexmvppdemo.MainActivity  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    AppParsenter ap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Motor.init(<span class="keyword">this</span>, <span class="keyword">new</span> Motor.MotorListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initFnish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ap = (AppParsenter) ObjectFactory.make(MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStr</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        String str = ap.getStr();</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, str, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://miqt.github.io/blogimgs/Screenshot_2018-08-01-17-11-50-936_com.example.mi.png" alt="打包"><br>修改motorhot中的AppParsenterImpl，模拟修复了一个bug：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppParsenterImpl</span> <span class="keyword">implements</span> <span class="title">AppParsenter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fix a bug！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重复4步骤，打包运行：<br><img src="https://miqt.github.io/blogimgs/Screenshot_2018-08-01-17-37-41-820_com.example.mi.png" alt="打包"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>事实证明这种构想完全可以实现，并且可以在不使用其他框架，达到热修复的目的，并且不仅仅是presenter层，在其他的层应用这种方式，也是可以的。</p>
<p>但实际上从上面的实践，也可以发现一些问题：</p>
<ol>
<li>dex文件线上下载或拷贝过程中如果损坏，则可能引起程序崩溃。不过我们可以使用对dex文件取hash码然后对比下载后的文件，如果不一致则证明出错，重新下载拷贝。解决这个问题。</li>
<li>dex暴露在用户手机沙盒目录中，而android的沙盒目录在root之后是可以直接访问的，因此有可能被人拿到dex反编译，修改逻辑搞破坏。并且因为反射的影响，motorhot中的类文件是不可以进行混淆的，因为混淆之后就会报找不到类的异常。不过关于这个也是有解决办法的，我想到的那就是对热修复文件加密，在loader之前再在内存中解密。这样别人没法知道加密规则，也就没法解密了。</li>
<li>双亲委托机制，在classloader加载外部dex之前会先检查本地是否已经存在同名的类，如果有则优先加载本地已经存在的类，因此在实际使用中我们最好还要禁用双亲委托机制。</li>
</ol>
<p>综上，本方案应该是可以在项目中实际应用的一个热修复方案。   </p>
<blockquote>
<p>完整代码：<a href="https://github.com/miqt/MVPHotFix" target="_blank" rel="noopener">https://github.com/miqt/MVPHotFix</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫爬取网站图片</title>
    <url>/2017/09/18/python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<blockquote>
<p>本文出处：<a href="http://blog.csdn.net/qq_27512671/article/details/78022625" target="_blank" rel="noopener">http://blog.csdn.net/qq_27512671/article/details/78022625</a></p>
</blockquote>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p>都让让都让让，老司机先来一发效果图<img src="/blogimgs/%E8%A1%A8%E6%83%85%E5%8C%85/%E6%96%9C%E7%9C%BC%E7%AC%91.png" alt="斜眼笑">源码最下方</p>
<p><img src="/blogimgs/%E6%96%97%E9%B1%BCtv%E7%88%AC%E5%8F%96%E7%BB%93%E6%9E%9C.png" alt="“斗鱼爬取结果效果图：）”"></p>
<a id="more"></a>

<p>实现思路分为三步走：  </p>
<ol>
<li><a href="#jump1">获取网页数据源</a>  </li>
<li><a href="#jump2">解析网页源数据，获得所有的图片地址列表</a>  </li>
<li><a href="#jump3">遍历列表，并将图片保存到本地</a>  </li>
</ol>
<h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><span id = "jump1">  
## 获取网页数据
</span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gethemltext</span><span class="params">(url)</span>:</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br></pre></td></tr></table></figure>

<span id = "jump2">  
## 解析网页源数据，获得所有的图片地址列表
</span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImageList</span><span class="params">(html, lst)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    a = soup.find_all(<span class="string">'img'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'src'</span>]</span><br><span class="line">            lst.append(href)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<span id = "jump3">  
## 遍历列表，并将图片保存到本地
</span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> src <span class="keyword">in</span> list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(root + src)</span><br><span class="line">        urllib.request.urlretrieve(root + src, <span class="string">r'D:\pythonPath\%s.jpg'</span> % tmp)</span><br><span class="line">        tmp = tmp + <span class="number">1</span></span><br><span class="line">        print(<span class="string">'成功'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'失败'</span>)</span><br><span class="line">print(<span class="string">'下载完毕'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="实现案例"><a href="#实现案例" class="headerlink" title="实现案例"></a>实现案例</h1><h2 id="获取全景网首页所有图片数据"><a href="#获取全景网首页所有图片数据" class="headerlink" title="获取全景网首页所有图片数据"></a>获取<a href="http://www.quanjing.com/" target="_blank" rel="noopener" title="全景网">全景网</a>首页所有图片数据</h2><!-- 首先我们打开[全景网][25f672eb]的页面，然后右键查看源代码。 -->

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">urlPath = <span class="string">'http://www.quanjing.com/'</span></span><br><span class="line">localPath = <span class="string">'d:\\pythonPath'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gethemltext</span><span class="params">(url)</span>:</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImageList</span><span class="params">(html, lst)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    a = soup.find_all(<span class="string">'img'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'src'</span>]</span><br><span class="line">            lst.append(href)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">    root = <span class="string">"http://www.quanjing.com/"</span></span><br><span class="line">    html = gethemltext(<span class="string">"http://www.quanjing.com/?audience=151316"</span>)</span><br><span class="line">    list = []</span><br><span class="line">    getImageList(html, list)</span><br><span class="line">    tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> src <span class="keyword">in</span> list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(root + src)</span><br><span class="line">            urllib.request.urlretrieve(root + src, <span class="string">r'D:\pythonPath\%s.jpg'</span> % tmp)</span><br><span class="line">            tmp = tmp + <span class="number">1</span></span><br><span class="line">            print(<span class="string">'成功'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'失败'</span>)</span><br><span class="line">    print(<span class="string">'下载完毕'</span>)</span><br><span class="line"><span class="comment">#开始获取</span></span><br><span class="line">start()</span><br></pre></td></tr></table></figure>
<h2 id="获取斗鱼神秘主播间头像"><a href="#获取斗鱼神秘主播间头像" class="headerlink" title="获取斗鱼神秘主播间头像"></a>获取斗鱼神秘主播间头像</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">urlPath = <span class="string">'http://www.quanjing.com/'</span></span><br><span class="line">localPath = <span class="string">'d:\\pythonPath'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gethemltext</span><span class="params">(url)</span>:</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImageList</span><span class="params">(html, lst)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    a = soup.find_all(<span class="string">'img'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'data-original'</span>]</span><br><span class="line">            lst.append(href)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">    root = <span class="string">"http://www.quanjing.com/"</span></span><br><span class="line">    html = gethemltext(<span class="string">"https://www.douyu.com/directory/game/yz"</span>)</span><br><span class="line">    list = []</span><br><span class="line">    getImageList(html, list)</span><br><span class="line">    tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> src <span class="keyword">in</span> list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(root + src)</span><br><span class="line">            urllib.request.urlretrieve(  src, <span class="string">r'D:\pythonPath\%s.jpg'</span> % tmp)</span><br><span class="line">            tmp = tmp + <span class="number">1</span></span><br><span class="line">            print(<span class="string">'成功'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'失败'</span>)</span><br><span class="line">    print(<span class="string">'下载完毕'</span>)</span><br><span class="line"><span class="comment">#开始获取</span></span><br><span class="line">start()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLite 一行SQL实现有则更新无则插入，多个条件，复杂条件</title>
    <url>/2020/12/15/sqlite-insert-or-update/</url>
    <content><![CDATA[<p>SQLite 一行SQL实现有则更新无则插入，多个条件，复杂条件</p>
<p>示例代码：<a href="https://github.com/miqt/MultiProgressKV/blob/master/MultiProgressKV/src/main/java/com/miqt/multiprogresskv/DBHelper.java" target="_blank" rel="noopener">https://github.com/miqt/MultiProgressKV/blob/master/MultiProgressKV/src/main/java/com/miqt/multiprogresskv/DBHelper.java</a></p>
<p>例如想实现以下逻辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if （db has name &#x3D;&#x3D;小明 &amp;&amp; 身高 &#x3D;&#x3D; 170cm）</span><br><span class="line">	update 。。。。</span><br><span class="line">else </span><br><span class="line">	insert 。。。。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>可以参考以下SQL:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [TABLE_NAME](</span><br><span class="line">  [<span class="keyword">id</span>] <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT, </span><br><span class="line">  [<span class="keyword">name</span>] <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> , </span><br><span class="line">  [<span class="keyword">attr</span>] <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> , </span><br><span class="line">  [<span class="keyword">value</span>] <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> [TABLE_NAME]</span><br><span class="line"><span class="keyword">ON</span> [TABLE_NAME](</span><br><span class="line">  [<span class="keyword">name</span>], </span><br><span class="line">  [<span class="keyword">attr</span>]);</span><br></pre></td></tr></table></figure>

<p>CREATE UNIQUE INDEX [TABLE_NAME] 声明了只有name，和attr都重复才算唯一索引，这适用于类似插入一本书的场景，一本书的书名和作者只可能有一个，而单独的书名，和作者本身，可能对应很多本书。</p>
<p>以下语句执行，则是有则更新，无则插入的效果，以下SQL执行多次只会生成一行结果，而修改name，或者attr任意一个列，则又会新插入一个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REPLACE INTO TABLE_NAME</span><br><span class="line">  (</span><br><span class="line">    name ,</span><br><span class="line">    attr ,</span><br><span class="line">    value</span><br><span class="line">  )</span><br><span class="line">VALUES</span><br><span class="line">  (</span><br><span class="line">    &#39;《西游记》&#39; ,</span><br><span class="line">    &#39;作者&#39; ,  </span><br><span class="line">    &#39;吴承恩&#39;</span><br><span class="line">  ) ;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>一款非常简单易用的Android热修复框架 WandFix 使用详解 附实现原理</title>
    <url>/2019/01/11/%E4%B8%80%E6%AC%BE%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%E6%98%93%E7%94%A8%E7%9A%84Android%E7%83%AD%E4%BF%AE%E5%A4%8D%E6%A1%86%E6%9E%B6-WandFix-%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3-%E9%99%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>当你的项目已经上线，一个BUG被发现却已经为时已晚，这时候悔恨自责都已经于事无补，甚至还会被伙伴们打上不靠谱的标签，这时候你想不想像哈利波特一样，魔法杖一挥BUG瞬间消除？没错拿着WindFix你就可以实现这一点。  </p>
<p> <a href="https://github.com/miqt/WandFix" target="_blank" rel="noopener">WandFix</a>是一个基于java ClassLoader实现的热修复框架。  </p>
<p>使用WandFix可以不再用 new 来创建对象，只需要对变量名添加注解即可实现对象的注入。而热修复功能的实现既是用对象注入的这种途径，通过更换热修复包替换实现类，来达到每次注入的对象都为最后改动过的，实现热修复的目的。当然，如果您不想使用热修复功能，只是想方便的注入对象，直接添加注解也是可以的，因为如果它在热修复包中没有找到对应的实现类的话，会尝试从项目本地来加载对应的类，保证程序的稳定。  </p>
<p>效果展示：  </p>
<p><img src="https://user-gold-cdn.xitu.io/2019/1/2/1680d35367b60545?w=400&h=666&f=gif&s=1137762" alt="demo预览"></p>
<p>优点：</p>
<ul>
<li>类似于黄油刀可以直接对成员变量添加@InjectObject(“com.example.motordex.AppParsenterImpl2”)注解,来绑定热修复包中的实现类。</li>
<li>无需关闭应用即可使修复包生效。</li>
<li>与mvp模式搭配使用效果最佳。</li>
<li>可以自己定义需要热修复的类。</li>
<li>可以自己配置dex加密算法，保护dex文件的安全。</li>
<li>可以通过注解单独设置某个对象是否禁用双亲委托。</li>
</ul>
<a id="more"></a>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;miqt&#x2F;WandFix.git</span><br></pre></td></tr></table></figure>

<p>添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile project(&#39;:wand&#39;)</span><br><span class="line">annotationProcessor project(&#39;:wand-compiler&#39;)</span><br></pre></td></tr></table></figure>

<p>代码调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectObject</span>(</span><br><span class="line">        <span class="string">"com.example.motordex.AppParsenterImpl2"</span><span class="comment">//热修复包中的实现类</span></span><br><span class="line">            )</span><br><span class="line">    AppParsenter ap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectObject</span>(</span><br><span class="line">            value = <span class="string">"com.example.motordex.AppParsenterImpl2"</span>,<span class="comment">//热修复包中的实现类</span></span><br><span class="line">            level = ParentalEntrustmentLevel.PROJECT<span class="comment">//启用双亲委托，优先加载本地类</span></span><br><span class="line">            )</span><br><span class="line">    AppParsenter ap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//初始化，可以放在application中调用一次即可</span></span><br><span class="line">        Wand.init(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//单个参数</span></span><br><span class="line">        ClassInstall.inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多个参数的构造方法</span></span><br><span class="line">        <span class="comment">//Map&lt;String, Object[]&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line">        <span class="comment">//map.put("com.example.motordex.AppParsenterImpl2", new Object[]&#123;1, "参数2", "参数3"&#125;);</span></span><br><span class="line">        <span class="comment">//ClassInstall.inject(this, map);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用</span></span><br><span class="line">        String str = ap.getStr();</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, str, Toast.LENGTH_SHORT).show();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建并启用热修复包"><a href="#创建并启用热修复包" class="headerlink" title="创建并启用热修复包"></a>创建并启用热修复包</h2><p>创建热修复包非常简单。  </p>
<ol>
<li>在编辑器中对类参数添加注解:  </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">    @InjectObject(</span><br><span class="line">            value &#x3D; &quot;com.example.motordex.AppParsenterImpl&quot;,</span><br><span class="line">            level &#x3D; ParentalEntrustmentLevel.NEVER)</span><br><span class="line">    AppParsenter ap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在android studio 中点击 Build &gt;&gt; Make Project ， 就会在项目的根目录生成 make_fix_pack.bat 批处理脚本。文本编辑器打开之后类似于这样：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd .&#x2F;app&#x2F;build&#x2F;intermediates&#x2F;classes&#x2F;debug&#x2F;</span><br><span class="line">jar cvf hotfix_pack.jar .&#x2F;com&#x2F;example&#x2F;motordex&#x2F;AppParsenterImpl.class</span><br><span class="line">dx --dex --output&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;hotfix_pack.dex hotfix_pack.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 make_fix_pack.bat 批处理脚本，可以通过找到这个脚本文件直接双击或者在终端中运行，运行之后就可以在项目根目录找到 hotfix_pack.dex 文件，这个就是热修复包了。</p>
</li>
<li><p>通过服务器吧这个 hotfix_pack.dex 文件下发下去，当程序运行到<code>Wand.with(this).init().attachDex(new File(&quot;该文件存储路径&quot;));</code>的时候，这个热修复包就被应用到程序中去了。</p>
</li>
</ol>
<p>具体更多用法及其实现原理请移步<a href="https://github.com/miqt/WandFix/wiki" target="_blank" rel="noopener">GitHub·Wiki</a></p>
<blockquote>
<p>附上<a href="https://github.com/miqt/WandFix" target="_blank" rel="noopener">GitHub地址</a><br>欢迎提出问题和宝贵意见。如果您觉得这个项目还不错，就点个star吧(￣▽￣)~*</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>利用python分析2018智联招聘全国各个城市的职位数排名</title>
    <url>/2018/01/16/%E5%88%A9%E7%94%A8python%E5%88%86%E6%9E%902018%E6%99%BA%E8%81%94%E6%8B%9B%E8%81%98%E5%85%A8%E5%9B%BD%E5%90%84%E4%B8%AA%E5%9F%8E%E5%B8%82%E8%A1%8C%E4%B8%9A%E8%81%8C%E4%BD%8D%E6%95%B0%E6%8E%92%E5%90%8D/</url>
    <content><![CDATA[<p>新年快到了,工作了一年你,躺在床上,退下一身的疲怠,是否也曾向往去到一个新的城市工作和生活呢?    </p>
<p>那中国除了公认的北上广深工作机会最多以外,还有那些城市也相对不错呢?  </p>
<p>这时候我们可能会打开招聘网站开始选择城市然后来了解这个城市的职位情况.  </p>
<p>那么一直秉持着人生苦短,我学python的我们,为什么不能用python来写一个分析2018全国各个城市的职位数排名的爬虫脚本呢?    </p>
<p>这么一想十分可行啊,我们只需要找到一个目标招聘平台,然后通过用代码get到它的html正文,通过BeautifulSoup分析html来得到我们想要的数据,然后用matplotlib画出图表就可以了. <strong>(完整代码见本文末尾.)</strong>    </p>
<a id="more"></a>

<p>于是立马动手,首先,既然我们是要分析全国范围内的所有城市的职位数,那么我们肯定首先要把所有的城市先列出来.然而这里想必地理学的再好的同学也不可能能把全国范围内所有的城市都能背下来吧,所以这一步,我们也是用python来爬取到全国范围内所有的城市名称.   </p>
<h3 id="1-爬取全国范围内所有的城市列表"><a href="#1-爬取全国范围内所有的城市列表" class="headerlink" title="1.爬取全国范围内所有的城市列表"></a>1.爬取全国范围内所有的城市列表</h3><p>通过一番查找,终于找到了智联上的这个页面.<a href="http://www.zhaopin.com/citymap.html" target="_blank" rel="noopener">http://www.zhaopin.com/citymap.html</a><br><img src="http://miqt.github.io/blogimgs/python_zhilian_city.png" alt="城市"></p>
<p>乍一看好像所有的城市名都是加粗的,右键查看一下源代码,果然,所有的城市名都被加上了<code>&lt;strong&gt;</code>标签,类似于这样<br><img src="http://miqt.github.io/blogimgs/python_zhilian_strong.png" alt="标签"></p>
<p>那就简单了,我们直接获取该网页所有<code>&lt;strong&gt;</code>标签里面的内容,就是标签名了.代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def getCitys(citys):</span><br><span class="line">    urlPath &#x3D; &quot;http:&#x2F;&#x2F;www.zhaopin.com&#x2F;citymap.html&quot;</span><br><span class="line">    print(&quot;开始爬取所有城市：&quot;)</span><br><span class="line">    r &#x3D; requests.get(urlPath)</span><br><span class="line">    if r.ok:</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line">        data &#x3D; r.text</span><br><span class="line">        print(&quot;目标url：&quot;, urlPath)</span><br><span class="line">        soup &#x3D; BeautifulSoup(data, &#39;html.parser&#39;)</span><br><span class="line">        a &#x3D; soup.find_all(&#39;strong&#39;)</span><br><span class="line">        for i in a:</span><br><span class="line">            try:</span><br><span class="line">                citys.append(i.contents[0])</span><br><span class="line">            except:</span><br><span class="line">                continue</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;城市获取失败！&quot;)</span><br></pre></td></tr></table></figure>
<p>这样我们就获取到了所有的城市名,下一步我们就是要通过遍历这些城市名来查询某一个职业的职位数了.</p>
<h3 id="2-遍历城市名-爬取对应城市的职位数"><a href="#2-遍历城市名-爬取对应城市的职位数" class="headerlink" title="2.遍历城市名,爬取对应城市的职位数."></a>2.遍历城市名,爬取对应城市的职位数.</h3><p>这时候我们先打开智联的<a href="http://sou.zhaopin.com/jobs/searchresult.ashx" target="_blank" rel="noopener"><strong>搜工作</strong></a>页面,输入职位名”android”,地址选择”烟台”,然后点击搜工作,这时候注意到,浏览器的地址栏变成了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;sou.zhaopin.com&#x2F;jobs&#x2F;searchresult.ashx?jl&#x3D;烟台&amp;kw&#x3D;android&amp;p&#x3D;1&amp;isadv&#x3D;0</span><br></pre></td></tr></table></figure>
<p>原来,智联的<strong>找工作</strong>这个按钮是执行了一个get请求而已,其中<code>jl=和&amp;kw=</code>即分别代表要查找的城市和职位关键字,这时候先不要着急写代码,我们先来像上面说的一样来分析一下这个页面.<br>首先第一眼直接就找到了这样的字眼  </p>
<p><img src="http://miqt.github.io/blogimgs/python_zhilian_num.png" alt=""></p>
<p>上面赫然显示着共84个职位满足条件,一切总是那么完美,不需要多余的任何操作,仿佛传到桥头自然直一样,这不正是我们想要找的职位数吗.然后右键选择查看源代码.恩,不得不说相当完美!</p>
<p><img src="http://miqt.github.io/blogimgs/python_zhilian_em.png" alt=""></p>
<p>但这次数据格式好像比较复杂一点,我们如果仅仅简单用<code>&lt;em&gt;84&lt;/em&gt;</code>标签包裹的内容来获取职位数的话好像已经行不通了,因为该网页很多的地方也使用了<code>&lt;em&gt;</code>标签,那怎么办呢,这时候我们只能使用正则表达式来匹配了.</p>
<p>修修改改,最终的正则表达式是这样的:<code>(?!共&lt;em&gt;)[0-9]+(?=&lt;/em&gt;个职位满足条件)</code>,其中的?!和?=则是让其所在的括号内的内容不放入匹配缓冲区里.</p>
<p>好,接下来我们就可以结合以上的内容来写代码了.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">zhilianUrl &#x3D; &quot;http:&#x2F;&#x2F;sou.zhaopin.com&#x2F;jobs&#x2F;searchresult.ashx?jl&#x3D;烟台&amp;kw&#x3D;android&amp;p&#x3D;1&amp;isadv&#x3D;0&quot;</span><br><span class="line">r &#x3D; requests.get(zhilianUrl)</span><br><span class="line">if r.ok:</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line">    rr &#x3D; r&#39;(?!共&lt;em&gt;)[0-9]+(?&#x3D;&lt;&#x2F;em&gt;个职位满足条件)&#39;</span><br><span class="line">    a &#x3D; re.findall(rr, r.text, 0)</span><br><span class="line">    print(a)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;职位数获取失败！&quot;)</span><br></pre></td></tr></table></figure>

<p>写完赶紧兴冲冲的run一下,…然而…</p>
<p><img src="http://miqt.github.io/blogimgs/python_zhilian_run.png" alt="程序卡住了"></p>
<p>结果是运行没有报错也没有任何输出,左边的红色方块显示程序还在运行中,是的,它卡住了,停止运行再重新start还是会卡主,检查一下程序也没问题啊,what?辛辛苦苦才到达了这步救过竟然卡住了?这个时候我们不要着急,身为一个整天跟各种BUG打交道的程序员,一定要镇定,努力分析问题可能的原因,然后解决问题.  </p>
<p>继续回到我们的这个问题上,排除我们程序本身的问题,会不会是对方的网站早知道我们会写python爬取,故意给我们加了限制呢?于是我们给我们的这次访问加上一个请求头试试,让我们的这次请求伪装成来自浏览器的访问.  </p>
<p>ok,改代码,给这次get请求加上一个请求头:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;Host&#39;: &#39;blog.csdn.net&#39;,</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64; rv:43.0) Gecko&#x2F;20100101 Firefox&#x2F;43.0&#39;,</span><br><span class="line">    &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&#39;,</span><br><span class="line">    &#39;Accept-Language&#39;: &#39;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3&#39;,</span><br><span class="line">    &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,</span><br><span class="line">    &#39;Referer&#39;: &#39;http:&#x2F;&#x2F;www.baidu.com&#39;,</span><br><span class="line">    &#39;Connection&#39;: &#39;keep-alive&#39;,</span><br><span class="line">    &#39;Cache-Control&#39;: &#39;max-age&#x3D;0&#39;,</span><br><span class="line">&#125;</span><br><span class="line">zhilianUrl &#x3D; &quot;http:&#x2F;&#x2F;sou.zhaopin.com&#x2F;jobs&#x2F;searchresult.ashx?jl&#x3D;烟台&amp;kw&#x3D;android&amp;p&#x3D;1&amp;isadv&#x3D;0&quot;</span><br><span class="line">r &#x3D; requests.get(zhilianUrl, headers&#x3D;headers)</span><br><span class="line">if r.ok:</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line">    rr &#x3D; r&#39;(?!共&lt;em&gt;)[0-9]+(?&#x3D;&lt;&#x2F;em&gt;个职位满足条件)&#39;</span><br><span class="line">    a &#x3D; re.findall(rr, r.text, 0)</span><br><span class="line">    print(a)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;城市获取失败！&quot;)</span><br></pre></td></tr></table></figure>

<p>运行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:\PythonPoj\PythonLearn\venv\Scripts\python.exe F:&#x2F;PythonPoj&#x2F;PythonLearn&#x2F;test.py</span><br><span class="line">[&#39;84&#39;]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<p>果然这下就没问题了,程序瞬间就成功获取到了职位数为 84<br>继续改动一下程序,遍历所有的城市列表,并根据<code>key=城市名,value=职位数</code>的格式将所有的城市职位数都获取来存到一个字典(Dictionary)里.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def getData(citys, data):</span><br><span class="line">    for city in citys:</span><br><span class="line">        headers &#x3D; &#123;</span><br><span class="line">            &#39;Host&#39;: &#39;blog.csdn.net&#39;,</span><br><span class="line">            &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64; rv:43.0) Gecko&#x2F;20100101 Firefox&#x2F;43.0&#39;,</span><br><span class="line">            &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&#39;,</span><br><span class="line">            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3&#39;,</span><br><span class="line">            &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,</span><br><span class="line">            &#39;Referer&#39;: &#39;http:&#x2F;&#x2F;www.baidu.com&#39;,</span><br><span class="line">            &#39;Connection&#39;: &#39;keep-alive&#39;,</span><br><span class="line">            &#39;Cache-Control&#39;: &#39;max-age&#x3D;0&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">        zhilianUrl &#x3D; &quot;http:&#x2F;&#x2F;sou.zhaopin.com&#x2F;jobs&#x2F;searchresult.ashx?jl&#x3D;&quot; + city + &quot;&amp;kw&#x3D;&quot; + zhiwei + &quot;&amp;p&#x3D;1&amp;isadv&#x3D;0&quot;</span><br><span class="line">        r &#x3D; requests.get(zhilianUrl, headers&#x3D;headers)</span><br><span class="line">        if r.ok:</span><br><span class="line">            r.raise_for_status()</span><br><span class="line">            r.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line">            rr &#x3D; r&#39;(?!共&lt;em&gt;)[0-9]+(?&#x3D;&lt;&#x2F;em&gt;个职位满足条件)&#39;</span><br><span class="line">            a &#x3D; re.findall(rr, r.text, 0)</span><br><span class="line"></span><br><span class="line">            if int(a[0]) &gt;&#x3D; 50 and hasCity(r):</span><br><span class="line">                print(city, zhiwei, a[0])</span><br><span class="line">                data[city] &#x3D; int(a[0])</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;城市获取失败！&quot;)</span><br></pre></td></tr></table></figure>

<p>这样我们就得到了这样的数据:<br><code>{&#39;北京&#39;: 4205, &#39;上海&#39;: 2702, &#39;广州&#39;: 1442, &#39;深圳&#39;: 1872, &#39;天津&#39;: 536 ...}</code></p>
<h3 id="使用matplotlib根据数据画出图表"><a href="#使用matplotlib根据数据画出图表" class="headerlink" title="使用matplotlib根据数据画出图表"></a>使用matplotlib根据数据画出图表</h3><p>通过上面我们获取完了数据之后,直接用matplotlib库画出图表来就可以直观的看到各个城市的职位数情况了.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def draw(keys, values):</span><br><span class="line">    plt.rcParams[&#39;font.sans-serif&#39;] &#x3D; [&#39;SimHei&#39;]  # 用来正常显示中文标签</span><br><span class="line">    plt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False  # 用来正常显示负号</span><br><span class="line">    time &#x3D; i &#x3D; datetime.datetime.now()</span><br><span class="line">    plt.title(str(time.year) + &quot;&#x2F;&quot; + str(time.month) + &quot;&#x2F;&quot; + str(time.day) + zhiwei + &quot;职位数分布图&quot;)</span><br><span class="line">    plt.bar(keys, values, label&#x3D;&quot;职位数&quot;)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p>程序运行:</p>
<p><img src="http://miqt.github.io/blogimgs/python_zhilian.png" alt="爬取中"></p>
<p>运行结果:</p>
<p><img src="http://img0.ph.126.net/4NlgC7AwDM3M6BjSc3PrjQ==/6632434458656127402.png" alt="android爬取结果"></p>
<p>还可以修改一下脚本中的职位名,查找其他职业:</p>
<p><img src="http://img2.ph.126.net/YsfOZ-IxEyQkbrnOFkWSKQ==/1276770494379233603.png" alt="python爬取结果"></p>
<p><img src="http://img2.ph.126.net/8uIJLvGdrjZlo1T8mrixEw==/1276489019402508641.png" alt="PHP爬取结果"></p>
<p><img src="http://img0.ph.126.net/-i-lD0vh35ejcVJZhBNmBw==/6632501528865399315.png" alt="会计爬取结果"></p>
<blockquote>
<p>本文出自: <a href="http://imaster.top" target="_blank" rel="noopener">http://imaster.top</a><br>完整代码<a href="https://github.com/miqt/PythonLearn/blob/b3d33166303c3ec19eae3eedf13810af0234c9d9/ZhiLian.py" target="_blank" rel="noopener">点此获取</a><br>本文为作者原创,转载请注明出处.  </p>
</blockquote>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用android.hardware.camera2打造新的自定义相机</title>
    <url>/2016/03/31/%E4%BD%BF%E7%94%A8android-hardware-camera2%E6%89%93%E9%80%A0%E6%96%B0%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%B8%E6%9C%BA%EF%BC%882016-03-31-15-17%EF%BC%89/</url>
    <content><![CDATA[<p>android.hardware.camera2这个包提供了相机设备和安卓设备连接的接口，他的存在弃用了原有的Camera相机。</p>
<a id="more"></a>
<p>和原有的旧API中的camera不同的是，camera2大大的提升了拍照的速度。并且值得一提的是，使用原来的camera相机拍完的照片仅仅是一个纯纯的图片文件，也就时说不包含图片的Exif信息，那么什么是图片的Exif信息呢，简单来说就是：<br><img src="http://img.blog.csdn.net/20160330170253362" alt="图片的一些Exif属性"><br>正如你看到的，就是这些东西，或许你觉得这东西没什么必要，但就是这些信息曾卡住我加了一个周末的班才解决！！回想都是泪啊！<br>不过言归正传，这篇博客的主题是使用新的camera2开发自定义相机。<br>经过这两天的研究，自定义相机差不多需要5个步骤：<br>①创建一个TextureView用来显示相机的预览<br>②得到CameraManager对象通过相机硬件ID打开相机设备（打开成功会得到一个CameraDevice对象）<br>③用相机设备（CameraDevice对象）创建会话，通过会话发送相机预览的请求进行预览(中间可以加上种种的参数什么的，你要求相机设备怎么做他就怎么做)<br>⑤拍照也是一样发送请求，然后通过ImageReader保存返回的图片数据。<br>明确了自定义相机的步骤，接下来就好办了，敲代码。。。<br>首先我们使用一个Fragment来显示自定义相机的界面，<br>    fragment XML代码：<br>    <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.miser.ceamera2demo.Camera2Fragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextureView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_textview"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"3"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/iv_Thumbnail"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"80dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">"44dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"#F1F2aa"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/btn_takepic"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"拍照"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><br>简单我们在XML中定义了一个TextureView一个ImageView一个Button，TextureView用来显示相机的预览，ImageView用来显示一个拍照完成的缩略图，Button当然就是用来点击拍照的啦。<br>Fragment Java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Camera2Fragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Camera2Fragment"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SETIMAGE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    TextureView mTextureView;</span><br><span class="line">    ImageView mThumbnail;</span><br><span class="line">    Button mButton;</span><br><span class="line">    Handler mHandler;</span><br><span class="line">    Handler mUIHandler;</span><br><span class="line">    ImageReader mImageReader;</span><br><span class="line">    CaptureRequest.Builder mPreViewBuidler;</span><br><span class="line">    CameraCaptureSession mCameraSession;</span><br><span class="line">    CameraCharacteristics mCameraCharacteristics;</span><br><span class="line">    Ringtone ringtone;</span><br><span class="line">    <span class="comment">//相机会话的监听器，通过他得到mCameraSession对象，这个对象可以用来发送预览和拍照请求</span></span><br><span class="line">    <span class="keyword">private</span> CameraCaptureSession.StateCallback mSessionStateCallBack = <span class="keyword">new</span> CameraCaptureSession.StateCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigured</span><span class="params">(CameraCaptureSession cameraCaptureSession)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mCameraSession = cameraCaptureSession;</span><br><span class="line">                cameraCaptureSession.setRepeatingRequest(mPreViewBuidler.build(), <span class="keyword">null</span>, mHandler);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CameraAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigureFailed</span><span class="params">(CameraCaptureSession cameraCaptureSession)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//打开相机时候的监听器，通过他可以得到相机实例，这个实例可以创建请求建造者</span></span><br><span class="line">    <span class="keyword">private</span> CameraDevice.StateCallback cameraOpenCallBack = <span class="keyword">new</span> CameraDevice.StateCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpened</span><span class="params">(CameraDevice cameraDevice)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"相机已经打开"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mPreViewBuidler = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);</span><br><span class="line">                SurfaceTexture texture = mTextureView.getSurfaceTexture();</span><br><span class="line">                texture.setDefaultBufferSize(mPreViewSize.getWidth(), mPreViewSize.getHeight());</span><br><span class="line">                Surface surface = <span class="keyword">new</span> Surface(texture);</span><br><span class="line">                mPreViewBuidler.addTarget(surface);</span><br><span class="line">                cameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()), mSessionStateCallBack, mHandler);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CameraAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDisconnected</span><span class="params">(CameraDevice cameraDevice)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"相机连接断开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(CameraDevice cameraDevice, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"相机打开失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> ImageReader.OnImageAvailableListener onImageAvaiableListener = <span class="keyword">new</span> ImageReader.OnImageAvailableListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onImageAvailable</span><span class="params">(ImageReader imageReader)</span> </span>&#123;</span><br><span class="line">            mHandler.post(<span class="keyword">new</span> ImageSaver(imageReader.acquireNextImage()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> Size mPreViewSize;</span><br><span class="line">    <span class="comment">//预览图显示控件的监听器，可以监听这个surface的状态</span></span><br><span class="line">    <span class="keyword">private</span> TextureView.SurfaceTextureListener mSurfacetextlistener = <span class="keyword">new</span> TextureView.SurfaceTextureListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceTextureAvailable</span><span class="params">(SurfaceTexture surfaceTexture, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123;</span><br><span class="line">            HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"Ceamera3"</span>);</span><br><span class="line">            thread.start();</span><br><span class="line">            mHandler = <span class="keyword">new</span> Handler(thread.getLooper());</span><br><span class="line">            CameraManager manager = (CameraManager) getActivity().getSystemService(Context.CAMERA_SERVICE);</span><br><span class="line">            String cameraid = CameraCharacteristics.LENS_FACING_FRONT + <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mCameraCharacteristics = manager.getCameraCharacteristics(cameraid);</span><br><span class="line">                StreamConfigurationMap map = mCameraCharacteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);</span><br><span class="line">                Size largest = Collections.max(Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)), <span class="keyword">new</span> CompareSizeByArea());</span><br><span class="line">                mPreViewSize = map.getOutputSizes(SurfaceTexture.class)[0];</span><br><span class="line">                mImageReader = ImageReader.newInstance(largest.getWidth(), largest.getHeight(), ImageFormat.JPEG, <span class="number">5</span>);</span><br><span class="line">                mImageReader.setOnImageAvailableListener(onImageAvaiableListener, mHandler);</span><br><span class="line">                manager.openCamera(cameraid, cameraOpenCallBack, mHandler);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CameraAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceTextureSizeChanged</span><span class="params">(SurfaceTexture surfaceTexture, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSurfaceTextureDestroyed</span><span class="params">(SurfaceTexture surfaceTexture)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceTextureUpdated</span><span class="params">(SurfaceTexture surfaceTexture)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> View.OnClickListener picOnClickListener = <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                shootSound();</span><br><span class="line">                Log.d(TAG, <span class="string">"正在拍照"</span>);</span><br><span class="line">                CaptureRequest.Builder builder = mCameraSession.getDevice().createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);</span><br><span class="line">                builder.addTarget(mImageReader.getSurface());</span><br><span class="line">                builder.set(CaptureRequest.CONTROL_AF_MODE,</span><br><span class="line">                        CaptureRequest.CONTROL_AF_MODE_AUTO);</span><br><span class="line">                builder.set(CaptureRequest.CONTROL_AF_TRIGGER,</span><br><span class="line">                        CameraMetadata.CONTROL_AF_TRIGGER_START);</span><br><span class="line">                builder.set(CaptureRequest.JPEG_ORIENTATION, <span class="number">90</span>);</span><br><span class="line">                mCameraSession.capture(builder.build(), <span class="keyword">null</span>, mHandler);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CameraAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View v = inflater.inflate(R.layout.fragment_camera2, <span class="keyword">null</span>);</span><br><span class="line">        findview(v);</span><br><span class="line">        mUIHandler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> InnerCallBack());</span><br><span class="line">        <span class="comment">//初始化拍照的声音</span></span><br><span class="line">        ringtone = RingtoneManager.getRingtone(getActivity(), Uri.parse(<span class="string">"file:///system/media/audio/ui/camera_click.ogg"</span>));</span><br><span class="line">        AudioAttributes.Builder attr = <span class="keyword">new</span> AudioAttributes.Builder();</span><br><span class="line">        attr.setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION);</span><br><span class="line">        ringtone.setAudioAttributes(attr.build());</span><br><span class="line">        <span class="comment">//初始化相机布局</span></span><br><span class="line">        mTextureView.setSurfaceTextureListener(mSurfacetextlistener);</span><br><span class="line">        <span class="comment">//设置点击拍照的监听</span></span><br><span class="line">        mButton.setOnClickListener(picOnClickListener);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView();</span><br><span class="line">        <span class="keyword">if</span> (mCameraSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mCameraSession.getDevice().close();</span><br><span class="line">            mCameraSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findview</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        mTextureView = (TextureView) v.findViewById(R.id.tv_textview);</span><br><span class="line">        mButton = (Button) v.findViewById(R.id.btn_takepic);</span><br><span class="line">        mThumbnail = (ImageView) v.findViewById(R.id.iv_Thumbnail);</span><br><span class="line">        mThumbnail.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"别戳了，那个页面还没写"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 播放系统的拍照的声音</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shootSound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ringtone.stop();</span><br><span class="line">        ringtone.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageSaver</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        Image reader;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ImageSaver</span><span class="params">(Image reader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.reader = reader;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"正在保存图片"</span>);</span><br><span class="line">            File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsoluteFile();</span><br><span class="line">            <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            File file = <span class="keyword">new</span> File(dir, System.currentTimeMillis() + <span class="string">".jpg"</span>);</span><br><span class="line">            FileOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                ByteBuffer buffer = reader.getPlanes()[<span class="number">0</span>].getBuffer();</span><br><span class="line">                <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.remaining()];</span><br><span class="line">                buffer.get(buff);</span><br><span class="line">                BitmapFactory.Options ontain = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">                ontain.inSampleSize = <span class="number">50</span>;</span><br><span class="line">                Bitmap bm = BitmapFactory.decodeByteArray(buff, <span class="number">0</span>, buff.length, ontain);</span><br><span class="line">                Message.obtain(mUIHandler, SETIMAGE, bm).sendToTarget();</span><br><span class="line">                outputStream.write(buff);</span><br><span class="line">                Log.d(TAG, <span class="string">"保存图片完成"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerCallBack</span> <span class="keyword">implements</span> <span class="title">Handler</span>.<span class="title">Callback</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (message.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> SETIMAGE:</span><br><span class="line">                    Bitmap bm = (Bitmap) message.obj;</span><br><span class="line">                    mThumbnail.setImageBitmap(bm);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中我们使用到了4个非常重要的监听器：</p>
<p>mSurfacetextlistener：<br>    设置在TextureView上的监听器当我们的TextureView已经准被好可以往上绘制东西的时候（也就时触发onSurfaceTextureAvailable事件），我们就可以进行初始化CameraManager、openCamera等等的一些操作了。</p>
<p>cameraOpenCallBack：<br>    打开相机时候的监听器，如果打开成功，也就是会触发onOpened的时候，我们就可以得到cameraDevice对象了，cameraDevice对象有什么用呢，他可以进行一步非常重要的操作，createCaptureSession，创建一个与你的相机设备通信的一个会话，有了它你才可以进行后面的预览，拍照，设置相机参数的操作。</p>
<p>mSessionStateCallBack：<br>    相机会话的监听器，当onConfigured时，他会得到一个CameraCaptureSession对象，这个对象就是用来发送预览和拍照请求的啦。</p>
<p>onImageAvaiableListener：是你点击拍照 mCameraSession.capture(…)的时候要用到的，他会返回你本次拍照的图片数据，你可以通过文件流把他输出成JPEG格式的图片文件。</p>
<p>最后在你的自定义相机使用完的时候要记得及时释放资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (mCameraSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">           mCameraSession.getDevice().close();</span><br><span class="line">           mCameraSession.close();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>因为相机设备是对你手机上面的程序来说是个公共的硬件资源。不释放下次就无法打开相机了，因为它还是再被占用着。</p>
<p>最后别忘了加上权限：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CAMERA"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>好，大功告成！<br>Demo地址<a href="http://download.csdn.net/detail/qq_27512671/9477936" target="_blank" rel="noopener">http://download.csdn.net/detail/qq_27512671/9477936</a></p>
<p>2016年12月9日11:00:22  补充</p>
<p>这个项目会在我的Github上更新，欢迎pull request：</p>
<p><a href="https://github.com/miqt/camera2" target="_blank" rel="noopener">https://github.com/miqt/camera2</a></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>内存加载内存加载dex、jar、apk</title>
    <url>/2020/03/25/%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BDdex%E3%80%81jar%E3%80%81apk/</url>
    <content><![CDATA[<p>源码 4.4.4 一直跟踪到 native 方法都是 File 加载的，android 4 的版本必须用file加载</p>
<p>而看了下api大于26的android源码，新提供了一个InMemoryDexClassLoader的类，包含DexFile类也相应的给到了内存加载dex的支持。</p>
<p>相关 google 源码地址：（需要翻墙）</p>
<p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-8.0.0_r44/dalvik/src/main/java/dalvik/system/DexFile.java#106" target="_blank" rel="noopener">https://android.googlesource.com/platform/libcore/+/refs/tags/android-8.0.0_r44/dalvik/src/main/java/dalvik/system/DexFile.java#106</a></p>
<p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-8.0.0_r44/dalvik/src/main/java/dalvik/system/DexFile.java#370" target="_blank" rel="noopener">https://android.googlesource.com/platform/libcore/+/refs/tags/android-8.0.0_r44/dalvik/src/main/java/dalvik/system/DexFile.java#370</a></p>
<p><a href="https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r31/dalvik/src/main/java/dalvik/system/InMemoryDexClassLoader.java" target="_blank" rel="noopener">https://android.googlesource.com/platform/libcore/+/refs/tags/android-10.0.0_r31/dalvik/src/main/java/dalvik/system/InMemoryDexClassLoader.java</a> （需要翻墙）</p>
<p>下面是我定义的一个支持加载内存class，dex，apk的classloader，并反转了双亲委派</p>
<p>目前双亲委派的顺序为： </p>
<ol>
<li>自身内存（仅android api &gt;=26 支持</li>
<li>自身缓存</li>
<li>自身文件</li>
<li>自身父亲</li>
<li>自身孩子</li>
</ol>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dalvik.system.DexClassLoader;</span><br><span class="line"><span class="keyword">import</span> dalvik.system.InMemoryDexClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 支持内存加载类文件，并修改了双亲委派逻辑的classloader</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 目前执行的双亲委派逻辑依次为：&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自身内存（仅android api &gt;=26 支持）&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自身缓存&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自身文件&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自身父亲&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自身孩子&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * throw ClassNotFoundException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span>: 2020-03-27 16:13:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: miqt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mail</span>: miqingtang@analysys.com.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlipDelegateClassLoader</span> <span class="keyword">extends</span> <span class="title">DexClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来回调一个类具体是由谁加载了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Callback callback;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录自己找不到的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; notFoundClass;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内存dex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> InMemoryDexClassLoader memoryDexClassLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * api &gt; 26 才可用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlipDelegateClassLoader</span><span class="params">(Context context, ByteBuffer dexBuffers, ClassLoader parent, Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="string">""</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, parent, callback);</span><br><span class="line">        memoryDexClassLoader = <span class="keyword">new</span> InMemoryDexClassLoader(dexBuffers, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * api &gt; 26 才可用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlipDelegateClassLoader</span><span class="params">(Context context, ByteBuffer[] dexBuffers, String librarySearchPath, ClassLoader parent, Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="string">""</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, parent, callback);</span><br><span class="line">        memoryDexClassLoader = <span class="keyword">new</span> InMemoryDexClassLoader(dexBuffers, librarySearchPath, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * api &gt; 27 才可用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlipDelegateClassLoader</span><span class="params">(Context context, ByteBuffer[] dexBuffers, ClassLoader parent, Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="string">""</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, parent, callback);</span><br><span class="line">        memoryDexClassLoader = <span class="keyword">new</span> InMemoryDexClassLoader(dexBuffers, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlipDelegateClassLoader</span><span class="params">(Context context, String dexPath, String optimizedDirectory, String librarySearchPath, ClassLoader parent, Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, optimizedDirectory, librarySearchPath, parent);</span><br><span class="line">        notFoundClass = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.callback = callback;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlipDelegateClassLoader</span><span class="params">(Context context, String dexPath, String optimizedDirectory, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, dexPath, optimizedDirectory, librarySearchPath, parent, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span> (notFoundClass.contains(name)) &#123;</span><br><span class="line">            notFoundClass.remove(name);</span><br><span class="line">            <span class="comment">//向下双亲委派,告诉孩子："为父也找不到啊"</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//-------内存文件中找，内存loader有可能会继续因为双亲委托拜托给我，因此我记下来这个类是给内存loader找的，拜托我的时候，直接告诉他"我也找不到啊"</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O &amp;&amp; memoryDexClassLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                notFoundClass.add(name);</span><br><span class="line">                c = memoryDexClassLoader.loadClass(name);</span><br><span class="line">                <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        callback.onLoadClass(memoryDexClassLoader, name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//-------自己缓存里面找</span></span><br><span class="line">        c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                callback.onLoadClass(<span class="keyword">this</span>, name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//-------自己dex中找</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = findClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    callback.onLoadClass(<span class="keyword">this</span>, name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//--------从父亲中找</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                c = getParent().loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    callback.onLoadClass(getParent(), name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//--------给孩子找，孩子有可能会继续因为双亲委托拜托给我，因此我记下来这个类是给孩子找的，拜托我的时候，直接告诉他"为父也找不到啊"</span></span><br><span class="line">        notFoundClass.add(name);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (context.getClassLoader() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                c = context.getClassLoader().loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    callback.onLoadClass(context.getClassLoader(), name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//not found exception</span></span><br><span class="line">        <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            callback.onNotFound(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoadClass</span><span class="params">(ClassLoader loader, String name)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onNotFound</span><span class="params">(String name)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>android</tag>
        <tag>热修复</tag>
      </tags>
  </entry>
  <entry>
    <title>此去欲何？</title>
    <url>/2017/08/10/%E6%AD%A4%E5%8E%BB%E6%AC%B2%E4%BD%95%EF%BC%9F/</url>
    <content><![CDATA[<p><img src="/blogimgs/20151202145909_XcQkW.thumb.700_0.jpeg" alt="“大圣，此去欲何?”   “踏南天，碎凌霄。”   “若一去不回……”   “便一去不回”
 "><br> <center>-</center><br>“大圣，此去欲何?”<br>“踏南天，碎凌霄。”<br>“若一去不回……”<br>“便一去不回!”</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>萤火之森</title>
    <url>/2017/08/01/%E8%90%A4%E7%81%AB%E4%B9%8B%E6%A3%AE/</url>
    <content><![CDATA[<img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1501827988015&di=978203b016e02a4ec156a07348c6e8fb&imgtype=0&src=http%3A%2F%2Fimg3.duitang.com%2Fuploads%2Fitem%2F201507%2F17%2F20150717144810_cHkCS.jpeg"  alt="萤火之森" />          

<p>如果时光可以倒流 我还是会选择认识你 虽然会伤痕累累 但是心中的温暖记忆是谁都无法给与的 谢谢你来过我的世界  </p>
<p>——绿川幸《萤火之森》  </p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>千年一梦，阴月有晴——《仙逆》</title>
    <url>/2012/09/21/%E5%8D%83%E5%B9%B4%E4%B8%80%E6%A2%A6%EF%BC%8C%E9%98%B4%E6%9C%88%E6%9C%89%E6%99%B4%E2%80%94%E2%80%94%E3%80%8A%E4%BB%99%E9%80%86%E3%80%8B/</url>
    <content><![CDATA[<p><img src="/blogimgs/20170915164439_Vv4Am.jpeg" alt="">  </p>
<p>这本陪伴了我高三和暑假小部分的书，不算太好看但也难得把这600万多字的小说看下来，见证了一个平凡小童到最后名震仙罡的故事，还是挺喜欢“道经”上的那段话，万年修道一执念。更震撼于王林那于洞府界内的嘶吼，天要你死，我也要把你抢回来！  </p>
<p>一句话的结局，徒留数千年的思念与哀伤！   </p>
<a id="more"></a>

<p>时常想起，那个处于结丹初期的小小修士，那一天，在修魔海外，一个求救的声音，传入了王林那被复仇弥漫的心神中，那声音很柔，很无助，让人心怜……</p>
<p>那声音，让王林前行的脚步停顿，让他转过头，看到了一个他当时并不知晓，但却铭记了一辈子的女子。修魔海外，那一声并不浪漫的守护的承诺，——不要怕，我带你去杀人！</p>
<p>那一个为了她，甘愿去闯仙罡法则的人，那一个，在仙罡大门前，道出三千年修道决心的人，——“至于婉儿，晚辈与她若不能同生，那即便与她共同死在了大门洞府界的大门外，晚辈也无悔了。”那无悔的声音卷动在那平静的星空似掀起了无穷的风暴，化作无数回音卷动八方。</p>
<p>一句无悔，三千年修道的决心，一句无悔，似逆转千年，回到了修魔海外那命运的交错。</p>
<p>还记得那个在梦中寻找幸福的一幕，“婉儿，我们要去仙罡了，在哪里，我一定找到方法让你醒来，相信我，相信我……”鬼脸幡在空中飘摇，王林沉浸在自己编织的梦境里，王林的这一生，去过的地方很多，孤单陪伴着他，一辈子都是这样，每年的那一天，他都不会忘记，王林记不清他的年纪，记不住自己的生辰，但他却记得千百年前的今天！这一天他不会忘记，每一年的今日，他都一个人怏怏的度过，或是在杀戮中让自己忘记，或是在逃遁中把它埋葬在心底，或者，是在那闭关中，一个人默数着年华的流逝。</p>
<p>鬼脸入幻，一梦千年，什么样的思念，会让一个人在梦中去寻找幸福。</p>
<p>但更多时候，他会一个人喝着酒，那辛辣的酒入喉肠，似燃烧一样，但他却感受不到，因为在他心中，思念，孤抑，萧瑟取代了全部，就算是天下间再烈的酒，也冲散不了半点！</p>
<p>我以火染红了整个苍穹，只为了给你不再闭目的理由。</p>
<p>我以雷轰颠了整个世界，只为了让你听到我的声音。</p>
<p>我走过了万万里，走过了一界界，只为了寻找你的呼吸。</p>
<p>我入魔杀道，逆天弑仙，颠覆了天与地，萧瑟孤独的背影站在你的面前，只为了让你睁开那让我平静的双眼。</p>
<p>他喜欢黑色，喜欢黑夜，因为黑夜可以将其萧瑟的身影遮盖，因为黑色中，他的孤独，别人看不到……</p>
<p>他的哀在心中的深处，永远被冷漠与生存覆盖，轻易不会显露出来，在他的默默走去中，他只想一个人静静的在一个无人的地方，默数自己的记忆。</p>
<p>“我相信，汝等是这黑夜的一部分……”</p>
<p>“我相信，汝等是阻挡我前行的一部分……”</p>
<p>“我相信，当骄阳升空之时，你们会与黑夜一同消教……”</p>
<p>“我相信，在这黑夜后，会有我寻找了数千年的光明……”</p>
<p>“我相信，那光明，一定存在，一定……，我相信！”</p>
<p>“我的头发，已不再是黑色，黑夜给我了黑色的头发，但它却代表了光明……”</p>
<p>“我的双眼，已不再是黑色，它蕴含了火与雷，还有那如规则般的禁制……黑夜给了我黑色的眼睛，但那火，将会焚烧黑夜，那雷，将会照耀黑夜，那禁制，将会打破规则，我要用我的双眼，去看到光明！”</p>
<p>万年修道一执念，“残夜”这是王林自创的信术，王林的执念是复活婉儿，逆天道轮回，更是这一股执念支撑着王林化作朝阳，撕破残夜。那是逆天改命，撕开黑夜，复活李慕婉的信念，那是他这一生，奉之入灵魂的不屈！</p>
<p>但这执念也是伤痛所在，每个人的心中，都有一个箱子，这个箱子里，装着他对于一个人的记忆，这个记忆，或许是甜，或许是涩。</p>
<p>有的人，把这个箱子连同自己，一起丢了，找不到了。  </p>
<p>有的人，把箱子锁住，吞下了钥匙，自己不想打开，也不允许别人去碰。  </p>
<p>有的人，一直把这个箱子，握在掌心里，告诉自己不要忘记。  </p>
<p>有的人，则是把箱子深深的埋了下来，去等那一年……春暖花开，是否会绽放娇艳的花朵。箱子里装的，是对一个人的情，是一杯甜与涩的交融和回忆……  </p>
<p>心中持一执念，不管是甜也好涩也好，但至少可以有一个等待的希望安慰自己，或许某一天，它真的可以化作那撕开黑夜的量，使你的天地，春暖花开！  </p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>android 反射强行设置开启系统权限</title>
    <url>/2020/03/12/%E5%8F%8D%E5%B0%84%E5%BC%BA%E8%A1%8C%E8%AE%BE%E7%BD%AE%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p>发现小米 6 安全管家，即使我关闭了某些权限，但我一打开应用后，应用自己开启了权限，遂，反编译之，得以下反射强行设置权限代码。。</p>
<p>理论上手动开启权限也是使用以下的代码进行，因此只有系统应用可以使用。（但不排除某些厂商定制rom的过程中，漏掉了关键的验证，调用只有有可能是可行的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AppOpsManager appOpsManager = mContext.getSystemService(AppOpsManager<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">HashMap&lt;String, Integer&gt; map = (HashMap&lt;String, Integer&gt;) ClazzUtils.getObjectFieldObject(appOpsManager,<span class="string">"sOpStrToOp"</span>);</span><br><span class="line">Method method = appOpsManager.getClass().getMethod(<span class="string">"setMode"</span>,<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>,<span class="title">String</span>.<span class="title">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="keyword">int</span> code = map.get(AppOpsManager.OPSTR_GET_USAGE_STATS);</span><br><span class="line"><span class="keyword">int</span> uid = Binder.getCallingUid();</span><br><span class="line">String pkn = mContext.getPackageName();</span><br><span class="line"><span class="keyword">int</span> mode = AppOpsManager.MODE_ALLOWED;</span><br><span class="line">method.invoke(appOpsManager,code,uid,pkn,mode);</span><br></pre></td></tr></table></figure>


<p>再附上一个反编译小米安全管家设置权限的代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Object mAppOpsManager = context.getSystemService(<span class="string">"appops"</span>);</span><br><span class="line">ClazzUtils.invokeObjectMethod(mAppOpsManager, "setUserRestriction", new Class[]&#123;Integer.TYPE, Boolean.TYPE, IBinder.class&#125;, new Object[]&#123;Integer.valueOf(24), Boolean.valueOf(true), new Binder()&#125;);</span><br><span class="line">ClazzUtils.invokeObjectMethod(mAppOpsManager, "setUserRestriction", new Class[]&#123;Integer.TYPE, Boolean.TYPE, IBinder.class&#125;, new Object[]&#123;Integer.valueOf(45), Boolean.valueOf(true), new Binder()&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式匹配http链接</title>
    <url>/2018/11/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8Dhttp%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>写正则表达式，匹配以下例如：<br><a href="http://hello.hello.com和大海" target="_blank" rel="noopener">http://hello.hello.com和大海</a><br><a href="http://hello.hello.com和大海" target="_blank" rel="noopener">http://hello.hello.com和大海</a><br><a href="http://hello.aaa.com和大海" target="_blank" rel="noopener">http://hello.aaa.com和大海</a><br><a href="http://hello.hello.com.cn和大海" target="_blank" rel="noopener">http://hello.hello.com.cn和大海</a><br><a href="http://hello.hello.name和大海" target="_blank" rel="noopener">http://hello.hello.name和大海</a><br><a href="http://hello.hello.top和大海" target="_blank" rel="noopener">http://hello.hello.top和大海</a><br><a href="https://hello.hello.com和大海" target="_blank" rel="noopener">https://hello.hello.com和大海</a><br><a href="http://hello.hello.com和大海" target="_blank" rel="noopener">http://hello.hello.com和大海</a><br><a href="http://hello.hello.com和大海" target="_blank" rel="noopener">http://hello.hello.com和大海</a><br><a href="http://hello.hello.hh" target="_blank" rel="noopener">http://hello.hello.hh</a><br>321和大海<br><a href="http://hello.hello.cn?hello=aaa和大海" target="_blank" rel="noopener">http://hello.hello.cn?hello=aaa和大海</a><br><a href="http://www.baicu.com?123=321" target="_blank" rel="noopener">http://www.baicu.com?123=321</a><br><a href="https://www.baicu.com?123=321" target="_blank" rel="noopener">https://www.baicu.com?123=321</a> 321</p>
<p>匹配非中文：[^\x{4e00}-\x{9fa5}]<br>匹配非空格回车换行:[^\n\r\s]</p>
<p>只匹配<a href="http://www.xxx.固定几个域名后缀" target="_blank" rel="noopener">www.xxx.固定几个域名后缀</a> + 请求参数<br>严格模式（括号部分根据情况设置后缀）：</p>
<p><code>https{0,1}://www\.[^\x{4e00}-\x{9fa5}\n\r\s]+\.((com)|(cn)|(info)|(com\.cn)|(top))[^\x{4e00}-\x{9fa5}\n\r\s]*</code></p>
<p>匹配http开头的就行<br>非严格模式：<br><code>https{0,1}://[^\x{4e00}-\x{9fa5}\n\r\s]{3,}</code></p>
]]></content>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Android连同嵌套依赖打成一个aar</title>
    <url>/2020/06/10/%E8%BF%9E%E5%90%8C%E5%B5%8C%E5%A5%97%E4%BE%9D%E8%B5%96%E6%89%93%E6%88%90%E4%B8%80%E4%B8%AAaar/</url>
    <content><![CDATA[<p>场景 module A 里面引用了 module B ，现在想打个 module A 的 AAR包，并且想把module B的类库也打包进去。</p>
<p>需要调整以下几点</p>
<ol>
<li>api的方式直接引用aar文件或jar文件，在libs下面的。</li>
<li>打包的时候用bundleRelease，不要用build。</li>
</ol>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Android studio 下的APK打包失败问题</title>
    <url>/2016/05/16/%E8%A7%A3%E5%86%B3Android-studio-%E4%B8%8B%E7%9A%84APK%E6%89%93%E5%8C%85%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%EF%BC%882016-05-16-15-25%EF%BC%89/</url>
    <content><![CDATA[<p>今天遇到了一个奇怪的问题，本来在Android  studio 1.4上运行的好好的程序，到了我更新完的Android  studio  2.1上就打包失败了，但是用调试机直接运行则没问题。</p>
<a id="more"></a>
<p>最后在app下的build.gradle下加入了这样的一段代码就通过了：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">lintOptions &#123;</span><br><span class="line">     abortOnError <span class="keyword">false</span></span><br><span class="line">     checkReleaseBuilds <span class="keyword">false</span></span><br><span class="line">     <span class="comment">// 防止在发布的时候出现因MissingTranslation导致Build Failed!</span></span><br><span class="line">     disable <span class="string">'MissingTranslation'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>原因好像是项目在打包的时候进行检查，而我们的项目如果存在不适当地操作的时候就无法通过，当然也就打包失败了，而这样的解决方法就是忽略掉这些检查。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>关于android组播通讯只能收到本机消息的问题</title>
    <url>/2017/09/11/%E8%A7%A3%E5%86%B3android%E7%BB%84%E6%92%AD%E9%80%9A%E8%AE%AF%E5%8F%AA%E8%83%BD%E6%94%B6%E5%88%B0%E6%9C%AC%E6%9C%BA%E6%B6%88%E6%81%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>本文出处：<a href="http://blog.csdn.net/qq_27512671/article/details/77935210" target="_blank" rel="noopener">http://blog.csdn.net/qq_27512671/article/details/77935210</a></p>
</blockquote>
<p>答案是Android为了减少耗电，默认是不接收组播消息的。想要接收，必须把这个开关打开。<br>打开方法：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">openMulticastLock</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wifiManager = getSystemService(Context.WIFI_SERVICE) <span class="keyword">as</span> WifiManager</span><br><span class="line">	multicastLock = wifiManager.createMulticastLock(<span class="string">"multicast.test"</span>)</span><br><span class="line">	multicastLock.acquire()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>然后再次之后判断一下打开状态在进行后续的操作</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (multicastLock.isHeld) &#123;</span><br><span class="line">    TODO(<span class="string">"加入组播"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外组播地址范围也要写正确：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">224.0.0.0～224.0.0.255为预留的组播地址（永久组地址），地址224.0.0.0保留不做分配，其它地址供路由协议使用；</span><br><span class="line">224.0.1.0～224.0.1.255是公用组播地址，可以用于Internet；</span><br><span class="line">224.0.2.0～238.255.255.255为用户可用的组播地址（临时组地址），全网范围内有效；</span><br><span class="line">239.0.0.0～239.255.255.255为本地管理组播地址，仅在特定的本地范围内有效。</span><br></pre></td></tr></table></figure>
<p>另外考虑到Android为客官节省电量的愿望，当不需要组播通讯时，要把这个锁锁上。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (multicastLock.isHeld) &#123;</span><br><span class="line">    multicastLock.release()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 豁免所有hide灰名单调用警告，不弹窗，logcat不提示</title>
    <url>/2020/04/17/%E8%B1%81%E5%85%8D%E6%89%80%E6%9C%89hide%E7%81%B0%E5%90%8D%E5%8D%95%E8%B0%83%E7%94%A8%E8%AD%A6%E5%91%8A%EF%BC%8C%E4%B8%8D%E5%BC%B9%E7%AA%97%EF%BC%8Clogcat%E4%B8%8D%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p>从 android 9.0 开始，当代码调用某些系统api的时候，会因为api的一些判定灰名单级别，不同程度的对app做出提醒，最严重的是直接弹窗提醒，次之是会在logcat打印出调用内容。</p>
<p>具体api名单列表：<a href="https://developer.android.google.cn/about/versions/10/non-sdk-q" target="_blank" rel="noopener">https://developer.android.google.cn/about/versions/10/non-sdk-q</a></p>
<p>但有些情况下我们确实要使用这些api，下面是我总结了以下几种方案：</p>
<ol>
<li>反射禁止弹窗</li>
<li>使用元反射</li>
<li>终极方案，元反射基础上，本进程将所有灰黑api加入白名单</li>
</ol>
<a id="more"></a>

<h2 id="1-反射禁止弹窗"><a href="#1-反射禁止弹窗" class="headerlink" title="1. 反射禁止弹窗"></a>1. 反射禁止弹窗</h2><p>优点：</p>
<ul>
<li>能避免弹窗</li>
</ul>
<p>缺点：</p>
<ul>
<li>不能避免代码扫描，logcat打印</li>
<li>某些类方法用 getMethod 无法发现，无法获取到，因此也就无法反射</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class aClass = Class.forName(<span class="string">"android.content.pm.PackageParser$Package"</span>);</span><br><span class="line">    Constructor declaredConstructor = aClass.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class cls = Class.forName(<span class="string">"android.app.ActivityThread"</span>);</span><br><span class="line">    Method declaredMethod = cls.getDeclaredMethod(<span class="string">"currentActivityThread"</span>);</span><br><span class="line">    declaredMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object activityThread = declaredMethod.invoke(<span class="keyword">null</span>);</span><br><span class="line">    Field mHiddenApiWarningShown = cls.getDeclaredField(<span class="string">"mHiddenApiWarningShown"</span>);</span><br><span class="line">    mHiddenApiWarningShown.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    mHiddenApiWarningShown.setBoolean(activityThread, <span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-使用元反射（能避免弹窗，logcat打印，只用使用元反射的才能达到效果）"><a href="#2-使用元反射（能避免弹窗，logcat打印，只用使用元反射的才能达到效果）" class="headerlink" title="2. 使用元反射（能避免弹窗，logcat打印，只用使用元反射的才能达到效果）"></a>2. 使用元反射（能避免弹窗，logcat打印，只用使用元反射的才能达到效果）</h2><p>优点：</p>
<ul>
<li>能避免弹窗</li>
<li>能避免代码扫描，logcat打印</li>
<li>某些用getMethod无法发现的方法，可以被发现了了，也可以反射了</li>
</ul>
<p>缺点：</p>
<ul>
<li>对于正常反射的代码，无效，会弹窗，打印logcat</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    forName = Class.class.getDeclaredMethod("forName", String.class);</span><br><span class="line">    <span class="comment">// invoke = Method.class.getMethod("invoke", Object.class, Object[].class);</span></span><br><span class="line">    <span class="comment">// 反射获取方法</span></span><br><span class="line">    getDeclaredMethod = Class.class.getDeclaredMethod("getDeclaredMethod", String.class, Class[].class);</span><br><span class="line">    getMethod = Class.class.getDeclaredMethod("getMethod", String.class, Class[].class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射获取变量</span></span><br><span class="line">    getDeclaredField = Class.class.getDeclaredMethod("getDeclaredField", String.class);</span><br><span class="line">    getField = Class.class.getDeclaredMethod("getField", String.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射实例化代码</span></span><br><span class="line">    getDeclaredConstructor = Class.class.getDeclaredMethod("getDeclaredConstructor", Class[].class);</span><br><span class="line">    getConstructor = Class.class.getDeclaredMethod("getConstructor", Class[].class);</span><br><span class="line">    newInstance = Constructor.class.getDeclaredMethod("newInstance", Object[].class);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable igone) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反射时，原来的反射代码应这样写：</p>
<p>正常的反射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method getStringMethod = A.class.getDeclaredConstructor("getString");</span><br><span class="line">getStringMethod.invoke(<span class="keyword">new</span> A());</span><br></pre></td></tr></table></figure>
<p>元反射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method getStringMethod = getDeclaredConstructor.invoke(A.class,"getString");</span><br><span class="line">getStringMethod.invoke(<span class="keyword">new</span> A());</span><br></pre></td></tr></table></figure>


<h2 id="3-元反射基础上，本进程将所有灰黑api加入白名单（能避免弹窗，logcat打印，后续即使不使用元反射也能达到效果）"><a href="#3-元反射基础上，本进程将所有灰黑api加入白名单（能避免弹窗，logcat打印，后续即使不使用元反射也能达到效果）" class="headerlink" title="3. 元反射基础上，本进程将所有灰黑api加入白名单（能避免弹窗，logcat打印，后续即使不使用元反射也能达到效果）"></a>3. 元反射基础上，本进程将所有灰黑api加入白名单（能避免弹窗，logcat打印，后续即使不使用元反射也能达到效果）</h2><p>优点：</p>
<ul>
<li>能避免弹窗</li>
<li>能避免代码扫描，logcat打印</li>
<li>某些用getMethod无法发现的方法，可以被发现了了，也可以反射了</li>
<li>对于正常反射的代码，仍然不会弹窗，打印logcat</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    forName = Class.class.getDeclaredMethod("forName", String.class);</span><br><span class="line">    <span class="comment">// invoke = Method.class.getMethod("invoke", Object.class, Object[].class);</span></span><br><span class="line">    <span class="comment">// 反射获取方法</span></span><br><span class="line">    getDeclaredMethod = Class.class.getDeclaredMethod("getDeclaredMethod", String.class, Class[].class);</span><br><span class="line">    getMethod = Class.class.getDeclaredMethod("getMethod", String.class, Class[].class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射获取变量</span></span><br><span class="line">    getDeclaredField = Class.class.getDeclaredMethod("getDeclaredField", String.class);</span><br><span class="line">    getField = Class.class.getDeclaredMethod("getField", String.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射实例化代码</span></span><br><span class="line">    getDeclaredConstructor = Class.class.getDeclaredMethod("getDeclaredConstructor", Class[].class);</span><br><span class="line">    getConstructor = Class.class.getDeclaredMethod("getConstructor", Class[].class);</span><br><span class="line">    newInstance = Constructor.class.getDeclaredMethod("newInstance", Object[].class);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable igone) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; <span class="number">27</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 设置豁免所有hide api</span></span><br><span class="line"><span class="comment">    * http://androidxref.com/9.0.0_r3/xref/art/test/674-hiddenapi/src-art/Main.java#100</span></span><br><span class="line"><span class="comment">    * VMRuntime.getRuntime().setHiddenApiExemptions(new String[]&#123;"L"&#125;);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; vmRuntimeClass = (Class&lt;?&gt;) forName.invoke(<span class="keyword">null</span>, <span class="string">"dalvik.system.VMRuntime"</span>);</span><br><span class="line">        Method getRuntime = (Method) getDeclaredMethod.invoke(vmRuntimeClass, <span class="string">"getRuntime"</span>, <span class="keyword">null</span>);</span><br><span class="line">        Method setHiddenApiExemptions = (Method) getDeclaredMethod.invoke(vmRuntimeClass, <span class="string">"setHiddenApiExemptions"</span>, <span class="keyword">new</span> Class[]&#123;String[]<span class="class">.<span class="keyword">class</span>&#125;)</span>;</span><br><span class="line">        Object sVmRuntime = getRuntime.invoke(<span class="keyword">null</span>);</span><br><span class="line">        setHiddenApiExemptions.invoke(sVmRuntime, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"L"</span>&#125;&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable igone) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后推荐使用最后一种，成本最低效果最好。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android免root运行adb高级权限命令，例如修改手机设置等（转）</title>
    <url>/2020/06/02/%E9%AB%98%E7%BA%A7%E6%9D%83%E9%99%90%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%BE%8B%E5%A6%82%E4%BF%AE%E6%94%B9%E6%89%8B%E6%9C%BA%E8%AE%BE%E7%BD%AE%E7%AD%89%EF%BC%88%E8%BD%AC%EF%BC%89/</url>
    <content><![CDATA[<h1 id="免Root实现静默安装和点击任意位置"><a href="#免Root实现静默安装和点击任意位置" class="headerlink" title="免Root实现静默安装和点击任意位置"></a>免Root实现静默安装和点击任意位置</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0  前言"></a>0  前言</h2><p>最近有了个需求：免 root 实现任意位置点击和静默安装。这个做过的小伙伴应该都知道正常情况下是不可能实现的。无障碍只能实现对已知控件的点击，并不能指定坐标。但是确实有人另辟蹊径做出来了，譬如做游戏手柄的飞智，他们是用一个激活器，手机开 usb 调试，然后插在激活器上并授权，飞智游戏厅就被「激活」了，然后可以实现任意位置点击。如果不了解的可以去他们官网了解下，在这里不多赘述了。无独有偶，黑域也使用了类似的手段，也可以用电脑的usb调试激活。我们知道，任意位置坐标xy点击是可以在 pc 上通过 shell 命令「input tap x  y」来实现的，也不需要 root 权限。但是在应用内通过「Runtime.getRuntime().exec」执行这个 shell 命令却提示「permission denied」也就是权限不足。但是飞智或者黑域却好像使用了某种魔法，提升了自己的权限，那么问题来了：如何用 usb 调试给 app 提权？</p>
<h2 id="1-原理揭晓"><a href="#1-原理揭晓" class="headerlink" title="1 原理揭晓"></a>1 原理揭晓</h2><p>「如何用 usb 调试给 app 提权」这个问题乍一看确实没问题，但是知乎有个回答是「先问是不是，再问为什么」我觉得说的很好。我被这个问题给困扰了很久，最后发现我问错了。先放出结论「并不是给 app 提权，而是运行了一个有 shell 权限的新程序」</p>
<p>刚才的问题先放一边，我来问大家个新问题，怎样让 app 获取 root 权限？这个问题答案已经有不少了，网上一查便可知其实是获取「Runtime.getRuntime().exec」的流，在里面用su提权，然后就可以执行需要 root 权限的 shell 命令，比如挂载 system 读写，访问 data 分区，用 shell 命令静默安装，等等。话说回来，是不是和我们今天的主题有点像，如何使 app 获取 shell 权限？嗯，其实差不多，思路也类似，因为本来 root 啦， shell 啦，根本就不是 Android 应用层的名词呀，他们本来就是 Linux 里的名词，只不过是 Android 框架运行于 Linux 层之上， 我们可以调用 shell 命令，也可以在shell 里调用 su 来使shell 获取 root 权限，来绕过 Android 层做一些被限制的事。然而在 app 里调用 shell 命令，其进程还是 app 的，权限还是受限。所以就不能在 app 里运行 shell 命令，那么问题来了，不在 app 里运行在哪运行？答案是在 pc 上运行。当然不可能是 pc 一直连着手机啦，而是 pc 上在 shell 里运行独立的一个 java 程序，这个程序因为是在 shell 里启动的，所以具有 shell 权限。我们想一下，这个 Java 程序在 shell 里运行，建立本地 socket 服务器，和 app 通信，远程执行 app 下发的代码。因为即使拔掉了数据线，这个 Java 程序也不会停止，只要不重启他就一直活着，执行我们的命令，这不就是看起来 app 有了 shell 权限？现在真相大白，飞智和黑域用 usb 调试激活的那一下，其实是启动那个 Java 程序，飞智是执行模拟按键，黑域是监听系统事件，你想干啥就任你开发了。「注：黑域和飞智由于进程管理的需要，其实是先用 shell 启动一个 so ，然后再用 so 做跳板启动 Java 程序，而且 so 也充当守护进程，当 Java 意外停止可以重新启动，读着有兴趣可以自行研究，在此不多做说明」</p>
<a id="more"></a>

<h2 id="2-好耶！是-app-process"><a href="#2-好耶！是-app-process" class="headerlink" title="2 好耶！是 app_process"></a>2 好耶！是 app_process</h2><p>那么如何具体用 shell 运行 Java 程序呢？肯定不是「java xxx.jar」啦，Android 能运行的格式是 dex 。没错，就是apk 里那个 dex 。然后我们可以通过「app_process」开启动 Java 。app_process 的参数如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">app_process [vm-options] cmd-dir [options] start-class-name [main-options]</span><br></pre></td></tr></table></figure>

<p>这个诡异又可怕的东西是没有 -help 的。我们要么看源码，要么看别人分析好的。本人水平有限，这里选择看别人分析好的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vm-options – VM 选项</span><br><span class="line">cmd-dir –父目录 (/system/bin)</span><br><span class="line">options –运行的参数 :</span><br><span class="line">    –zygote</span><br><span class="line">    –start-system-server</span><br><span class="line">    –application (api&gt;=14)</span><br><span class="line">    –nice-name=nice_proc_name (api&gt;=14)</span><br><span class="line">start-class-name –包含main方法的主类  (com.android.commands.am.Am)</span><br><span class="line">main-options –启动时候传递到main方法中的参数</span><br></pre></td></tr></table></figure>

<h2 id="3-实践"><a href="#3-实践" class="headerlink" title="3 实践"></a>3 实践</h2><p>因为是 dex 我们就直接在 as 里写吧，提取 dex 也方便。新建个空白项目，初始结构是这样：</p>
<p><img src="http://article.gtf35.top/app_process/as%E9%BB%98%E8%AE%A4%E6%A6%82%E8%A7%88.JPG" alt=""></p>
<p>我们新建个包，存放我们要在 shell 下运行的 Java 代码：</p>
<p><img src="http://article.gtf35.top/app_process/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%B5%8B%E8%AF%95.JPG" alt=""></p>
<p>这里我们补全 Main 方法，因为我们这个不是个 Android 程序，只是编译成 dex 的纯 Java 程序，所以我们这个的入口是 Main :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> shellService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是在 shell 里运行的！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在代码里只是打印一行「我是在 shell 里运行的！！！」，因为这里是纯 Java 所以也用的 println。现在编译 apk：</p>
<p><img src="http://article.gtf35.top/app_process/%E7%BC%96%E8%AF%91%E5%87%BA%E6%9D%A5%E7%9A%84apk.JPG" alt=""></p>
<p>因为 apk 就是 zip 所以我们直接解压出 apk 文件里的classes.dex，然后执行 ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb push classes.dex /data/local/tmp</span><br><span class="line">cd /data/local/tmp</span><br><span class="line">app_process -Djava.class.path=/data/local/tmp/classes.dex /system/bin shellService.Main</span><br></pre></td></tr></table></figure>

<p>这时就能看到已经成功运行啦：</p>
<p><img src="http://article.gtf35.top/app_process/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.JPG" alt=""></p>
<p>这里因为 utf8 在 Windows shell 里有问题，所以乱码了，但是还是说明我们成功了。</p>
<p>##4 具有实用性</p>
<p>只能输出肯定是不行的，不具有实用性。我们之前说过，我们应该建立个本地 socket 服务器来接受命令并执行，这里的「Service」类实现了这个功能，因为如何建立 socket 不是文章的重点，所以大家只要知道这个类内部实现了一个「ServiceGetText」接口，在收到命令之后会把命令内容作为参数回掉 getText 方法，然后我们执行 shell 命令之后，吧结果作为字符串返回即可，具体实现可以看查看源码<a href="https://github.com/gtf35/app_process-shell-use/blob/master/app/src/main/java/shellService/Service.java" target="_blank" rel="noopener">Service</a>。</p>
<p>我们新建一个「<a href="https://github.com/gtf35/app_process-shell-use/blob/master/app/src/main/java/shellService/ServiceThread.java" target="_blank" rel="noopener">ServiceThread</a>」来运行「Service」服务和执行设立了命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ShellPORT = <span class="number">4521</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;Shell服务端程序被调用&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        <span class="keyword">new</span> Service(<span class="keyword">new</span> Service.ServiceGetText() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (text.startsWith(<span class="string">"###AreYouOK"</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"###IamOK#"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ServiceShellUtils.ServiceShellCommandResult sr =  ServiceShellUtils.execCommand(text, <span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (sr.result == <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"###ShellOK#"</span> + sr.successMsg;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"###ShellError#"</span> + sr.errorMsg;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"###CodeError#"</span> + e.toString();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, ShellPORT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <a href="https://github.com/gtf35/app_process-shell-use/blob/master/app/src/main/java/shellService/ServiceShellUtils.java" target="_blank" rel="noopener">ServiceShellUtils</a> 用到了开源项目 ShellUtils 在此感谢。这个类用来执行 shell 命令。</p>
<p>然后在 Main 中调用这个线程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ServiceThread().start();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，我们服务端就准备好了，我们来写控制服务端的 app 。我们新建类「SocketClient」用来和服务端进行通信，并在活动里调用他（完整代码请参看<a href="https://github.com/gtf35/app_process-shell-use/blob/master/app/src/main/java/top/gtf35/shellapplicatontest/SocketClient.java" target="_blank" rel="noopener">SocketClient</a>和<a href="https://github.com/gtf35/app_process-shell-use/blob/master/app/src/main/java/top/gtf35/shellapplicatontest/MainActivity.java" target="_blank" rel="noopener">MainActivity</a>）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runShell</span><span class="params">(<span class="keyword">final</span> String cmd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(cmd)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">new</span> SocketClient(cmd, <span class="keyword">new</span> SocketClient.onServiceSend() &#123;</span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSend</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">                      showTextOnTextView(result);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>然后重复 3 小节的操作，运行这个服务端:</p>
<p><img src="http://article.gtf35.top/app_process/%E6%9C%80%E5%90%8Edemo%E7%9A%84shell.JPG" alt=""></p>
<p>然后安装 apk ，运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">input text HelloWord</span><br></pre></td></tr></table></figure>

<p><img src="http://article.gtf35.top/app_process/%E6%89%8B%E6%9C%BA%E8%BF%90%E8%A1%8C.gif" alt=""></p>
<p>可以看到，在不 root 的情况下，成功的执行了需要 shell 权限的命令</p>
<h2 id="5-最可爱的人"><a href="#5-最可爱的人" class="headerlink" title="5 最可爱的人"></a>5 最可爱的人</h2><p>最后，我真的是要由衷的感谢各种技术分析文章和开源项目，真的太感谢了，没有无条件的奉献就没有互联网这么快的进步。</p>
<p>我对 app_process 利用方法的研究离不开以下项目和前辈的汗水:</p>
<p><a href="https://github.com/brevent/Brevent" target="_blank" rel="noopener">Brevent</a> 最早利用app_process进程实现无 root 权限使用的开源应用（虽然已经闭源，仍然尊重并感谢 <a href="https://github.com/liudongmiao" target="_blank" rel="noopener">liudongmiao</a>）</p>
<p><a href="https://github.com/Zane96/Fairy" target="_blank" rel="noopener">Android system log viewer on Android phone without root.</a> 利用app_process进程实现无 root 权限使用的优秀开源应用</p>
<p><a href="https://blog.csdn.net/u010651541/article/details/53163542" target="_blank" rel="noopener">Android上app_process启动java进程</a> 通俗易懂的教程</p>
<p><a href="https://haruue.moe/blog/2017/08/30/call-privileged-api-with-app-process/" target="_blank" rel="noopener">使用 app_process 来调用高权限 API</a> 分析的很深刻的教程</p>
<p>本文的项目可以在<a href="https://github.com/gtf35/app_process-shell-use" target="_blank" rel="noopener">GitHub上获取</a>：<a href="https://github.com/gtf35/app_process-shell-use" target="_blank" rel="noopener">https://github.com/gtf35/app_process-shell-use</a></p>
<blockquote>
<p>本文转发自：<a href="https://github.com/gtf35/app_process-shell-use" target="_blank" rel="noopener">https://github.com/gtf35/app_process-shell-use</a><br>如果转发地址失效了或访问404，可访问我fork的<br><a href="https://github.com/miqt/app_process-shell-use" target="_blank" rel="noopener">https://github.com/miqt/app_process-shell-use</a></p>
</blockquote>
]]></content>
  </entry>
</search>
